
automotive_dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007830  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08007a30  08007a30  00017a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e38  08007e38  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e40  08007e40  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bdc  20000064  08007eac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c40  08007eac  00024c40  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e8a  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e68  00000000  00000000  00033f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00036dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bab  00000000  00000000  00037ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000384c  00000000  00000000  00038893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013041  00000000  00000000  0003c0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb56a  00000000  00000000  0004f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004388  00000000  00000000  0014a68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0014ea14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	08007a18 	.word	0x08007a18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	08007a18 	.word	0x08007a18

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <generate_random>:
 * @brief Simple pseudo-random number generator
 * @param min: minimum value (inclusive)
 * @param max: maximum value (inclusive)
 * @retval Random number between min and max
 */
uint32_t generate_random(uint32_t min, uint32_t max) {
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
    if (max <= min) return min;  // Safety check
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d801      	bhi.n	80005f2 <generate_random+0x16>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	e01b      	b.n	800062a <generate_random+0x4e>

    random_seed = (random_seed * 1103515245 + 12345) & 0x7fffffff;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <generate_random+0x5c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a11      	ldr	r2, [pc, #68]	; (800063c <generate_random+0x60>)
 80005f8:	fb03 f202 	mul.w	r2, r3, r2
 80005fc:	f243 0339 	movw	r3, #12345	; 0x3039
 8000600:	4413      	add	r3, r2
 8000602:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <generate_random+0x5c>)
 8000608:	6013      	str	r3, [r2, #0]
    uint32_t range = max - min + 1;
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
    return min + (random_seed % range);
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <generate_random+0x5c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	fbb3 f2f2 	udiv	r2, r3, r2
 800061e:	68f9      	ldr	r1, [r7, #12]
 8000620:	fb01 f202 	mul.w	r2, r1, r2
 8000624:	1a9a      	subs	r2, r3, r2
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
}
 800062a:	4618      	mov	r0, r3
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200001a4 	.word	0x200001a4
 800063c:	41c64e6d 	.word	0x41c64e6d

08000640 <generate_random_float>:
 * @brief Generate random float number
 * @param min: minimum value
 * @param max: maximum value
 * @retval Random float between min and max
 */
float generate_random_float(float min, float max) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	ed87 0a01 	vstr	s0, [r7, #4]
 800064a:	edc7 0a00 	vstr	s1, [r7]
    uint32_t rand_int = generate_random(0, 1000);
 800064e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff ffc2 	bl	80005dc <generate_random>
 8000658:	60f8      	str	r0, [r7, #12]
    float ratio = (float)rand_int / 1000.0f;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	ee07 3a90 	vmov	s15, r3
 8000660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000664:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000698 <generate_random_float+0x58>
 8000668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800066c:	edc7 7a02 	vstr	s15, [r7, #8]
    return min + ratio * (max - min);
 8000670:	ed97 7a00 	vldr	s14, [r7]
 8000674:	edd7 7a01 	vldr	s15, [r7, #4]
 8000678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800067c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000680:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000684:	edd7 7a01 	vldr	s15, [r7, #4]
 8000688:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800068c:	eeb0 0a67 	vmov.f32	s0, s15
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	447a0000 	.word	0x447a0000

0800069c <calculate_nmea_checksum>:
/**
 * @brief Calculate NMEA sentence checksum
 * @param sentence: NMEA sentence (without $ and *)
 * @retval Calculated checksum
 */
uint8_t calculate_nmea_checksum(const char* sentence) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
    while (*sentence) {
 80006a8:	e007      	b.n	80006ba <calculate_nmea_checksum+0x1e>
        checksum ^= *sentence;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	4053      	eors	r3, r2
 80006b2:	73fb      	strb	r3, [r7, #15]
        sentence++;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3301      	adds	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
    while (*sentence) {
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1f3      	bne.n	80006aa <calculate_nmea_checksum+0xe>
    }
    return checksum;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <generate_gps_string>:
/**
 * @brief Generate synthetic GPS GPGGA string
 * @param gps_buffer: Buffer to store the GPS string
 * @param buffer_size: Size of the buffer
 */
void generate_gps_string(char* gps_buffer, size_t buffer_size) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0b2      	sub	sp, #200	; 0xc8
 80006d4:	af08      	add	r7, sp, #32
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
    char temp_sentence[128];

    if (gps_buffer == NULL || buffer_size < 50) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f000 80b7 	beq.w	8000850 <generate_gps_string+0x180>
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	2b31      	cmp	r3, #49	; 0x31
 80006e6:	f240 80b3 	bls.w	8000850 <generate_gps_string+0x180>
        return;  // Safety check
    }

    // Convert time counter to HHMMSS format
    uint32_t hours = (gps_time_counter / 10000) % 24;
 80006ea:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <generate_gps_string+0x188>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a5b      	ldr	r2, [pc, #364]	; (800085c <generate_gps_string+0x18c>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	0b5a      	lsrs	r2, r3, #13
 80006f6:	4b5a      	ldr	r3, [pc, #360]	; (8000860 <generate_gps_string+0x190>)
 80006f8:	fba3 1302 	umull	r1, r3, r3, r2
 80006fc:	0919      	lsrs	r1, r3, #4
 80006fe:	460b      	mov	r3, r1
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	440b      	add	r3, r1
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    uint32_t minutes = (gps_time_counter / 100) % 100;
 800070c:	4b52      	ldr	r3, [pc, #328]	; (8000858 <generate_gps_string+0x188>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a54      	ldr	r2, [pc, #336]	; (8000864 <generate_gps_string+0x194>)
 8000712:	fba2 2303 	umull	r2, r3, r2, r3
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	4a52      	ldr	r2, [pc, #328]	; (8000864 <generate_gps_string+0x194>)
 800071a:	fba2 1203 	umull	r1, r2, r2, r3
 800071e:	0952      	lsrs	r2, r2, #5
 8000720:	2164      	movs	r1, #100	; 0x64
 8000722:	fb01 f202 	mul.w	r2, r1, r2
 8000726:	1a9b      	subs	r3, r3, r2
 8000728:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    uint32_t seconds = gps_time_counter % 100;
 800072c:	4b4a      	ldr	r3, [pc, #296]	; (8000858 <generate_gps_string+0x188>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a4c      	ldr	r2, [pc, #304]	; (8000864 <generate_gps_string+0x194>)
 8000732:	fba2 1203 	umull	r1, r2, r2, r3
 8000736:	0952      	lsrs	r2, r2, #5
 8000738:	2164      	movs	r1, #100	; 0x64
 800073a:	fb01 f202 	mul.w	r2, r1, r2
 800073e:	1a9b      	subs	r3, r3, r2
 8000740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    // Generate random values
    uint8_t satellites = generate_random(3, 10);
 8000744:	210a      	movs	r1, #10
 8000746:	2003      	movs	r0, #3
 8000748:	f7ff ff48 	bl	80005dc <generate_random>
 800074c:	4603      	mov	r3, r0
 800074e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    float hdop = generate_random_float(0.5f, 2.0f);
 8000752:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000756:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800075a:	f7ff ff71 	bl	8000640 <generate_random_float>
 800075e:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
    float altitude = generate_random_float(100.0f, 1000.0f);
 8000762:	eddf 0a41 	vldr	s1, [pc, #260]	; 8000868 <generate_gps_string+0x198>
 8000766:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800086c <generate_gps_string+0x19c>
 800076a:	f7ff ff69 	bl	8000640 <generate_random_float>
 800076e:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

    // Create the sentence without checksum
    int ret = snprintf(temp_sentence, sizeof(temp_sentence),
 8000772:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8000776:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800077a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800077e:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8000782:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000786:	f107 0008 	add.w	r0, r7, #8
 800078a:	ed8d 6b06 	vstr	d6, [sp, #24]
 800078e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000792:	9302      	str	r3, [sp, #8]
 8000794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000798:	9301      	str	r3, [sp, #4]
 800079a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80007a4:	4a32      	ldr	r2, [pc, #200]	; (8000870 <generate_gps_string+0x1a0>)
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	f006 fc30 	bl	800700c <sniprintf>
 80007ac:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
             "GPGGA,%02lu%02lu%02lu,4807.038,N,01131.000,E,1,%02d,%.1f,%.1f,M,46.9,M,,",
             hours, minutes, seconds, satellites, hdop, altitude);

    if (ret < 0 || ret >= sizeof(temp_sentence)) {
 80007b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	db03      	blt.n	80007c0 <generate_gps_string+0xf0>
 80007b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007bc:	2b7f      	cmp	r3, #127	; 0x7f
 80007be:	d908      	bls.n	80007d2 <generate_gps_string+0x102>
        strcpy(gps_buffer, "$GPGGA,120000,4807.038,N,01131.000,E,1,04,1.0,100.0,M,46.9,M,,*5E");
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <generate_gps_string+0x1a4>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	4611      	mov	r1, r2
 80007c8:	2342      	movs	r3, #66	; 0x42
 80007ca:	461a      	mov	r2, r3
 80007cc:	f006 fcd4 	bl	8007178 <memcpy>
        return;
 80007d0:	e03f      	b.n	8000852 <generate_gps_string+0x182>
    }

    // Calculate checksum
    uint8_t checksum = calculate_nmea_checksum(temp_sentence);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff60 	bl	800069c <calculate_nmea_checksum>
 80007dc:	4603      	mov	r3, r0
 80007de:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

    // Create final GPS string with checksum
    snprintf(gps_buffer, buffer_size, "$%s*%02X", temp_sentence, checksum);
 80007e2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80007e6:	f107 0208 	add.w	r2, r7, #8
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	4613      	mov	r3, r2
 80007ee:	4a22      	ldr	r2, [pc, #136]	; (8000878 <generate_gps_string+0x1a8>)
 80007f0:	6839      	ldr	r1, [r7, #0]
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f006 fc0a 	bl	800700c <sniprintf>

    // Increment time for next call (simulate 1 second increment)
    gps_time_counter++;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <generate_gps_string+0x188>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <generate_gps_string+0x188>)
 8000800:	6013      	str	r3, [r2, #0]
    if ((gps_time_counter % 100) >= 60) {
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <generate_gps_string+0x188>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <generate_gps_string+0x194>)
 8000808:	fba3 1302 	umull	r1, r3, r3, r2
 800080c:	095b      	lsrs	r3, r3, #5
 800080e:	2164      	movs	r1, #100	; 0x64
 8000810:	fb01 f303 	mul.w	r3, r1, r3
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	2b3b      	cmp	r3, #59	; 0x3b
 8000818:	d904      	bls.n	8000824 <generate_gps_string+0x154>
        gps_time_counter += 40; // Skip to next minute
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <generate_gps_string+0x188>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3328      	adds	r3, #40	; 0x28
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <generate_gps_string+0x188>)
 8000822:	6013      	str	r3, [r2, #0]
    }
    if ((gps_time_counter % 10000) >= 6000) {
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <generate_gps_string+0x188>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <generate_gps_string+0x18c>)
 800082a:	fba3 1302 	umull	r1, r3, r3, r2
 800082e:	0b5b      	lsrs	r3, r3, #13
 8000830:	f242 7110 	movw	r1, #10000	; 0x2710
 8000834:	fb01 f303 	mul.w	r3, r1, r3
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	f241 726f 	movw	r2, #5999	; 0x176f
 800083e:	4293      	cmp	r3, r2
 8000840:	d907      	bls.n	8000852 <generate_gps_string+0x182>
        gps_time_counter += 4000; // Skip to next hour
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <generate_gps_string+0x188>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800084a:	4a03      	ldr	r2, [pc, #12]	; (8000858 <generate_gps_string+0x188>)
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	e000      	b.n	8000852 <generate_gps_string+0x182>
        return;  // Safety check
 8000850:	bf00      	nop
    }
}
 8000852:	37a8      	adds	r7, #168	; 0xa8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	d1b71759 	.word	0xd1b71759
 8000860:	aaaaaaab 	.word	0xaaaaaaab
 8000864:	51eb851f 	.word	0x51eb851f
 8000868:	447a0000 	.word	0x447a0000
 800086c:	42c80000 	.word	0x42c80000
 8000870:	08007a78 	.word	0x08007a78
 8000874:	08007ac4 	.word	0x08007ac4
 8000878:	08007b08 	.word	0x08007b08

0800087c <uart_printf>:
/**
 * @brief Printf function for UART output
 * @param format: printf-style format string
 * @retval Number of characters transmitted
 */
int uart_printf(const char* format, ...) {
 800087c:	b40f      	push	{r0, r1, r2, r3}
 800087e:	b580      	push	{r7, lr}
 8000880:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000884:	af00      	add	r7, sp, #0
    char buffer[512];  // Increased buffer size
    va_list args;
    va_start(args, format);
 8000886:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 800088a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800088e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000892:	601a      	str	r2, [r3, #0]
    int length = vsnprintf(buffer, sizeof(buffer), format, args);
 8000894:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000898:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800089c:	f107 0008 	add.w	r0, r7, #8
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80008a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008aa:	f006 fc0f 	bl	80070cc <vsniprintf>
 80008ae:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
    va_end(args);

    // Ensure we don't exceed buffer size
    if (length >= sizeof(buffer)) {
 80008b2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80008b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008ba:	d30c      	bcc.n	80008d6 <uart_printf+0x5a>
        length = sizeof(buffer) - 1;
 80008bc:	f240 13ff 	movw	r3, #511	; 0x1ff
 80008c0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
        buffer[length] = '\0';
 80008c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80008c8:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 80008cc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80008d0:	4413      	add	r3, r2
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
    }

    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart3, (uint8_t*)buffer, length, 5000);
 80008d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80008da:	b29a      	uxth	r2, r3
 80008dc:	f107 0108 	add.w	r1, r7, #8
 80008e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <uart_printf+0x98>)
 80008e6:	f002 f8c9 	bl	8002a7c <HAL_UART_Transmit>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
    if (status != HAL_OK) {
 80008f0:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d002      	beq.n	80008fe <uart_printf+0x82>
        // UART transmission failed
        return -1;
 80008f8:	f04f 33ff 	mov.w	r3, #4294967295
 80008fc:	e001      	b.n	8000902 <uart_printf+0x86>
    }
    return length;
 80008fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
}
 8000902:	4618      	mov	r0, r3
 8000904:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000908:	46bd      	mov	sp, r7
 800090a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800090e:	b004      	add	sp, #16
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000080 	.word	0x20000080

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b598      	push	{r3, r4, r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800091c:	f000 fa1e 	bl	8000d5c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000920:	f000 fb7d 	bl	800101e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000924:	f000 f87a 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000928:	f000 f904 	bl	8000b34 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800092c:	f000 f8d2 	bl	8000ad4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize random seed with a pseudo-random value
  random_seed = HAL_GetTick();
 8000930:	f000 fbc6 	bl	80010c0 <HAL_GetTick>
 8000934:	4603      	mov	r3, r0
 8000936:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <main+0xb8>)
 8000938:	6013      	str	r3, [r2, #0]
  if (random_seed == 0) {
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <main+0xb8>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d103      	bne.n	800094a <main+0x32>
    random_seed = 12345;  // Fallback seed
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <main+0xb8>)
 8000944:	f243 0239 	movw	r2, #12345	; 0x3039
 8000948:	601a      	str	r2, [r3, #0]
  }

  // Initialize dashboard buffer with default values
  dashboard_data.speed = 0;
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <main+0xbc>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
  dashboard_data.temperature = 273;
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <main+0xbc>)
 8000952:	f240 1211 	movw	r2, #273	; 0x111
 8000956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  strcpy(dashboard_data.GPS, "Initializing...");
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <main+0xc0>)
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <main+0xc4>)
 800095e:	4614      	mov	r4, r2
 8000960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Send initial debug message
  uart_printf("System Initialization Complete\r\n");
 8000966:	481e      	ldr	r0, [pc, #120]	; (80009e0 <main+0xc8>)
 8000968:	f7ff ff88 	bl	800087c <uart_printf>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800096c:	f003 f8fe 	bl	8003b6c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Create dashboard mutex */
  dashboardMutexHandle = osMutexNew(&dashboardMutex_attributes);
 8000970:	481c      	ldr	r0, [pc, #112]	; (80009e4 <main+0xcc>)
 8000972:	f003 fa39 	bl	8003de8 <osMutexNew>
 8000976:	4603      	mov	r3, r0
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <main+0xd0>)
 800097a:	6013      	str	r3, [r2, #0]
  if (dashboardMutexHandle == NULL) {
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <main+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <main+0x70>
    // Handle error - mutex creation failed
    Error_Handler();
 8000984:	f000 fa16 	bl	8000db4 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of speedTask */
  speedTaskHandle = osThreadNew(speedTaskHook, NULL, &speedTask_attributes);
 8000988:	4a18      	ldr	r2, [pc, #96]	; (80009ec <main+0xd4>)
 800098a:	2100      	movs	r1, #0
 800098c:	4818      	ldr	r0, [pc, #96]	; (80009f0 <main+0xd8>)
 800098e:	f003 f957 	bl	8003c40 <osThreadNew>
 8000992:	4603      	mov	r3, r0
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <main+0xdc>)
 8000996:	6013      	str	r3, [r2, #0]

  /* creation of gpsTask */
  gpsTaskHandle = osThreadNew(gpsTaksHook, NULL, &gpsTask_attributes);
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <main+0xe0>)
 800099a:	2100      	movs	r1, #0
 800099c:	4817      	ldr	r0, [pc, #92]	; (80009fc <main+0xe4>)
 800099e:	f003 f94f 	bl	8003c40 <osThreadNew>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <main+0xe8>)
 80009a6:	6013      	str	r3, [r2, #0]

  /* creation of temperatureTask */
  temperatureTaskHandle = osThreadNew(temperatureTaskHook, NULL, &temperatureTask_attributes);
 80009a8:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <main+0xec>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4816      	ldr	r0, [pc, #88]	; (8000a08 <main+0xf0>)
 80009ae:	f003 f947 	bl	8003c40 <osThreadNew>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <main+0xf4>)
 80009b6:	6013      	str	r3, [r2, #0]

  /* creation of bufferRenderingTask */
  bufferRenderingTaskHandle = osThreadNew(bufferRenderingTaskHook, NULL, &bufferRenderingTask_attributes);
 80009b8:	4a15      	ldr	r2, [pc, #84]	; (8000a10 <main+0xf8>)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4815      	ldr	r0, [pc, #84]	; (8000a14 <main+0xfc>)
 80009be:	f003 f93f 	bl	8003c40 <osThreadNew>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <main+0x100>)
 80009c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009c8:	f003 f904 	bl	8003bd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <main+0xb4>
 80009ce:	bf00      	nop
 80009d0:	200001a4 	.word	0x200001a4
 80009d4:	20000118 	.word	0x20000118
 80009d8:	2000011c 	.word	0x2000011c
 80009dc:	08007b14 	.word	0x08007b14
 80009e0:	08007b24 	.word	0x08007b24
 80009e4:	08007ddc 	.word	0x08007ddc
 80009e8:	200001a0 	.word	0x200001a0
 80009ec:	08007d4c 	.word	0x08007d4c
 80009f0:	08000b65 	.word	0x08000b65
 80009f4:	20000108 	.word	0x20000108
 80009f8:	08007d70 	.word	0x08007d70
 80009fc:	08000bb9 	.word	0x08000bb9
 8000a00:	2000010c 	.word	0x2000010c
 8000a04:	08007d94 	.word	0x08007d94
 8000a08:	08000c21 	.word	0x08000c21
 8000a0c:	20000110 	.word	0x20000110
 8000a10:	08007db8 	.word	0x08007db8
 8000a14:	08000c79 	.word	0x08000c79
 8000a18:	20000114 	.word	0x20000114

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	; 0x50
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2234      	movs	r2, #52	; 0x34
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f006 fb5c 	bl	80070e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <SystemClock_Config+0xb0>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a21      	ldr	r2, [pc, #132]	; (8000acc <SystemClock_Config+0xb0>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <SystemClock_Config+0xb0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <SystemClock_Config+0xb4>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a60:	4a1b      	ldr	r2, [pc, #108]	; (8000ad0 <SystemClock_Config+0xb4>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <SystemClock_Config+0xb4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a70:	603b      	str	r3, [r7, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 feed 	bl	8001868 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a94:	f000 f98e 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f986 	bl	8001dc4 <HAL_RCC_ClockConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000abe:	f000 f979 	bl	8000db4 <Error_Handler>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3750      	adds	r7, #80	; 0x50
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000ada:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <MX_USART3_UART_Init+0x5c>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ade:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USART3_UART_Init+0x58>)
 8000b18:	f001 ff62 	bl	80029e0 <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b22:	f000 f947 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000080 	.word	0x20000080
 8000b30:	40004800 	.word	0x40004800

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_GPIO_Init+0x2c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <MX_GPIO_Init+0x2c>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_GPIO_Init+0x2c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800

08000b64 <speedTaskHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_speedTaskHook */
void speedTaskHook(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uart_printf("Speed Task Started\r\n");
 8000b6c:	480f      	ldr	r0, [pc, #60]	; (8000bac <speedTaskHook+0x48>)
 8000b6e:	f7ff fe85 	bl	800087c <uart_printf>

  /* Infinite loop */
  for(;;)
  {
    // Generate synthetic speed data (0-200 km/h)
    int new_speed = generate_random(0, 200);
 8000b72:	21c8      	movs	r1, #200	; 0xc8
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd31 	bl	80005dc <generate_random>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	60fb      	str	r3, [r7, #12]

    // Acquire mutex to safely update shared buffer
    if (osMutexAcquire(dashboardMutexHandle, 1000) == osOK) {
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <speedTaskHook+0x4c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 f9c8 	bl	8003f1c <osMutexAcquire>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d107      	bne.n	8000ba2 <speedTaskHook+0x3e>
      dashboard_data.speed = new_speed;
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <speedTaskHook+0x50>)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6013      	str	r3, [r2, #0]
      osMutexRelease(dashboardMutexHandle);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <speedTaskHook+0x4c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 fa1b 	bl	8003fd8 <osMutexRelease>
    }

    // Wait 100ms for 10Hz polling rate
    osDelay(100);
 8000ba2:	2064      	movs	r0, #100	; 0x64
 8000ba4:	f003 f8f2 	bl	8003d8c <osDelay>
  {
 8000ba8:	e7e3      	b.n	8000b72 <speedTaskHook+0xe>
 8000baa:	bf00      	nop
 8000bac:	08007b48 	.word	0x08007b48
 8000bb0:	200001a0 	.word	0x200001a0
 8000bb4:	20000118 	.word	0x20000118

08000bb8 <gpsTaksHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gpsTaksHook */
void gpsTaksHook(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b0a2      	sub	sp, #136	; 0x88
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gpsTaksHook */
  uart_printf("GPS Task Started\r\n");
 8000bc0:	4813      	ldr	r0, [pc, #76]	; (8000c10 <gpsTaksHook+0x58>)
 8000bc2:	f7ff fe5b 	bl	800087c <uart_printf>
  for(;;)
  {
    char gps_string[128];

    // Generate synthetic GPS data
    generate_gps_string(gps_string, sizeof(gps_string));
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fd7f 	bl	80006d0 <generate_gps_string>

    // Acquire mutex to safely update shared buffer
    if (osMutexAcquire(dashboardMutexHandle, 1000) == osOK) {
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <gpsTaksHook+0x5c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 f99e 	bl	8003f1c <osMutexAcquire>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10f      	bne.n	8000c06 <gpsTaksHook+0x4e>
      strncpy(dashboard_data.GPS, gps_string, sizeof(dashboard_data.GPS) - 1);
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	227f      	movs	r2, #127	; 0x7f
 8000bec:	4619      	mov	r1, r3
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <gpsTaksHook+0x60>)
 8000bf0:	f006 fa82 	bl	80070f8 <strncpy>
      dashboard_data.GPS[sizeof(dashboard_data.GPS) - 1] = '\0'; // Ensure null termination
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <gpsTaksHook+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
      osMutexRelease(dashboardMutexHandle);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <gpsTaksHook+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 f9e9 	bl	8003fd8 <osMutexRelease>
    }

    // Wait 500ms for 2Hz polling rate
    osDelay(500);
 8000c06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c0a:	f003 f8bf 	bl	8003d8c <osDelay>
  {
 8000c0e:	e7da      	b.n	8000bc6 <gpsTaksHook+0xe>
 8000c10:	08007b60 	.word	0x08007b60
 8000c14:	200001a0 	.word	0x200001a0
 8000c18:	2000011c 	.word	0x2000011c
 8000c1c:	20000118 	.word	0x20000118

08000c20 <temperatureTaskHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_temperatureTaskHook */
void temperatureTaskHook(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN temperatureTaskHook */
  uart_printf("Temperature Task Started\r\n");
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <temperatureTaskHook+0x4c>)
 8000c2a:	f7ff fe27 	bl	800087c <uart_printf>

  /* Infinite loop */
  for(;;)
  {
    // Generate synthetic temperature data (273-320 Kelvin = 0-47°C)
    int new_temperature = generate_random(273, 320);
 8000c2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000c32:	f240 1011 	movw	r0, #273	; 0x111
 8000c36:	f7ff fcd1 	bl	80005dc <generate_random>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60fb      	str	r3, [r7, #12]

    // Acquire mutex to safely update shared buffer
    if (osMutexAcquire(dashboardMutexHandle, 1000) == osOK) {
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <temperatureTaskHook+0x50>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 f968 	bl	8003f1c <osMutexAcquire>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d108      	bne.n	8000c64 <temperatureTaskHook+0x44>
      dashboard_data.temperature = new_temperature;
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <temperatureTaskHook+0x54>)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      osMutexRelease(dashboardMutexHandle);
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <temperatureTaskHook+0x50>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 f9ba 	bl	8003fd8 <osMutexRelease>
    }

    // Wait 200ms for 5Hz polling rate
    osDelay(200);
 8000c64:	20c8      	movs	r0, #200	; 0xc8
 8000c66:	f003 f891 	bl	8003d8c <osDelay>
  {
 8000c6a:	e7e0      	b.n	8000c2e <temperatureTaskHook+0xe>
 8000c6c:	08007b74 	.word	0x08007b74
 8000c70:	200001a0 	.word	0x200001a0
 8000c74:	20000118 	.word	0x20000118

08000c78 <bufferRenderingTaskHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_bufferRenderingTaskHook */
void bufferRenderingTaskHook(void *argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0a4      	sub	sp, #144	; 0x90
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN bufferRenderingTaskHook */
  struct dashboard_buffer local_copy;

  // Send startup message
  uart_printf("\r\n=== Automotive Dashboard System Started ===\r\n");
 8000c80:	4829      	ldr	r0, [pc, #164]	; (8000d28 <bufferRenderingTaskHook+0xb0>)
 8000c82:	f7ff fdfb 	bl	800087c <uart_printf>
  uart_printf("Speed Task: 10Hz | GPS Task: 2Hz | Temperature Task: 5Hz\r\n");
 8000c86:	4829      	ldr	r0, [pc, #164]	; (8000d2c <bufferRenderingTaskHook+0xb4>)
 8000c88:	f7ff fdf8 	bl	800087c <uart_printf>
  uart_printf("Dashboard Refresh Rate: 1Hz\r\n");
 8000c8c:	4828      	ldr	r0, [pc, #160]	; (8000d30 <bufferRenderingTaskHook+0xb8>)
 8000c8e:	f7ff fdf5 	bl	800087c <uart_printf>
  uart_printf("================================================\r\n\r\n");
 8000c92:	4828      	ldr	r0, [pc, #160]	; (8000d34 <bufferRenderingTaskHook+0xbc>)
 8000c94:	f7ff fdf2 	bl	800087c <uart_printf>

  uart_printf("Dashboard Rendering Task Started\r\n");
 8000c98:	4827      	ldr	r0, [pc, #156]	; (8000d38 <bufferRenderingTaskHook+0xc0>)
 8000c9a:	f7ff fdef 	bl	800087c <uart_printf>

  // Wait a bit for other tasks to start
  osDelay(2000);
 8000c9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ca2:	f003 f873 	bl	8003d8c <osDelay>

  /* Infinite loop */
  for(;;)
  {
    // Acquire mutex to safely read shared buffer
    if (osMutexAcquire(dashboardMutexHandle, 1000) == osOK) {
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <bufferRenderingTaskHook+0xc4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 f934 	bl	8003f1c <osMutexAcquire>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d12d      	bne.n	8000d16 <bufferRenderingTaskHook+0x9e>
      // Make a local copy to minimize mutex holding time
      memcpy(&local_copy, &dashboard_data, sizeof(struct dashboard_buffer));
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <bufferRenderingTaskHook+0xc8>)
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	2288      	movs	r2, #136	; 0x88
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f006 fa57 	bl	8007178 <memcpy>
      osMutexRelease(dashboardMutexHandle);
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <bufferRenderingTaskHook+0xc4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 f982 	bl	8003fd8 <osMutexRelease>

      // Print dashboard data to UART
      uart_printf("=== Dashboard Update [%lu ms] ===\r\n", HAL_GetTick());
 8000cd4:	f000 f9f4 	bl	80010c0 <HAL_GetTick>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4819      	ldr	r0, [pc, #100]	; (8000d44 <bufferRenderingTaskHook+0xcc>)
 8000cde:	f7ff fdcd 	bl	800087c <uart_printf>
      uart_printf("Speed: %d km/h\r\n", local_copy.speed);
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4818      	ldr	r0, [pc, #96]	; (8000d48 <bufferRenderingTaskHook+0xd0>)
 8000ce8:	f7ff fdc8 	bl	800087c <uart_printf>
      uart_printf("Temperature: %d K (%dC)\r\n",
 8000cec:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
                  local_copy.temperature,
                  local_copy.temperature - 273);
 8000cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
      uart_printf("Temperature: %d K (%dC)\r\n",
 8000cf4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4814      	ldr	r0, [pc, #80]	; (8000d4c <bufferRenderingTaskHook+0xd4>)
 8000cfc:	f7ff fdbe 	bl	800087c <uart_printf>
      uart_printf("GPS: %s\r\n", local_copy.GPS);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	3304      	adds	r3, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4811      	ldr	r0, [pc, #68]	; (8000d50 <bufferRenderingTaskHook+0xd8>)
 8000d0a:	f7ff fdb7 	bl	800087c <uart_printf>
      uart_printf("----------------------------------\r\n\r\n");
 8000d0e:	4811      	ldr	r0, [pc, #68]	; (8000d54 <bufferRenderingTaskHook+0xdc>)
 8000d10:	f7ff fdb4 	bl	800087c <uart_printf>
 8000d14:	e002      	b.n	8000d1c <bufferRenderingTaskHook+0xa4>
    } else {
      uart_printf("ERROR: Could not acquire mutex for dashboard read\r\n");
 8000d16:	4810      	ldr	r0, [pc, #64]	; (8000d58 <bufferRenderingTaskHook+0xe0>)
 8000d18:	f7ff fdb0 	bl	800087c <uart_printf>
    }

    // Wait 1000ms for 1Hz refresh rate
    osDelay(1000);
 8000d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d20:	f003 f834 	bl	8003d8c <osDelay>
    if (osMutexAcquire(dashboardMutexHandle, 1000) == osOK) {
 8000d24:	e7bf      	b.n	8000ca6 <bufferRenderingTaskHook+0x2e>
 8000d26:	bf00      	nop
 8000d28:	08007b90 	.word	0x08007b90
 8000d2c:	08007bc0 	.word	0x08007bc0
 8000d30:	08007bfc 	.word	0x08007bfc
 8000d34:	08007c1c 	.word	0x08007c1c
 8000d38:	08007c54 	.word	0x08007c54
 8000d3c:	200001a0 	.word	0x200001a0
 8000d40:	20000118 	.word	0x20000118
 8000d44:	08007c78 	.word	0x08007c78
 8000d48:	08007c9c 	.word	0x08007c9c
 8000d4c:	08007cb0 	.word	0x08007cb0
 8000d50:	08007ccc 	.word	0x08007ccc
 8000d54:	08007cd8 	.word	0x08007cd8
 8000d58:	08007d00 	.word	0x08007d00

08000d5c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d6e:	f000 fac5 	bl	80012fc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d72:	2301      	movs	r3, #1
 8000d74:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d7e:	231f      	movs	r3, #31
 8000d80:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d82:	2387      	movs	r3, #135	; 0x87
 8000d84:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d92:	2301      	movs	r3, #1
 8000d94:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 fae3 	bl	800136c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000da6:	2004      	movs	r0, #4
 8000da8:	f000 fac0 	bl	800132c <HAL_MPU_Enable>

}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <HAL_MspInit+0x4c>)
 8000de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	210f      	movs	r1, #15
 8000dfa:	f06f 0001 	mvn.w	r0, #1
 8000dfe:	f000 fa46 	bl	800128e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0ae      	sub	sp, #184	; 0xb8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2290      	movs	r2, #144	; 0x90
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 f959 	bl	80070e8 <memset>
  if(huart->Instance==USART3)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a26      	ldr	r2, [pc, #152]	; (8000ed4 <HAL_UART_MspInit+0xc4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d144      	bne.n	8000eca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 f99e 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e5a:	f7ff ffab 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_UART_MspInit+0xc8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_UART_MspInit+0xc8>)
 8000e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0xc8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_UART_MspInit+0xc8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0xc8>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0xc8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea8:	2307      	movs	r3, #7
 8000eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4809      	ldr	r0, [pc, #36]	; (8000edc <HAL_UART_MspInit+0xcc>)
 8000eb6:	f000 fb2b 	bl	8001510 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	2027      	movs	r0, #39	; 0x27
 8000ec0:	f000 f9e5 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ec4:	2027      	movs	r0, #39	; 0x27
 8000ec6:	f000 f9fe 	bl	80012c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	37b8      	adds	r7, #184	; 0xb8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40004800 	.word	0x40004800
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020c00 	.word	0x40020c00

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f8c2 	bl	8001098 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f14:	f004 ff18 	bl	8005d48 <xTaskGetSchedulerState>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d001      	beq.n	8000f22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f1e:	f005 fdfb 	bl	8006b18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <USART3_IRQHandler+0x10>)
 8000f2e:	f001 fe2f 	bl	8002b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000080 	.word	0x20000080

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f006 f8d8 	bl	8007120 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20080000 	.word	0x20080000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	200001a8 	.word	0x200001a8
 8000fa4:	20004c40 	.word	0x20004c40

08000fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd0:	f7ff ffea 	bl	8000fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480c      	ldr	r0, [pc, #48]	; (8001008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd6:	490d      	ldr	r1, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd8:	4a0d      	ldr	r2, [pc, #52]	; (8001010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fec:	4c0a      	ldr	r4, [pc, #40]	; (8001018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f006 f897 	bl	800712c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ffe:	f7ff fc8b 	bl	8000918 <main>
  bx  lr    
 8001002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800100c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001010:	08007e48 	.word	0x08007e48
  ldr r2, =_sbss
 8001014:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001018:	20004c40 	.word	0x20004c40

0800101c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800101c:	e7fe      	b.n	800101c <ADC_IRQHandler>

0800101e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001022:	2003      	movs	r0, #3
 8001024:	f000 f928 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001028:	200f      	movs	r0, #15
 800102a:	f000 f805 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102e:	f7ff fec7 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f943 	bl	80012e2 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f90b 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000004 	.word	0x20000004
 8001090:	2000000c 	.word	0x2000000c
 8001094:	20000008 	.word	0x20000008

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	2000000c 	.word	0x2000000c
 80010bc:	200001ac 	.word	0x200001ac

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200001ac 	.word	0x200001ac

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <__NVIC_SetPriorityGrouping+0x40>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	4313      	orrs	r3, r2
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x40>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	05fa0000 	.word	0x05fa0000

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff29 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff3e 	bl	8001120 <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8e 	bl	80011cc <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5d 	bl	8001178 <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff31 	bl	800113c <__NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffa2 	bl	8001234 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001300:	f3bf 8f5f 	dmb	sy
}
 8001304:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_MPU_Disable+0x28>)
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <HAL_MPU_Disable+0x28>)
 800130c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001310:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_MPU_Disable+0x2c>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00
 8001328:	e000ed90 	.word	0xe000ed90

0800132c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_MPU_Enable+0x38>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_MPU_Enable+0x3c>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_MPU_Enable+0x3c>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800134a:	f3bf 8f4f 	dsb	sy
}
 800134e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001350:	f3bf 8f6f 	isb	sy
}
 8001354:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed90 	.word	0xe000ed90
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	785a      	ldrb	r2, [r3, #1]
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
 800137a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7b1b      	ldrb	r3, [r3, #12]
 8001394:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7adb      	ldrb	r3, [r3, #11]
 800139a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800139c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7a9b      	ldrb	r3, [r3, #10]
 80013a2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7b5b      	ldrb	r3, [r3, #13]
 80013aa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7b9b      	ldrb	r3, [r3, #14]
 80013b2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7bdb      	ldrb	r3, [r3, #15]
 80013ba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7a5b      	ldrb	r3, [r3, #9]
 80013c2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7a1b      	ldrb	r3, [r3, #8]
 80013ca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013cc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013d6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013d8:	6113      	str	r3, [r2, #16]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed90 	.word	0xe000ed90

080013ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013fa:	f7ff fe61 	bl	80010c0 <HAL_GetTick>
 80013fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d008      	beq.n	800141e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e052      	b.n	80014c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0216 	bic.w	r2, r2, #22
 800142c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800143c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	2b00      	cmp	r3, #0
 8001444:	d103      	bne.n	800144e <HAL_DMA_Abort+0x62>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0208 	bic.w	r2, r2, #8
 800145c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0201 	bic.w	r2, r2, #1
 800146c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800146e:	e013      	b.n	8001498 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001470:	f7ff fe26 	bl	80010c0 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b05      	cmp	r3, #5
 800147c:	d90c      	bls.n	8001498 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2220      	movs	r2, #32
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2203      	movs	r2, #3
 8001488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e015      	b.n	80014c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1e4      	bne.n	8001470 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	223f      	movs	r2, #63	; 0x3f
 80014ac:	409a      	lsls	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d004      	beq.n	80014ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00c      	b.n	8001504 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2205      	movs	r2, #5
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e175      	b.n	800181c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8164 	bne.w	8001816 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d005      	beq.n	8001566 <HAL_GPIO_Init+0x56>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d130      	bne.n	80015c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159c:	2201      	movs	r2, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 0201 	and.w	r2, r3, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d017      	beq.n	8001604 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d123      	bne.n	8001658 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	08da      	lsrs	r2, r3, #3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3208      	adds	r2, #8
 8001618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	220f      	movs	r2, #15
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	691a      	ldr	r2, [r3, #16]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	2203      	movs	r2, #3
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0203 	and.w	r2, r3, #3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4313      	orrs	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80be 	beq.w	8001816 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_GPIO_Init+0x324>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_GPIO_Init+0x324>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_GPIO_Init+0x324>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016b2:	4a61      	ldr	r2, [pc, #388]	; (8001838 <HAL_GPIO_Init+0x328>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a58      	ldr	r2, [pc, #352]	; (800183c <HAL_GPIO_Init+0x32c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d037      	beq.n	800174e <HAL_GPIO_Init+0x23e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a57      	ldr	r2, [pc, #348]	; (8001840 <HAL_GPIO_Init+0x330>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d031      	beq.n	800174a <HAL_GPIO_Init+0x23a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a56      	ldr	r2, [pc, #344]	; (8001844 <HAL_GPIO_Init+0x334>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d02b      	beq.n	8001746 <HAL_GPIO_Init+0x236>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a55      	ldr	r2, [pc, #340]	; (8001848 <HAL_GPIO_Init+0x338>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d025      	beq.n	8001742 <HAL_GPIO_Init+0x232>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a54      	ldr	r2, [pc, #336]	; (800184c <HAL_GPIO_Init+0x33c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01f      	beq.n	800173e <HAL_GPIO_Init+0x22e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a53      	ldr	r2, [pc, #332]	; (8001850 <HAL_GPIO_Init+0x340>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d019      	beq.n	800173a <HAL_GPIO_Init+0x22a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_GPIO_Init+0x344>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a51      	ldr	r2, [pc, #324]	; (8001858 <HAL_GPIO_Init+0x348>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00d      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a50      	ldr	r2, [pc, #320]	; (800185c <HAL_GPIO_Init+0x34c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d007      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4f      	ldr	r2, [pc, #316]	; (8001860 <HAL_GPIO_Init+0x350>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d101      	bne.n	800172a <HAL_GPIO_Init+0x21a>
 8001726:	2309      	movs	r3, #9
 8001728:	e012      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800172a:	230a      	movs	r3, #10
 800172c:	e010      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800172e:	2308      	movs	r3, #8
 8001730:	e00e      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001732:	2307      	movs	r3, #7
 8001734:	e00c      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001736:	2306      	movs	r3, #6
 8001738:	e00a      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800173a:	2305      	movs	r3, #5
 800173c:	e008      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800173e:	2304      	movs	r3, #4
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001742:	2303      	movs	r3, #3
 8001744:	e004      	b.n	8001750 <HAL_GPIO_Init+0x240>
 8001746:	2302      	movs	r3, #2
 8001748:	e002      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x240>
 800174e:	2300      	movs	r3, #0
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	4093      	lsls	r3, r2
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001760:	4935      	ldr	r1, [pc, #212]	; (8001838 <HAL_GPIO_Init+0x328>)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800176e:	4b3d      	ldr	r3, [pc, #244]	; (8001864 <HAL_GPIO_Init+0x354>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001792:	4a34      	ldr	r2, [pc, #208]	; (8001864 <HAL_GPIO_Init+0x354>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_GPIO_Init+0x354>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017bc:	4a29      	ldr	r2, [pc, #164]	; (8001864 <HAL_GPIO_Init+0x354>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_GPIO_Init+0x354>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e6:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <HAL_GPIO_Init+0x354>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <HAL_GPIO_Init+0x354>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <HAL_GPIO_Init+0x354>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0f      	cmp	r3, #15
 8001820:	f67f ae86 	bls.w	8001530 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40013800 	.word	0x40013800
 800183c:	40020000 	.word	0x40020000
 8001840:	40020400 	.word	0x40020400
 8001844:	40020800 	.word	0x40020800
 8001848:	40020c00 	.word	0x40020c00
 800184c:	40021000 	.word	0x40021000
 8001850:	40021400 	.word	0x40021400
 8001854:	40021800 	.word	0x40021800
 8001858:	40021c00 	.word	0x40021c00
 800185c:	40022000 	.word	0x40022000
 8001860:	40022400 	.word	0x40022400
 8001864:	40013c00 	.word	0x40013c00

08001868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e29b      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8087 	beq.w	800199a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800188c:	4b96      	ldr	r3, [pc, #600]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d00c      	beq.n	80018b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001898:	4b93      	ldr	r3, [pc, #588]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d112      	bne.n	80018ca <HAL_RCC_OscConfig+0x62>
 80018a4:	4b90      	ldr	r3, [pc, #576]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018b0:	d10b      	bne.n	80018ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b2:	4b8d      	ldr	r3, [pc, #564]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d06c      	beq.n	8001998 <HAL_RCC_OscConfig+0x130>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d168      	bne.n	8001998 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e275      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x7a>
 80018d4:	4b84      	ldr	r3, [pc, #528]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a83      	ldr	r2, [pc, #524]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	e02e      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x9c>
 80018ea:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a7e      	ldr	r2, [pc, #504]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b7c      	ldr	r3, [pc, #496]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a7b      	ldr	r2, [pc, #492]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80018fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001900:	6013      	str	r3, [r2, #0]
 8001902:	e01d      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0xc0>
 800190e:	4b76      	ldr	r3, [pc, #472]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a75      	ldr	r2, [pc, #468]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a72      	ldr	r2, [pc, #456]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e00b      	b.n	8001940 <HAL_RCC_OscConfig+0xd8>
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b6c      	ldr	r3, [pc, #432]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a6b      	ldr	r2, [pc, #428]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fbba 	bl	80010c0 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fbb6 	bl	80010c0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e229      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0xe8>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fba6 	bl	80010c0 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fba2 	bl	80010c0 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e215      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x110>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d069      	beq.n	8001a7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a6:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00b      	beq.n	80019ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b2:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d11c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x190>
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d116      	bne.n	80019f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d001      	beq.n	80019e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1e9      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	493d      	ldr	r1, [pc, #244]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	e040      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d023      	beq.n	8001a48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a38      	ldr	r2, [pc, #224]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fb58 	bl	80010c0 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fb54 	bl	80010c0 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1c7      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4929      	ldr	r1, [pc, #164]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
 8001a46:	e018      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a48:	4b27      	ldr	r3, [pc, #156]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7ff fb34 	bl	80010c0 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fb30 	bl	80010c0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1a3      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d038      	beq.n	8001af8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d019      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a92:	4a15      	ldr	r2, [pc, #84]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff fb11 	bl	80010c0 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff fb0d 	bl	80010c0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e180      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f0      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x23a>
 8001ac0:	e01a      	b.n	8001af8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff faf7 	bl	80010c0 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	e00a      	b.n	8001aec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff faf3 	bl	80010c0 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d903      	bls.n	8001aec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e166      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
 8001ae8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aec:	4b92      	ldr	r3, [pc, #584]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ee      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a4 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b06:	4b8c      	ldr	r3, [pc, #560]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10d      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b89      	ldr	r3, [pc, #548]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a88      	ldr	r2, [pc, #544]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b86      	ldr	r3, [pc, #536]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2e:	4b83      	ldr	r3, [pc, #524]	; (8001d3c <HAL_RCC_OscConfig+0x4d4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b3a:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x4d4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x4d4>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fabb 	bl	80010c0 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff fab7 	bl	80010c0 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e12a      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b60:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x4d4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x31a>
 8001b74:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a6f      	ldr	r2, [pc, #444]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x33c>
 8001b8a:	4b6b      	ldr	r3, [pc, #428]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a6a      	ldr	r2, [pc, #424]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a67      	ldr	r2, [pc, #412]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001b9c:	f023 0304 	bic.w	r3, r3, #4
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba2:	e01c      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x35e>
 8001bac:	4b62      	ldr	r3, [pc, #392]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	4a61      	ldr	r2, [pc, #388]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb8:	4b5f      	ldr	r3, [pc, #380]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	4a5e      	ldr	r2, [pc, #376]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc4:	e00b      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
 8001bc6:	4b5c      	ldr	r3, [pc, #368]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	4a5b      	ldr	r2, [pc, #364]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd2:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001bd8:	f023 0304 	bic.w	r3, r3, #4
 8001bdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d015      	beq.n	8001c12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff fa6b 	bl	80010c0 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fa67 	bl	80010c0 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e0d8      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0ee      	beq.n	8001bee <HAL_RCC_OscConfig+0x386>
 8001c10:	e014      	b.n	8001c3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff fa55 	bl	80010c0 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff fa51 	bl	80010c0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0c2      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	4b41      	ldr	r3, [pc, #260]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ee      	bne.n	8001c1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a3c      	ldr	r2, [pc, #240]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80ae 	beq.w	8001db4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c58:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d06d      	beq.n	8001d40 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d14b      	bne.n	8001d04 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a31      	ldr	r2, [pc, #196]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa22 	bl	80010c0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff fa1e 	bl	80010c0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e091      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	019b      	lsls	r3, r3, #6
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	071b      	lsls	r3, r3, #28
 8001cca:	491b      	ldr	r1, [pc, #108]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f9f0 	bl	80010c0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f9ec 	bl	80010c0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e05f      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
 8001d02:	e057      	b.n	8001db4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f9d6 	bl	80010c0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f9d2 	bl	80010c0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e045      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x4b0>
 8001d36:	e03d      	b.n	8001db4 <HAL_RCC_OscConfig+0x54c>
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_RCC_OscConfig+0x558>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d030      	beq.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d129      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d122      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d119      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10f      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0d0      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d910      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 020f 	bic.w	r2, r3, #15
 8001df2:	4965      	ldr	r1, [pc, #404]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0b8      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e24:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	494d      	ldr	r1, [pc, #308]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d040      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e07f      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e073      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e06b      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4936      	ldr	r1, [pc, #216]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f902 	bl	80010c0 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff f8fe 	bl	80010c0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e053      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d210      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 020f 	bic.w	r2, r3, #15
 8001efe:	4922      	ldr	r1, [pc, #136]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e032      	b.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d008      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4916      	ldr	r1, [pc, #88]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d009      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	490e      	ldr	r1, [pc, #56]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f56:	f000 f821 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	490a      	ldr	r1, [pc, #40]	; (8001f90 <HAL_RCC_ClockConfig+0x1cc>)
 8001f68:	5ccb      	ldrb	r3, [r1, r3]
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1d0>)
 8001f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x1d4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f85e 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023c00 	.word	0x40023c00
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	08007dec 	.word	0x08007dec
 8001f94:	20000004 	.word	0x20000004
 8001f98:	20000008 	.word	0x20000008

08001f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa0:	b090      	sub	sp, #64	; 0x40
 8001fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa8:	2300      	movs	r3, #0
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fac:	2300      	movs	r3, #0
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d00d      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x40>
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	f200 80a1 	bhi.w	8002108 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fce:	e09b      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b53      	ldr	r3, [pc, #332]	; (8002120 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fd4:	e09b      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fd6:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8001fd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fda:	e098      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fe6:	4b4d      	ldr	r3, [pc, #308]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d028      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff2:	4b4a      	ldr	r3, [pc, #296]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	627a      	str	r2, [r7, #36]	; 0x24
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002004:	2100      	movs	r1, #0
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8002008:	fb03 f201 	mul.w	r2, r3, r1
 800200c:	2300      	movs	r3, #0
 800200e:	fb00 f303 	mul.w	r3, r0, r3
 8002012:	4413      	add	r3, r2
 8002014:	4a43      	ldr	r2, [pc, #268]	; (8002124 <HAL_RCC_GetSysClockFreq+0x188>)
 8002016:	fba0 1202 	umull	r1, r2, r0, r2
 800201a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800201c:	460a      	mov	r2, r1
 800201e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002022:	4413      	add	r3, r2
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002028:	2200      	movs	r2, #0
 800202a:	61bb      	str	r3, [r7, #24]
 800202c:	61fa      	str	r2, [r7, #28]
 800202e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002032:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002036:	f7fe f953 	bl	80002e0 <__aeabi_uldivmod>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4613      	mov	r3, r2
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002042:	e053      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002044:	4b35      	ldr	r3, [pc, #212]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	2200      	movs	r2, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	617a      	str	r2, [r7, #20]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002056:	f04f 0b00 	mov.w	fp, #0
 800205a:	4652      	mov	r2, sl
 800205c:	465b      	mov	r3, fp
 800205e:	f04f 0000 	mov.w	r0, #0
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	0159      	lsls	r1, r3, #5
 8002068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800206c:	0150      	lsls	r0, r2, #5
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	ebb2 080a 	subs.w	r8, r2, sl
 8002076:	eb63 090b 	sbc.w	r9, r3, fp
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002086:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800208a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800208e:	ebb2 0408 	subs.w	r4, r2, r8
 8002092:	eb63 0509 	sbc.w	r5, r3, r9
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	00eb      	lsls	r3, r5, #3
 80020a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020a4:	00e2      	lsls	r2, r4, #3
 80020a6:	4614      	mov	r4, r2
 80020a8:	461d      	mov	r5, r3
 80020aa:	eb14 030a 	adds.w	r3, r4, sl
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	eb45 030b 	adc.w	r3, r5, fp
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020c2:	4629      	mov	r1, r5
 80020c4:	028b      	lsls	r3, r1, #10
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020cc:	4621      	mov	r1, r4
 80020ce:	028a      	lsls	r2, r1, #10
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d6:	2200      	movs	r2, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	60fa      	str	r2, [r7, #12]
 80020dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e0:	f7fe f8fe 	bl	80002e0 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4613      	mov	r3, r2
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_GetSysClockFreq+0x180>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	3301      	adds	r3, #1
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80020fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetSysClockFreq+0x184>)
 800210a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002110:	4618      	mov	r0, r3
 8002112:	3740      	adds	r7, #64	; 0x40
 8002114:	46bd      	mov	sp, r7
 8002116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	00f42400 	.word	0x00f42400
 8002124:	017d7840 	.word	0x017d7840

08002128 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_RCC_GetHCLKFreq+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002144:	f7ff fff0 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	0a9b      	lsrs	r3, r3, #10
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	08007dfc 	.word	0x08007dfc

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff ffdc 	bl	8002128 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0b5b      	lsrs	r3, r3, #13
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	08007dfc 	.word	0x08007dfc

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d012      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021b8:	4b69      	ldr	r3, [pc, #420]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a68      	ldr	r2, [pc, #416]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021c2:	6093      	str	r3, [r2, #8]
 80021c4:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	4964      	ldr	r1, [pc, #400]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80021da:	2301      	movs	r3, #1
 80021dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d017      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ea:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f8:	4959      	ldr	r1, [pc, #356]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002216:	2301      	movs	r3, #1
 8002218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002226:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	494a      	ldr	r1, [pc, #296]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002244:	d101      	bne.n	800224a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002246:	2301      	movs	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002252:	2301      	movs	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002262:	2301      	movs	r3, #1
 8002264:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 808b 	beq.w	800238a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a39      	ldr	r2, [pc, #228]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b37      	ldr	r3, [pc, #220]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a34      	ldr	r2, [pc, #208]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002298:	f7fe ff12 	bl	80010c0 <HAL_GetTick>
 800229c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe ff0e 	bl	80010c0 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e38f      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d035      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d02e      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002304:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d114      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe fed6 	bl	80010c0 <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe fed2 	bl	80010c0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e351      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0ee      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002346:	d111      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002356:	400b      	ands	r3, r1
 8002358:	4901      	ldr	r1, [pc, #4]	; (8002360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
 800235e:	e00b      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000
 8002368:	0ffffcff 	.word	0x0ffffcff
 800236c:	4bac      	ldr	r3, [pc, #688]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4aab      	ldr	r2, [pc, #684]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002372:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002376:	6093      	str	r3, [r2, #8]
 8002378:	4ba9      	ldr	r3, [pc, #676]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002384:	49a6      	ldr	r1, [pc, #664]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002386:	4313      	orrs	r3, r2
 8002388:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002396:	4ba2      	ldr	r3, [pc, #648]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800239c:	4aa0      	ldr	r2, [pc, #640]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800239e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023a6:	4b9e      	ldr	r3, [pc, #632]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	499b      	ldr	r1, [pc, #620]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c4:	4b96      	ldr	r3, [pc, #600]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023d2:	4993      	ldr	r1, [pc, #588]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023e6:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023f4:	498a      	ldr	r1, [pc, #552]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002408:	4b85      	ldr	r3, [pc, #532]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002416:	4982      	ldr	r1, [pc, #520]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00a      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800242a:	4b7d      	ldr	r3, [pc, #500]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4979      	ldr	r1, [pc, #484]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244c:	4b74      	ldr	r3, [pc, #464]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4971      	ldr	r1, [pc, #452]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800246e:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f023 020c 	bic.w	r2, r3, #12
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800247c:	4968      	ldr	r1, [pc, #416]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002490:	4b63      	ldr	r3, [pc, #396]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	4960      	ldr	r1, [pc, #384]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b2:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c0:	4957      	ldr	r1, [pc, #348]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d4:	4b52      	ldr	r3, [pc, #328]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	494f      	ldr	r1, [pc, #316]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024f6:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002504:	4946      	ldr	r1, [pc, #280]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002518:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	493e      	ldr	r1, [pc, #248]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002548:	4935      	ldr	r1, [pc, #212]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800256a:	492d      	ldr	r1, [pc, #180]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d011      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800257e:	4b28      	ldr	r3, [pc, #160]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800258c:	4924      	ldr	r1, [pc, #144]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800259c:	d101      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025cc:	4914      	ldr	r1, [pc, #80]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f0:	490b      	ldr	r1, [pc, #44]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002614:	4902      	ldr	r1, [pc, #8]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800261c:	e002      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002630:	4b8a      	ldr	r3, [pc, #552]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002636:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	4986      	ldr	r1, [pc, #536]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002654:	4b81      	ldr	r3, [pc, #516]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800265a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002664:	497d      	ldr	r1, [pc, #500]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d006      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80d6 	beq.w	800282c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002680:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800268a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7fe fd18 	bl	80010c0 <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002694:	f7fe fd14 	bl	80010c0 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e195      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026a6:	4b6d      	ldr	r3, [pc, #436]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d021      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d11d      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026c6:	4b65      	ldr	r3, [pc, #404]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026d4:	4b61      	ldr	r3, [pc, #388]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026da:	0e1b      	lsrs	r3, r3, #24
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	019a      	lsls	r2, r3, #6
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	041b      	lsls	r3, r3, #16
 80026ec:	431a      	orrs	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	4958      	ldr	r1, [pc, #352]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02e      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272c:	d129      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800272e:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800273c:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800273e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002742:	0f1b      	lsrs	r3, r3, #28
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	019a      	lsls	r2, r3, #6
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	431a      	orrs	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	071b      	lsls	r3, r3, #28
 8002762:	493e      	ldr	r1, [pc, #248]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800276c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002770:	f023 021f 	bic.w	r2, r3, #31
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	3b01      	subs	r3, #1
 800277a:	4938      	ldr	r1, [pc, #224]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01d      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002794:	0e1b      	lsrs	r3, r3, #24
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800279c:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a2:	0f1b      	lsrs	r3, r3, #28
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	019a      	lsls	r2, r3, #6
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	061b      	lsls	r3, r3, #24
 80027bc:	431a      	orrs	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	071b      	lsls	r3, r3, #28
 80027c2:	4926      	ldr	r1, [pc, #152]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d011      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	019a      	lsls	r2, r3, #6
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	071b      	lsls	r3, r3, #28
 80027f2:	491a      	ldr	r1, [pc, #104]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002806:	f7fe fc5b 	bl	80010c0 <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800280e:	f7fe fc57 	bl	80010c0 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0d8      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 80ce 	bne.w	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a08      	ldr	r2, [pc, #32]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002840:	f7fe fc3e 	bl	80010c0 <HAL_GetTick>
 8002844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002846:	e00b      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002848:	f7fe fc3a 	bl	80010c0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d904      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e0bb      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002860:	4b5e      	ldr	r3, [pc, #376]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800286c:	d0ec      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800288a:	2b00      	cmp	r3, #0
 800288c:	d02e      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d12a      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002896:	4b51      	ldr	r3, [pc, #324]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028a4:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	0f1b      	lsrs	r3, r3, #28
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	019a      	lsls	r2, r3, #6
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	041b      	lsls	r3, r3, #16
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	061b      	lsls	r3, r3, #24
 80028c4:	431a      	orrs	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	071b      	lsls	r3, r3, #28
 80028ca:	4944      	ldr	r1, [pc, #272]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028d2:	4b42      	ldr	r3, [pc, #264]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	493d      	ldr	r1, [pc, #244]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d022      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002900:	d11d      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002902:	4b36      	ldr	r3, [pc, #216]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	0e1b      	lsrs	r3, r3, #24
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002910:	4b32      	ldr	r3, [pc, #200]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	0f1b      	lsrs	r3, r3, #28
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	431a      	orrs	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	061b      	lsls	r3, r3, #24
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	4929      	ldr	r1, [pc, #164]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	0e1b      	lsrs	r3, r3, #24
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002958:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	0c1b      	lsrs	r3, r3, #16
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	019a      	lsls	r2, r3, #6
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	4917      	ldr	r1, [pc, #92]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	4911      	ldr	r1, [pc, #68]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe fb8a 	bl	80010c0 <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029b0:	f7fe fb86 	bl	80010c0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e007      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ce:	d1ef      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e040      	b.n	8002a74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fe fa04 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fe42 	bl	80036b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fbdb 	bl	80031e8 <UART_SetConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e01b      	b.n	8002a74 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fec1 	bl	80037f4 <UART_CheckIdleState>
 8002a72:	4603      	mov	r3, r0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d177      	bne.n	8002b84 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_UART_Transmit+0x24>
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e070      	b.n	8002b86 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2221      	movs	r2, #33	; 0x21
 8002ab0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe fb05 	bl	80010c0 <HAL_GetTick>
 8002ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	88fa      	ldrh	r2, [r7, #6]
 8002abc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	88fa      	ldrh	r2, [r7, #6]
 8002ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_UART_Transmit+0x68>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e003      	b.n	8002aec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002aec:	e02f      	b.n	8002b4e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 ff23 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e03b      	b.n	8002b86 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	3302      	adds	r3, #2
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	e007      	b.n	8002b3c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1c9      	bne.n	8002aee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2140      	movs	r1, #64	; 0x40
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 feed 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d004      	beq.n	8002b7a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e005      	b.n	8002b86 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3720      	adds	r7, #32
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0ba      	sub	sp, #232	; 0xe8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002bba:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d115      	bne.n	8002bf8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00f      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 82c6 	beq.w	800317a <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
      }
      return;
 8002bf6:	e2c0      	b.n	800317a <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8117 	beq.w	8002e30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c12:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <HAL_UART_IRQHandler+0x298>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 810a 	beq.w	8002e30 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d011      	beq.n	8002c4c <HAL_UART_IRQHandler+0xbc>
 8002c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d011      	beq.n	8002c7c <HAL_UART_IRQHandler+0xec>
 8002c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c72:	f043 0204 	orr.w	r2, r3, #4
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d011      	beq.n	8002cac <HAL_UART_IRQHandler+0x11c>
 8002c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cde:	f043 0208 	orr.w	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d012      	beq.n	8002d1a <HAL_UART_IRQHandler+0x18a>
 8002cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00c      	beq.n	8002d1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 822c 	beq.w	800317e <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d005      	beq.n	8002d72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d04f      	beq.n	8002e12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fe53 	bl	8003a1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d141      	bne.n	8002e0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3308      	adds	r3, #8
 8002dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002db2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1d9      	bne.n	8002d86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d013      	beq.n	8002e02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dde:	4a13      	ldr	r2, [pc, #76]	; (8002e2c <HAL_UART_IRQHandler+0x29c>)
 8002de0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fb70 	bl	80014cc <HAL_DMA_Abort_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d017      	beq.n	8002e22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	e00f      	b.n	8002e22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f9d0 	bl	80031a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	e00b      	b.n	8002e22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f9cc 	bl	80031a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e007      	b.n	8002e22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f9c8 	bl	80031a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002e20:	e1ad      	b.n	800317e <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e22:	bf00      	nop
    return;
 8002e24:	e1ab      	b.n	800317e <HAL_UART_IRQHandler+0x5ee>
 8002e26:	bf00      	nop
 8002e28:	04000120 	.word	0x04000120
 8002e2c:	08003ae7 	.word	0x08003ae7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	f040 8166 	bne.w	8003106 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 815f 	beq.w	8003106 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8158 	beq.w	8003106 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e68:	2b40      	cmp	r3, #64	; 0x40
 8002e6a:	f040 80d0 	bne.w	800300e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80ab 	beq.w	8002fda <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	f080 80a3 	bcs.w	8002fda <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea8:	f000 8086 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eb8:	e853 3f00 	ldrex	r3, [r3]
 8002ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1da      	bne.n	8002eac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3308      	adds	r3, #8
 8002efc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3308      	adds	r3, #8
 8002f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e1      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3308      	adds	r3, #8
 8002f38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3308      	adds	r3, #8
 8002f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e3      	bne.n	8002f32 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	f023 0310 	bic.w	r3, r3, #16
 8002f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461a      	mov	r2, r3
 8002f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e4      	bne.n	8002f78 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fa1a 	bl	80013ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8f2 	bl	80031bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002fd8:	e0d3      	b.n	8003182 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002fe0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	f040 80cc 	bne.w	8003182 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff4:	f040 80c5 	bne.w	8003182 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8d8 	bl	80031bc <HAL_UARTEx_RxEventCallback>
      return;
 800300c:	e0b9      	b.n	8003182 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800301a:	b29b      	uxth	r3, r3
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80ab 	beq.w	8003186 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8003030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a6 	beq.w	8003186 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800304e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
 800305e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003062:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e4      	bne.n	800303a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3308      	adds	r3, #8
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	623b      	str	r3, [r7, #32]
   return(result);
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3308      	adds	r3, #8
 8003090:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003094:	633a      	str	r2, [r7, #48]	; 0x30
 8003096:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800309a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e3      	bne.n	8003070 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	e853 3f00 	ldrex	r3, [r3]
 80030c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f023 0310 	bic.w	r3, r3, #16
 80030d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e2:	69b9      	ldr	r1, [r7, #24]
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	617b      	str	r3, [r7, #20]
   return(result);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1e4      	bne.n	80030bc <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f85c 	bl	80031bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003104:	e03f      	b.n	8003186 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00e      	beq.n	8003130 <HAL_UART_IRQHandler+0x5a0>
 8003112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003126:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f853 	bl	80031d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800312e:	e02d      	b.n	800318c <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01c      	beq.n	800318a <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
    }
    return;
 8003158:	e017      	b.n	800318a <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d012      	beq.n	800318c <HAL_UART_IRQHandler+0x5fc>
 8003166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fcc9 	bl	8003b0a <UART_EndTransmit_IT>
    return;
 8003178:	e008      	b.n	800318c <HAL_UART_IRQHandler+0x5fc>
      return;
 800317a:	bf00      	nop
 800317c:	e006      	b.n	800318c <HAL_UART_IRQHandler+0x5fc>
    return;
 800317e:	bf00      	nop
 8003180:	e004      	b.n	800318c <HAL_UART_IRQHandler+0x5fc>
      return;
 8003182:	bf00      	nop
 8003184:	e002      	b.n	800318c <HAL_UART_IRQHandler+0x5fc>
      return;
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <HAL_UART_IRQHandler+0x5fc>
    return;
 800318a:	bf00      	nop
  }

}
 800318c:	37e8      	adds	r7, #232	; 0xe8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop

08003194 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4ba6      	ldr	r3, [pc, #664]	; (80034ac <UART_SetConfig+0x2c4>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	6979      	ldr	r1, [r7, #20]
 800321c:	430b      	orrs	r3, r1
 800321e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a94      	ldr	r2, [pc, #592]	; (80034b0 <UART_SetConfig+0x2c8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d120      	bne.n	80032a6 <UART_SetConfig+0xbe>
 8003264:	4b93      	ldr	r3, [pc, #588]	; (80034b4 <UART_SetConfig+0x2cc>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	2b03      	cmp	r3, #3
 8003270:	d816      	bhi.n	80032a0 <UART_SetConfig+0xb8>
 8003272:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <UART_SetConfig+0x90>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	08003289 	.word	0x08003289
 800327c:	08003295 	.word	0x08003295
 8003280:	0800328f 	.word	0x0800328f
 8003284:	0800329b 	.word	0x0800329b
 8003288:	2301      	movs	r3, #1
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e150      	b.n	8003530 <UART_SetConfig+0x348>
 800328e:	2302      	movs	r3, #2
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e14d      	b.n	8003530 <UART_SetConfig+0x348>
 8003294:	2304      	movs	r3, #4
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e14a      	b.n	8003530 <UART_SetConfig+0x348>
 800329a:	2308      	movs	r3, #8
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e147      	b.n	8003530 <UART_SetConfig+0x348>
 80032a0:	2310      	movs	r3, #16
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e144      	b.n	8003530 <UART_SetConfig+0x348>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a83      	ldr	r2, [pc, #524]	; (80034b8 <UART_SetConfig+0x2d0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d132      	bne.n	8003316 <UART_SetConfig+0x12e>
 80032b0:	4b80      	ldr	r3, [pc, #512]	; (80034b4 <UART_SetConfig+0x2cc>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b0c      	cmp	r3, #12
 80032bc:	d828      	bhi.n	8003310 <UART_SetConfig+0x128>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0xdc>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	08003311 	.word	0x08003311
 80032cc:	08003311 	.word	0x08003311
 80032d0:	08003311 	.word	0x08003311
 80032d4:	08003305 	.word	0x08003305
 80032d8:	08003311 	.word	0x08003311
 80032dc:	08003311 	.word	0x08003311
 80032e0:	08003311 	.word	0x08003311
 80032e4:	080032ff 	.word	0x080032ff
 80032e8:	08003311 	.word	0x08003311
 80032ec:	08003311 	.word	0x08003311
 80032f0:	08003311 	.word	0x08003311
 80032f4:	0800330b 	.word	0x0800330b
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e118      	b.n	8003530 <UART_SetConfig+0x348>
 80032fe:	2302      	movs	r3, #2
 8003300:	77fb      	strb	r3, [r7, #31]
 8003302:	e115      	b.n	8003530 <UART_SetConfig+0x348>
 8003304:	2304      	movs	r3, #4
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e112      	b.n	8003530 <UART_SetConfig+0x348>
 800330a:	2308      	movs	r3, #8
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e10f      	b.n	8003530 <UART_SetConfig+0x348>
 8003310:	2310      	movs	r3, #16
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e10c      	b.n	8003530 <UART_SetConfig+0x348>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a68      	ldr	r2, [pc, #416]	; (80034bc <UART_SetConfig+0x2d4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d120      	bne.n	8003362 <UART_SetConfig+0x17a>
 8003320:	4b64      	ldr	r3, [pc, #400]	; (80034b4 <UART_SetConfig+0x2cc>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800332a:	2b30      	cmp	r3, #48	; 0x30
 800332c:	d013      	beq.n	8003356 <UART_SetConfig+0x16e>
 800332e:	2b30      	cmp	r3, #48	; 0x30
 8003330:	d814      	bhi.n	800335c <UART_SetConfig+0x174>
 8003332:	2b20      	cmp	r3, #32
 8003334:	d009      	beq.n	800334a <UART_SetConfig+0x162>
 8003336:	2b20      	cmp	r3, #32
 8003338:	d810      	bhi.n	800335c <UART_SetConfig+0x174>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <UART_SetConfig+0x15c>
 800333e:	2b10      	cmp	r3, #16
 8003340:	d006      	beq.n	8003350 <UART_SetConfig+0x168>
 8003342:	e00b      	b.n	800335c <UART_SetConfig+0x174>
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e0f2      	b.n	8003530 <UART_SetConfig+0x348>
 800334a:	2302      	movs	r3, #2
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e0ef      	b.n	8003530 <UART_SetConfig+0x348>
 8003350:	2304      	movs	r3, #4
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	e0ec      	b.n	8003530 <UART_SetConfig+0x348>
 8003356:	2308      	movs	r3, #8
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e0e9      	b.n	8003530 <UART_SetConfig+0x348>
 800335c:	2310      	movs	r3, #16
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e0e6      	b.n	8003530 <UART_SetConfig+0x348>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a56      	ldr	r2, [pc, #344]	; (80034c0 <UART_SetConfig+0x2d8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d120      	bne.n	80033ae <UART_SetConfig+0x1c6>
 800336c:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <UART_SetConfig+0x2cc>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003376:	2bc0      	cmp	r3, #192	; 0xc0
 8003378:	d013      	beq.n	80033a2 <UART_SetConfig+0x1ba>
 800337a:	2bc0      	cmp	r3, #192	; 0xc0
 800337c:	d814      	bhi.n	80033a8 <UART_SetConfig+0x1c0>
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d009      	beq.n	8003396 <UART_SetConfig+0x1ae>
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d810      	bhi.n	80033a8 <UART_SetConfig+0x1c0>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <UART_SetConfig+0x1a8>
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d006      	beq.n	800339c <UART_SetConfig+0x1b4>
 800338e:	e00b      	b.n	80033a8 <UART_SetConfig+0x1c0>
 8003390:	2300      	movs	r3, #0
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e0cc      	b.n	8003530 <UART_SetConfig+0x348>
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e0c9      	b.n	8003530 <UART_SetConfig+0x348>
 800339c:	2304      	movs	r3, #4
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e0c6      	b.n	8003530 <UART_SetConfig+0x348>
 80033a2:	2308      	movs	r3, #8
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e0c3      	b.n	8003530 <UART_SetConfig+0x348>
 80033a8:	2310      	movs	r3, #16
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e0c0      	b.n	8003530 <UART_SetConfig+0x348>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a44      	ldr	r2, [pc, #272]	; (80034c4 <UART_SetConfig+0x2dc>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d125      	bne.n	8003404 <UART_SetConfig+0x21c>
 80033b8:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <UART_SetConfig+0x2cc>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033c6:	d017      	beq.n	80033f8 <UART_SetConfig+0x210>
 80033c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033cc:	d817      	bhi.n	80033fe <UART_SetConfig+0x216>
 80033ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d2:	d00b      	beq.n	80033ec <UART_SetConfig+0x204>
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d8:	d811      	bhi.n	80033fe <UART_SetConfig+0x216>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <UART_SetConfig+0x1fe>
 80033de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e2:	d006      	beq.n	80033f2 <UART_SetConfig+0x20a>
 80033e4:	e00b      	b.n	80033fe <UART_SetConfig+0x216>
 80033e6:	2300      	movs	r3, #0
 80033e8:	77fb      	strb	r3, [r7, #31]
 80033ea:	e0a1      	b.n	8003530 <UART_SetConfig+0x348>
 80033ec:	2302      	movs	r3, #2
 80033ee:	77fb      	strb	r3, [r7, #31]
 80033f0:	e09e      	b.n	8003530 <UART_SetConfig+0x348>
 80033f2:	2304      	movs	r3, #4
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e09b      	b.n	8003530 <UART_SetConfig+0x348>
 80033f8:	2308      	movs	r3, #8
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e098      	b.n	8003530 <UART_SetConfig+0x348>
 80033fe:	2310      	movs	r3, #16
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e095      	b.n	8003530 <UART_SetConfig+0x348>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <UART_SetConfig+0x2e0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d125      	bne.n	800345a <UART_SetConfig+0x272>
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <UART_SetConfig+0x2cc>)
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800341c:	d017      	beq.n	800344e <UART_SetConfig+0x266>
 800341e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003422:	d817      	bhi.n	8003454 <UART_SetConfig+0x26c>
 8003424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003428:	d00b      	beq.n	8003442 <UART_SetConfig+0x25a>
 800342a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342e:	d811      	bhi.n	8003454 <UART_SetConfig+0x26c>
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <UART_SetConfig+0x254>
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d006      	beq.n	8003448 <UART_SetConfig+0x260>
 800343a:	e00b      	b.n	8003454 <UART_SetConfig+0x26c>
 800343c:	2301      	movs	r3, #1
 800343e:	77fb      	strb	r3, [r7, #31]
 8003440:	e076      	b.n	8003530 <UART_SetConfig+0x348>
 8003442:	2302      	movs	r3, #2
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e073      	b.n	8003530 <UART_SetConfig+0x348>
 8003448:	2304      	movs	r3, #4
 800344a:	77fb      	strb	r3, [r7, #31]
 800344c:	e070      	b.n	8003530 <UART_SetConfig+0x348>
 800344e:	2308      	movs	r3, #8
 8003450:	77fb      	strb	r3, [r7, #31]
 8003452:	e06d      	b.n	8003530 <UART_SetConfig+0x348>
 8003454:	2310      	movs	r3, #16
 8003456:	77fb      	strb	r3, [r7, #31]
 8003458:	e06a      	b.n	8003530 <UART_SetConfig+0x348>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <UART_SetConfig+0x2e4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d138      	bne.n	80034d6 <UART_SetConfig+0x2ee>
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <UART_SetConfig+0x2cc>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800346e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003472:	d017      	beq.n	80034a4 <UART_SetConfig+0x2bc>
 8003474:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003478:	d82a      	bhi.n	80034d0 <UART_SetConfig+0x2e8>
 800347a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347e:	d00b      	beq.n	8003498 <UART_SetConfig+0x2b0>
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003484:	d824      	bhi.n	80034d0 <UART_SetConfig+0x2e8>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <UART_SetConfig+0x2aa>
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d006      	beq.n	800349e <UART_SetConfig+0x2b6>
 8003490:	e01e      	b.n	80034d0 <UART_SetConfig+0x2e8>
 8003492:	2300      	movs	r3, #0
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	e04b      	b.n	8003530 <UART_SetConfig+0x348>
 8003498:	2302      	movs	r3, #2
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e048      	b.n	8003530 <UART_SetConfig+0x348>
 800349e:	2304      	movs	r3, #4
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e045      	b.n	8003530 <UART_SetConfig+0x348>
 80034a4:	2308      	movs	r3, #8
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e042      	b.n	8003530 <UART_SetConfig+0x348>
 80034aa:	bf00      	nop
 80034ac:	efff69f3 	.word	0xefff69f3
 80034b0:	40011000 	.word	0x40011000
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40004400 	.word	0x40004400
 80034bc:	40004800 	.word	0x40004800
 80034c0:	40004c00 	.word	0x40004c00
 80034c4:	40005000 	.word	0x40005000
 80034c8:	40011400 	.word	0x40011400
 80034cc:	40007800 	.word	0x40007800
 80034d0:	2310      	movs	r3, #16
 80034d2:	77fb      	strb	r3, [r7, #31]
 80034d4:	e02c      	b.n	8003530 <UART_SetConfig+0x348>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a72      	ldr	r2, [pc, #456]	; (80036a4 <UART_SetConfig+0x4bc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d125      	bne.n	800352c <UART_SetConfig+0x344>
 80034e0:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <UART_SetConfig+0x4c0>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034ee:	d017      	beq.n	8003520 <UART_SetConfig+0x338>
 80034f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034f4:	d817      	bhi.n	8003526 <UART_SetConfig+0x33e>
 80034f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034fa:	d00b      	beq.n	8003514 <UART_SetConfig+0x32c>
 80034fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003500:	d811      	bhi.n	8003526 <UART_SetConfig+0x33e>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <UART_SetConfig+0x326>
 8003506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800350a:	d006      	beq.n	800351a <UART_SetConfig+0x332>
 800350c:	e00b      	b.n	8003526 <UART_SetConfig+0x33e>
 800350e:	2300      	movs	r3, #0
 8003510:	77fb      	strb	r3, [r7, #31]
 8003512:	e00d      	b.n	8003530 <UART_SetConfig+0x348>
 8003514:	2302      	movs	r3, #2
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e00a      	b.n	8003530 <UART_SetConfig+0x348>
 800351a:	2304      	movs	r3, #4
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e007      	b.n	8003530 <UART_SetConfig+0x348>
 8003520:	2308      	movs	r3, #8
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e004      	b.n	8003530 <UART_SetConfig+0x348>
 8003526:	2310      	movs	r3, #16
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e001      	b.n	8003530 <UART_SetConfig+0x348>
 800352c:	2310      	movs	r3, #16
 800352e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003538:	d15b      	bne.n	80035f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800353a:	7ffb      	ldrb	r3, [r7, #31]
 800353c:	2b08      	cmp	r3, #8
 800353e:	d828      	bhi.n	8003592 <UART_SetConfig+0x3aa>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <UART_SetConfig+0x360>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	0800356d 	.word	0x0800356d
 800354c:	08003575 	.word	0x08003575
 8003550:	0800357d 	.word	0x0800357d
 8003554:	08003593 	.word	0x08003593
 8003558:	08003583 	.word	0x08003583
 800355c:	08003593 	.word	0x08003593
 8003560:	08003593 	.word	0x08003593
 8003564:	08003593 	.word	0x08003593
 8003568:	0800358b 	.word	0x0800358b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800356c:	f7fe fde8 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8003570:	61b8      	str	r0, [r7, #24]
        break;
 8003572:	e013      	b.n	800359c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003574:	f7fe fdf8 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003578:	61b8      	str	r0, [r7, #24]
        break;
 800357a:	e00f      	b.n	800359c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800357c:	4b4b      	ldr	r3, [pc, #300]	; (80036ac <UART_SetConfig+0x4c4>)
 800357e:	61bb      	str	r3, [r7, #24]
        break;
 8003580:	e00c      	b.n	800359c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003582:	f7fe fd0b 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8003586:	61b8      	str	r0, [r7, #24]
        break;
 8003588:	e008      	b.n	800359c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800358a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358e:	61bb      	str	r3, [r7, #24]
        break;
 8003590:	e004      	b.n	800359c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	77bb      	strb	r3, [r7, #30]
        break;
 800359a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d074      	beq.n	800368c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	005a      	lsls	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	085b      	lsrs	r3, r3, #1
 80035ac:	441a      	add	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	d916      	bls.n	80035ec <UART_SetConfig+0x404>
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d212      	bcs.n	80035ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f023 030f 	bic.w	r3, r3, #15
 80035ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	b29a      	uxth	r2, r3
 80035dc:	89fb      	ldrh	r3, [r7, #14]
 80035de:	4313      	orrs	r3, r2
 80035e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	89fa      	ldrh	r2, [r7, #14]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	e04f      	b.n	800368c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	77bb      	strb	r3, [r7, #30]
 80035f0:	e04c      	b.n	800368c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035f2:	7ffb      	ldrb	r3, [r7, #31]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d828      	bhi.n	800364a <UART_SetConfig+0x462>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <UART_SetConfig+0x418>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003625 	.word	0x08003625
 8003604:	0800362d 	.word	0x0800362d
 8003608:	08003635 	.word	0x08003635
 800360c:	0800364b 	.word	0x0800364b
 8003610:	0800363b 	.word	0x0800363b
 8003614:	0800364b 	.word	0x0800364b
 8003618:	0800364b 	.word	0x0800364b
 800361c:	0800364b 	.word	0x0800364b
 8003620:	08003643 	.word	0x08003643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003624:	f7fe fd8c 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8003628:	61b8      	str	r0, [r7, #24]
        break;
 800362a:	e013      	b.n	8003654 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800362c:	f7fe fd9c 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 8003630:	61b8      	str	r0, [r7, #24]
        break;
 8003632:	e00f      	b.n	8003654 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <UART_SetConfig+0x4c4>)
 8003636:	61bb      	str	r3, [r7, #24]
        break;
 8003638:	e00c      	b.n	8003654 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363a:	f7fe fcaf 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 800363e:	61b8      	str	r0, [r7, #24]
        break;
 8003640:	e008      	b.n	8003654 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003646:	61bb      	str	r3, [r7, #24]
        break;
 8003648:	e004      	b.n	8003654 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	77bb      	strb	r3, [r7, #30]
        break;
 8003652:	bf00      	nop
    }

    if (pclk != 0U)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	085a      	lsrs	r2, r3, #1
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	441a      	add	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b0f      	cmp	r3, #15
 8003672:	d909      	bls.n	8003688 <UART_SetConfig+0x4a0>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367a:	d205      	bcs.n	8003688 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	e001      	b.n	800368c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003698:	7fbb      	ldrb	r3, [r7, #30]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40007c00 	.word	0x40007c00
 80036a8:	40023800 	.word	0x40023800
 80036ac:	00f42400 	.word	0x00f42400

080036b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f003 0308 	and.w	r3, r3, #8
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01a      	beq.n	80037c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ae:	d10a      	bne.n	80037c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	605a      	str	r2, [r3, #4]
  }
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b098      	sub	sp, #96	; 0x60
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003804:	f7fd fc5c 	bl	80010c0 <HAL_GetTick>
 8003808:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b08      	cmp	r3, #8
 8003816:	d12e      	bne.n	8003876 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003820:	2200      	movs	r2, #0
 8003822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f88c 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d021      	beq.n	8003876 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003846:	653b      	str	r3, [r7, #80]	; 0x50
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003850:	647b      	str	r3, [r7, #68]	; 0x44
 8003852:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e6      	bne.n	8003832 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e062      	b.n	800393c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d149      	bne.n	8003918 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800388c:	2200      	movs	r2, #0
 800388e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f856 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d03c      	beq.n	8003918 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	623b      	str	r3, [r7, #32]
   return(result);
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
 80038be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e6      	bne.n	800389e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3308      	adds	r3, #8
 80038d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f0:	61fa      	str	r2, [r7, #28]
 80038f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	69b9      	ldr	r1, [r7, #24]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	617b      	str	r3, [r7, #20]
   return(result);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e5      	bne.n	80038d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e011      	b.n	800393c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3758      	adds	r7, #88	; 0x58
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	e04f      	b.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d04b      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fd fbaf 	bl	80010c0 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <UART_WaitOnFlagUntilTimeout+0x30>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e04e      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d037      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b80      	cmp	r3, #128	; 0x80
 800398a:	d034      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d031      	beq.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d110      	bne.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2208      	movs	r2, #8
 80039a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f838 	bl	8003a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2208      	movs	r2, #8
 80039b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e029      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d0:	d111      	bne.n	80039f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f81e 	bl	8003a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e00f      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d0a0      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b095      	sub	sp, #84	; 0x54
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a44:	643b      	str	r3, [r7, #64]	; 0x40
 8003a46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e6      	bne.n	8003a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3308      	adds	r3, #8
 8003a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e5      	bne.n	8003a58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d118      	bne.n	8003ac6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f023 0310 	bic.w	r3, r3, #16
 8003aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6979      	ldr	r1, [r7, #20]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e6      	bne.n	8003a94 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ada:	bf00      	nop
 8003adc:	3754      	adds	r7, #84	; 0x54
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff fb53 	bl	80031a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b088      	sub	sp, #32
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	61bb      	str	r3, [r7, #24]
 8003b32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6979      	ldr	r1, [r7, #20]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e6      	bne.n	8003b12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fb1f 	bl	8003194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b56:	bf00      	nop
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b72:	f3ef 8305 	mrs	r3, IPSR
 8003b76:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b82:	607b      	str	r3, [r7, #4]
  return(result);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d105      	bne.n	8003b96 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <osKernelInitialize+0x3a>
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <osKernelInitialize+0x64>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d103      	bne.n	8003ba6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003b9e:	f06f 0305 	mvn.w	r3, #5
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e00c      	b.n	8003bc0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <osKernelInitialize+0x64>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d105      	bne.n	8003bba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <osKernelInitialize+0x64>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e002      	b.n	8003bc0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	200001b0 	.word	0x200001b0

08003bd4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bda:	f3ef 8305 	mrs	r3, IPSR
 8003bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10f      	bne.n	8003c06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	607b      	str	r3, [r7, #4]
  return(result);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8003bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <osKernelStart+0x3a>
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <osKernelStart+0x68>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d103      	bne.n	8003c0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003c06:	f06f 0305 	mvn.w	r3, #5
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	e010      	b.n	8003c30 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <osKernelStart+0x68>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d109      	bne.n	8003c2a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c16:	f7ff ffa2 	bl	8003b5e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <osKernelStart+0x68>)
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c20:	f001 fc24 	bl	800546c <vTaskStartScheduler>
      stat = osOK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e002      	b.n	8003c30 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200001b0 	.word	0x200001b0

08003c40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b090      	sub	sp, #64	; 0x40
 8003c44:	af04      	add	r7, sp, #16
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c50:	f3ef 8305 	mrs	r3, IPSR
 8003c54:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c56:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 808f 	bne.w	8003d7c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c62:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c6e:	617b      	str	r3, [r7, #20]
  return(result);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <osThreadNew+0x3e>
 8003c76:	4b44      	ldr	r3, [pc, #272]	; (8003d88 <osThreadNew+0x148>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d07e      	beq.n	8003d7c <osThreadNew+0x13c>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d07b      	beq.n	8003d7c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003c88:	2318      	movs	r3, #24
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d045      	beq.n	8003d28 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <osThreadNew+0x6a>
        name = attr->name;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <osThreadNew+0x90>
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	2b38      	cmp	r3, #56	; 0x38
 8003cc2:	d805      	bhi.n	8003cd0 <osThreadNew+0x90>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <osThreadNew+0x94>
        return (NULL);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e054      	b.n	8003d7e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00e      	beq.n	8003d0a <osThreadNew+0xca>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b5b      	cmp	r3, #91	; 0x5b
 8003cf2:	d90a      	bls.n	8003d0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <osThreadNew+0xca>
        mem = 1;
 8003d04:	2301      	movs	r3, #1
 8003d06:	623b      	str	r3, [r7, #32]
 8003d08:	e010      	b.n	8003d2c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10c      	bne.n	8003d2c <osThreadNew+0xec>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d108      	bne.n	8003d2c <osThreadNew+0xec>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <osThreadNew+0xec>
          mem = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
 8003d26:	e001      	b.n	8003d2c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d110      	bne.n	8003d54 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d3a:	9202      	str	r2, [sp, #8]
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f001 f9af 	bl	80050ac <xTaskCreateStatic>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	e013      	b.n	8003d7c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d110      	bne.n	8003d7c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	f107 0310 	add.w	r3, r7, #16
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f001 fa00 	bl	8005172 <xTaskCreate>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d001      	beq.n	8003d7c <osThreadNew+0x13c>
          hTask = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d7c:	693b      	ldr	r3, [r7, #16]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3730      	adds	r7, #48	; 0x30
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200001b0 	.word	0x200001b0

08003d8c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d94:	f3ef 8305 	mrs	r3, IPSR
 8003d98:	613b      	str	r3, [r7, #16]
  return(result);
 8003d9a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10f      	bne.n	8003dc0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da0:	f3ef 8310 	mrs	r3, PRIMASK
 8003da4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dac:	f3ef 8311 	mrs	r3, BASEPRI
 8003db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <osDelay+0x3c>
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <osDelay+0x58>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d103      	bne.n	8003dc8 <osDelay+0x3c>
    stat = osErrorISR;
 8003dc0:	f06f 0305 	mvn.w	r3, #5
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e007      	b.n	8003dd8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f001 fb14 	bl	8005400 <vTaskDelay>
    }
  }

  return (stat);
 8003dd8:	697b      	ldr	r3, [r7, #20]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200001b0 	.word	0x200001b0

08003de8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003df4:	f3ef 8305 	mrs	r3, IPSR
 8003df8:	613b      	str	r3, [r7, #16]
  return(result);
 8003dfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 8085 	bne.w	8003f0c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e02:	f3ef 8310 	mrs	r3, PRIMASK
 8003e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d105      	bne.n	8003e1a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8003e12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <osMutexNew+0x3a>
 8003e1a:	4b3f      	ldr	r3, [pc, #252]	; (8003f18 <osMutexNew+0x130>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d074      	beq.n	8003f0c <osMutexNew+0x124>
    if (attr != NULL) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <osMutexNew+0x48>
      type = attr->attr_bits;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	e001      	b.n	8003e34 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <osMutexNew+0x5c>
      rmtx = 1U;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	e001      	b.n	8003e48 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d15c      	bne.n	8003f0c <osMutexNew+0x124>
      mem = -1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d015      	beq.n	8003e8a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <osMutexNew+0x8c>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b4f      	cmp	r3, #79	; 0x4f
 8003e6c:	d902      	bls.n	8003e74 <osMutexNew+0x8c>
          mem = 1;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	e00c      	b.n	8003e8e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d108      	bne.n	8003e8e <osMutexNew+0xa6>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <osMutexNew+0xa6>
            mem = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	e001      	b.n	8003e8e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d112      	bne.n	8003eba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	2004      	movs	r0, #4
 8003ea2:	f000 fb54 	bl	800454e <xQueueCreateMutexStatic>
 8003ea6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ea8:	e016      	b.n	8003ed8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	f000 fb4c 	bl	800454e <xQueueCreateMutexStatic>
 8003eb6:	6278      	str	r0, [r7, #36]	; 0x24
 8003eb8:	e00e      	b.n	8003ed8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10b      	bne.n	8003ed8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d004      	beq.n	8003ed0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ec6:	2004      	movs	r0, #4
 8003ec8:	f000 fb29 	bl	800451e <xQueueCreateMutex>
 8003ecc:	6278      	str	r0, [r7, #36]	; 0x24
 8003ece:	e003      	b.n	8003ed8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f000 fb24 	bl	800451e <xQueueCreateMutex>
 8003ed6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <osMutexNew+0x110>
        if (attr != NULL) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <osMutexNew+0x104>
          name = attr->name;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e001      	b.n	8003ef0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ef4:	f001 f87c 	bl	8004ff0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <osMutexNew+0x124>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200001b0 	.word	0x200001b0

08003f1c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f3a:	f3ef 8305 	mrs	r3, IPSR
 8003f3e:	613b      	str	r3, [r7, #16]
  return(result);
 8003f40:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f46:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f52:	f3ef 8311 	mrs	r3, BASEPRI
 8003f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <osMutexAcquire+0x52>
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <osMutexAcquire+0xb8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d103      	bne.n	8003f6e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8003f66:	f06f 0305 	mvn.w	r3, #5
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	e02c      	b.n	8003fc8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d103      	bne.n	8003f7c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8003f74:	f06f 0303 	mvn.w	r3, #3
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e025      	b.n	8003fc8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d011      	beq.n	8003fa6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003f82:	6839      	ldr	r1, [r7, #0]
 8003f84:	69b8      	ldr	r0, [r7, #24]
 8003f86:	f000 fb33 	bl	80045f0 <xQueueTakeMutexRecursive>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d01b      	beq.n	8003fc8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8003f96:	f06f 0301 	mvn.w	r3, #1
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	e014      	b.n	8003fc8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003f9e:	f06f 0302 	mvn.w	r3, #2
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	e010      	b.n	8003fc8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003fa6:	6839      	ldr	r1, [r7, #0]
 8003fa8:	69b8      	ldr	r0, [r7, #24]
 8003faa:	f000 fde5 	bl	8004b78 <xQueueSemaphoreTake>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d009      	beq.n	8003fc8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8003fba:	f06f 0301 	mvn.w	r3, #1
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	e002      	b.n	8003fc8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003fc2:	f06f 0302 	mvn.w	r3, #2
 8003fc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	200001b0 	.word	0x200001b0

08003fd8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ff4:	f3ef 8305 	mrs	r3, IPSR
 8003ff8:	613b      	str	r3, [r7, #16]
  return(result);
 8003ffa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10f      	bne.n	8004020 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004000:	f3ef 8310 	mrs	r3, PRIMASK
 8004004:	60fb      	str	r3, [r7, #12]
  return(result);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d105      	bne.n	8004018 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800400c:	f3ef 8311 	mrs	r3, BASEPRI
 8004010:	60bb      	str	r3, [r7, #8]
  return(result);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <osMutexRelease+0x50>
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <osMutexRelease+0x9c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d103      	bne.n	8004028 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004020:	f06f 0305 	mvn.w	r3, #5
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	e01f      	b.n	8004068 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800402e:	f06f 0303 	mvn.w	r3, #3
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	e018      	b.n	8004068 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d009      	beq.n	8004050 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800403c:	69b8      	ldr	r0, [r7, #24]
 800403e:	f000 faa1 	bl	8004584 <xQueueGiveMutexRecursive>
 8004042:	4603      	mov	r3, r0
 8004044:	2b01      	cmp	r3, #1
 8004046:	d00f      	beq.n	8004068 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004048:	f06f 0302 	mvn.w	r3, #2
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	e00b      	b.n	8004068 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004050:	2300      	movs	r3, #0
 8004052:	2200      	movs	r2, #0
 8004054:	2100      	movs	r1, #0
 8004056:	69b8      	ldr	r0, [r7, #24]
 8004058:	f000 fb02 	bl	8004660 <xQueueGenericSend>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d002      	beq.n	8004068 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004062:	f06f 0302 	mvn.w	r3, #2
 8004066:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004068:	69fb      	ldr	r3, [r7, #28]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	200001b0 	.word	0x200001b0

08004078 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004088:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4a06      	ldr	r2, [pc, #24]	; (80040a8 <vApplicationGetIdleTaskMemory+0x30>)
 800408e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	601a      	str	r2, [r3, #0]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	200001b4 	.word	0x200001b4
 80040a8:	20000210 	.word	0x20000210

080040ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80040bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	4a06      	ldr	r2, [pc, #24]	; (80040dc <vApplicationGetTimerTaskMemory+0x30>)
 80040c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ca:	601a      	str	r2, [r3, #0]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	20000410 	.word	0x20000410
 80040dc:	2000046c 	.word	0x2000046c

080040e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f103 0208 	add.w	r2, r3, #8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295
 80040f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f103 0208 	add.w	r2, r3, #8
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f103 0208 	add.w	r2, r3, #8
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	601a      	str	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d103      	bne.n	80041a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	e00c      	b.n	80041bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3308      	adds	r3, #8
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	e002      	b.n	80041b0 <vListInsert+0x2e>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d2f6      	bcs.n	80041aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6892      	ldr	r2, [r2, #8]
 800420a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6852      	ldr	r2, [r2, #4]
 8004214:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	429a      	cmp	r2, r3
 800421e:	d103      	bne.n	8004228 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	1e5a      	subs	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10c      	bne.n	8004276 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	b672      	cpsid	i
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	b662      	cpsie	i
 8004270:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004276:	f002 fbb9 	bl	80069ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	68f9      	ldr	r1, [r7, #12]
 8004284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	441a      	add	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	3b01      	subs	r3, #1
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	441a      	add	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	22ff      	movs	r2, #255	; 0xff
 80042ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	22ff      	movs	r2, #255	; 0xff
 80042c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d114      	bne.n	80042f6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01a      	beq.n	800430a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3310      	adds	r3, #16
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 fb5f 	bl	800599c <xTaskRemoveFromEventList>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <xQueueGenericReset+0xd0>)
 80042e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	e009      	b.n	800430a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3310      	adds	r3, #16
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fef0 	bl	80040e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3324      	adds	r3, #36	; 0x24
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff feeb 	bl	80040e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800430a:	f002 fba3 	bl	8006a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08e      	sub	sp, #56	; 0x38
 8004320:	af02      	add	r7, sp, #8
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10c      	bne.n	800434a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	b672      	cpsid	i
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	b662      	cpsie	i
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10c      	bne.n	800436a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	b672      	cpsid	i
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	b662      	cpsie	i
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <xQueueGenericCreateStatic+0x5a>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <xQueueGenericCreateStatic+0x5e>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <xQueueGenericCreateStatic+0x60>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10c      	bne.n	800439a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	b672      	cpsid	i
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	b662      	cpsie	i
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <xQueueGenericCreateStatic+0x8a>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xQueueGenericCreateStatic+0x8e>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <xQueueGenericCreateStatic+0x90>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10c      	bne.n	80043ca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b4:	b672      	cpsid	i
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	b662      	cpsie	i
 80043c4:	61fb      	str	r3, [r7, #28]
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043ca:	2350      	movs	r3, #80	; 0x50
 80043cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b50      	cmp	r3, #80	; 0x50
 80043d2:	d00c      	beq.n	80043ee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	b672      	cpsid	i
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	b662      	cpsie	i
 80043e8:	61bb      	str	r3, [r7, #24]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004402:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f847 	bl	80044a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004418:	4618      	mov	r0, r3
 800441a:	3730      	adds	r7, #48	; 0x30
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08a      	sub	sp, #40	; 0x28
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <xQueueGenericCreate+0x2e>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	b672      	cpsid	i
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	b662      	cpsie	i
 8004448:	613b      	str	r3, [r7, #16]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	e004      	b.n	8004464 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	3350      	adds	r3, #80	; 0x50
 8004468:	4618      	mov	r0, r3
 800446a:	f002 fbeb 	bl	8006c44 <pvPortMalloc>
 800446e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d011      	beq.n	800449a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3350      	adds	r3, #80	; 0x50
 800447e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004488:	79fa      	ldrb	r2, [r7, #7]
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f805 	bl	80044a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800449a:	69bb      	ldr	r3, [r7, #24]
	}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e002      	b.n	80044c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044d2:	2101      	movs	r1, #1
 80044d4:	69b8      	ldr	r0, [r7, #24]
 80044d6:	f7ff feb7 	bl	8004248 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00e      	beq.n	8004516 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800450a:	2300      	movs	r3, #0
 800450c:	2200      	movs	r2, #0
 800450e:	2100      	movs	r1, #0
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8a5 	bl	8004660 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	4603      	mov	r3, r0
 8004526:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	461a      	mov	r2, r3
 8004534:	6939      	ldr	r1, [r7, #16]
 8004536:	6978      	ldr	r0, [r7, #20]
 8004538:	f7ff ff72 	bl	8004420 <xQueueGenericCreate>
 800453c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff ffd3 	bl	80044ea <prvInitialiseMutex>

		return xNewQueue;
 8004544:	68fb      	ldr	r3, [r7, #12]
	}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800454e:	b580      	push	{r7, lr}
 8004550:	b088      	sub	sp, #32
 8004552:	af02      	add	r7, sp, #8
 8004554:	4603      	mov	r3, r0
 8004556:	6039      	str	r1, [r7, #0]
 8004558:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800455a:	2301      	movs	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2200      	movs	r2, #0
 800456a:	6939      	ldr	r1, [r7, #16]
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	f7ff fed5 	bl	800431c <xQueueGenericCreateStatic>
 8004572:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff ffb8 	bl	80044ea <prvInitialiseMutex>

		return xNewQueue;
 800457a:	68fb      	ldr	r3, [r7, #12]
	}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10c      	bne.n	80045b0 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	b672      	cpsid	i
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	b662      	cpsie	i
 80045aa:	60fb      	str	r3, [r7, #12]
}
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	689c      	ldr	r4, [r3, #8]
 80045b4:	f001 fbb8 	bl	8005d28 <xTaskGetCurrentTaskHandle>
 80045b8:	4603      	mov	r3, r0
 80045ba:	429c      	cmp	r4, r3
 80045bc:	d111      	bne.n	80045e2 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80045d0:	2300      	movs	r3, #0
 80045d2:	2200      	movs	r2, #0
 80045d4:	2100      	movs	r1, #0
 80045d6:	6938      	ldr	r0, [r7, #16]
 80045d8:	f000 f842 	bl	8004660 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80045dc:	2301      	movs	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e001      	b.n	80045e6 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80045e6:	697b      	ldr	r3, [r7, #20]
	}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd90      	pop	{r4, r7, pc}

080045f0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80045f0:	b590      	push	{r4, r7, lr}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10c      	bne.n	800461e <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004608:	b672      	cpsid	i
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	b662      	cpsie	i
 8004618:	60fb      	str	r3, [r7, #12]
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	689c      	ldr	r4, [r3, #8]
 8004622:	f001 fb81 	bl	8005d28 <xTaskGetCurrentTaskHandle>
 8004626:	4603      	mov	r3, r0
 8004628:	429c      	cmp	r4, r3
 800462a:	d107      	bne.n	800463c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004636:	2301      	movs	r3, #1
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e00c      	b.n	8004656 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	6938      	ldr	r0, [r7, #16]
 8004640:	f000 fa9a 	bl	8004b78 <xQueueSemaphoreTake>
 8004644:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004656:	697b      	ldr	r3, [r7, #20]
	}
 8004658:	4618      	mov	r0, r3
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	bd90      	pop	{r4, r7, pc}

08004660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08e      	sub	sp, #56	; 0x38
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800466e:	2300      	movs	r3, #0
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10c      	bne.n	8004696 <xQueueGenericSend+0x36>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	b672      	cpsid	i
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	b662      	cpsie	i
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d103      	bne.n	80046a4 <xQueueGenericSend+0x44>
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <xQueueGenericSend+0x48>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <xQueueGenericSend+0x4a>
 80046a8:	2300      	movs	r3, #0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10c      	bne.n	80046c8 <xQueueGenericSend+0x68>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	b672      	cpsid	i
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	b662      	cpsie	i
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d103      	bne.n	80046d6 <xQueueGenericSend+0x76>
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <xQueueGenericSend+0x7a>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xQueueGenericSend+0x7c>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10c      	bne.n	80046fa <xQueueGenericSend+0x9a>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	b672      	cpsid	i
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	b662      	cpsie	i
 80046f4:	623b      	str	r3, [r7, #32]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046fa:	f001 fb25 	bl	8005d48 <xTaskGetSchedulerState>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <xQueueGenericSend+0xaa>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <xQueueGenericSend+0xae>
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <xQueueGenericSend+0xb0>
 800470e:	2300      	movs	r3, #0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10c      	bne.n	800472e <xQueueGenericSend+0xce>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	b672      	cpsid	i
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	b662      	cpsie	i
 8004728:	61fb      	str	r3, [r7, #28]
}
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800472e:	f002 f95d 	bl	80069ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <xQueueGenericSend+0xe4>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d129      	bne.n	8004798 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800474a:	f000 fb41 	bl	8004dd0 <prvCopyDataToQueue>
 800474e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2b00      	cmp	r3, #0
 8004756:	d010      	beq.n	800477a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	3324      	adds	r3, #36	; 0x24
 800475c:	4618      	mov	r0, r3
 800475e:	f001 f91d 	bl	800599c <xTaskRemoveFromEventList>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004768:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <xQueueGenericSend+0x208>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	e00a      	b.n	8004790 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004780:	4b39      	ldr	r3, [pc, #228]	; (8004868 <xQueueGenericSend+0x208>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004790:	f002 f960 	bl	8006a54 <vPortExitCritical>
				return pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	e063      	b.n	8004860 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800479e:	f002 f959 	bl	8006a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e05c      	b.n	8004860 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ac:	f107 0314 	add.w	r3, r7, #20
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f959 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047b6:	2301      	movs	r3, #1
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047ba:	f002 f94b 	bl	8006a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047be:	f000 febf 	bl	8005540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047c2:	f002 f913 	bl	80069ec <vPortEnterCritical>
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047cc:	b25b      	sxtb	r3, r3
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d103      	bne.n	80047dc <xQueueGenericSend+0x17c>
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e2:	b25b      	sxtb	r3, r3
 80047e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e8:	d103      	bne.n	80047f2 <xQueueGenericSend+0x192>
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f2:	f002 f92f 	bl	8006a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047f6:	1d3a      	adds	r2, r7, #4
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f001 f948 	bl	8005a94 <xTaskCheckForTimeOut>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d124      	bne.n	8004854 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800480a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480c:	f000 fbd8 	bl	8004fc0 <prvIsQueueFull>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	3310      	adds	r3, #16
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f001 f868 	bl	80058f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004826:	f000 fb63 	bl	8004ef0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800482a:	f000 fe97 	bl	800555c <xTaskResumeAll>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	f47f af7c 	bne.w	800472e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004836:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <xQueueGenericSend+0x208>)
 8004838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	e772      	b.n	800472e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800484a:	f000 fb51 	bl	8004ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800484e:	f000 fe85 	bl	800555c <xTaskResumeAll>
 8004852:	e76c      	b.n	800472e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004856:	f000 fb4b 	bl	8004ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800485a:	f000 fe7f 	bl	800555c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800485e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004860:	4618      	mov	r0, r3
 8004862:	3738      	adds	r7, #56	; 0x38
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08e      	sub	sp, #56	; 0x38
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10c      	bne.n	800489e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	b672      	cpsid	i
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	b662      	cpsie	i
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
}
 800489a:	bf00      	nop
 800489c:	e7fe      	b.n	800489c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d103      	bne.n	80048ac <xQueueGenericSendFromISR+0x40>
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <xQueueGenericSendFromISR+0x44>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <xQueueGenericSendFromISR+0x46>
 80048b0:	2300      	movs	r3, #0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10c      	bne.n	80048d0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	b672      	cpsid	i
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	b662      	cpsie	i
 80048ca:	623b      	str	r3, [r7, #32]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d103      	bne.n	80048de <xQueueGenericSendFromISR+0x72>
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <xQueueGenericSendFromISR+0x76>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <xQueueGenericSendFromISR+0x78>
 80048e2:	2300      	movs	r3, #0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10c      	bne.n	8004902 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	b672      	cpsid	i
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	b662      	cpsie	i
 80048fc:	61fb      	str	r3, [r7, #28]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004902:	f002 f95b 	bl	8006bbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004906:	f3ef 8211 	mrs	r2, BASEPRI
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	b672      	cpsid	i
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	b662      	cpsie	i
 800491e:	61ba      	str	r2, [r7, #24]
 8004920:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004922:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <xQueueGenericSendFromISR+0xcc>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b02      	cmp	r3, #2
 8004936:	d12c      	bne.n	8004992 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004948:	f000 fa42 	bl	8004dd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800494c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d112      	bne.n	800497c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d016      	beq.n	800498c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	3324      	adds	r3, #36	; 0x24
 8004962:	4618      	mov	r0, r3
 8004964:	f001 f81a 	bl	800599c <xTaskRemoveFromEventList>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00e      	beq.n	800498c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e007      	b.n	800498c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800497c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004980:	3301      	adds	r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	b25a      	sxtb	r2, r3
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800498c:	2301      	movs	r3, #1
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004990:	e001      	b.n	8004996 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004992:	2300      	movs	r3, #0
 8004994:	637b      	str	r3, [r7, #52]	; 0x34
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80049a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3738      	adds	r7, #56	; 0x38
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	; 0x30
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <xQueueReceive+0x34>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	b672      	cpsid	i
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	b662      	cpsie	i
 80049da:	623b      	str	r3, [r7, #32]
}
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <xQueueReceive+0x42>
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <xQueueReceive+0x46>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xQueueReceive+0x48>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10c      	bne.n	8004a12 <xQueueReceive+0x66>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fc:	b672      	cpsid	i
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	b662      	cpsie	i
 8004a0c:	61fb      	str	r3, [r7, #28]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a12:	f001 f999 	bl	8005d48 <xTaskGetSchedulerState>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <xQueueReceive+0x76>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <xQueueReceive+0x7a>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueReceive+0x7c>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10c      	bne.n	8004a46 <xQueueReceive+0x9a>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	b672      	cpsid	i
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	b662      	cpsie	i
 8004a40:	61bb      	str	r3, [r7, #24]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a46:	f001 ffd1 	bl	80069ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01f      	beq.n	8004a96 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5a:	f000 fa23 	bl	8004ea4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	1e5a      	subs	r2, r3, #1
 8004a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00f      	beq.n	8004a8e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	3310      	adds	r3, #16
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 ff92 	bl	800599c <xTaskRemoveFromEventList>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d007      	beq.n	8004a8e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a7e:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <xQueueReceive+0x1c8>)
 8004a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a8e:	f001 ffe1 	bl	8006a54 <vPortExitCritical>
				return pdPASS;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e069      	b.n	8004b6a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d103      	bne.n	8004aa4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a9c:	f001 ffda 	bl	8006a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e062      	b.n	8004b6a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004aaa:	f107 0310 	add.w	r3, r7, #16
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 ffda 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ab8:	f001 ffcc 	bl	8006a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004abc:	f000 fd40 	bl	8005540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ac0:	f001 ff94 	bl	80069ec <vPortEnterCritical>
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad0:	d103      	bne.n	8004ada <xQueueReceive+0x12e>
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d103      	bne.n	8004af0 <xQueueReceive+0x144>
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004af0:	f001 ffb0 	bl	8006a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004af4:	1d3a      	adds	r2, r7, #4
 8004af6:	f107 0310 	add.w	r3, r7, #16
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 ffc9 	bl	8005a94 <xTaskCheckForTimeOut>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d123      	bne.n	8004b50 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b0a:	f000 fa43 	bl	8004f94 <prvIsQueueEmpty>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d017      	beq.n	8004b44 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	3324      	adds	r3, #36	; 0x24
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fee9 	bl	80058f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b24:	f000 f9e4 	bl	8004ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b28:	f000 fd18 	bl	800555c <xTaskResumeAll>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d189      	bne.n	8004a46 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <xQueueReceive+0x1c8>)
 8004b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	e780      	b.n	8004a46 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b46:	f000 f9d3 	bl	8004ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b4a:	f000 fd07 	bl	800555c <xTaskResumeAll>
 8004b4e:	e77a      	b.n	8004a46 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b52:	f000 f9cd 	bl	8004ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b56:	f000 fd01 	bl	800555c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b5c:	f000 fa1a 	bl	8004f94 <prvIsQueueEmpty>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f43f af6f 	beq.w	8004a46 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3730      	adds	r7, #48	; 0x30
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08e      	sub	sp, #56	; 0x38
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10c      	bne.n	8004bae <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	b672      	cpsid	i
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	b662      	cpsie	i
 8004ba8:	623b      	str	r3, [r7, #32]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	b672      	cpsid	i
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	b662      	cpsie	i
 8004bca:	61fb      	str	r3, [r7, #28]
}
 8004bcc:	bf00      	nop
 8004bce:	e7fe      	b.n	8004bce <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bd0:	f001 f8ba 	bl	8005d48 <xTaskGetSchedulerState>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <xQueueSemaphoreTake+0x68>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <xQueueSemaphoreTake+0x6c>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <xQueueSemaphoreTake+0x6e>
 8004be4:	2300      	movs	r3, #0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10c      	bne.n	8004c04 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	b672      	cpsid	i
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	b662      	cpsie	i
 8004bfe:	61bb      	str	r3, [r7, #24]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c04:	f001 fef2 	bl	80069ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d024      	beq.n	8004c5e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	1e5a      	subs	r2, r3, #1
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004c24:	f001 fa0e 	bl	8006044 <pvTaskIncrementMutexHeldCount>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00f      	beq.n	8004c56 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	3310      	adds	r3, #16
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 feae 	bl	800599c <xTaskRemoveFromEventList>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c46:	4b55      	ldr	r3, [pc, #340]	; (8004d9c <xQueueSemaphoreTake+0x224>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c56:	f001 fefd 	bl	8006a54 <vPortExitCritical>
				return pdPASS;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e099      	b.n	8004d92 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d113      	bne.n	8004c8c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	b672      	cpsid	i
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	b662      	cpsie	i
 8004c7e:	617b      	str	r3, [r7, #20]
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c84:	f001 fee6 	bl	8006a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e082      	b.n	8004d92 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c92:	f107 030c 	add.w	r3, r7, #12
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fee6 	bl	8005a68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ca0:	f001 fed8 	bl	8006a54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ca4:	f000 fc4c 	bl	8005540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ca8:	f001 fea0 	bl	80069ec <vPortEnterCritical>
 8004cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d103      	bne.n	8004cc2 <xQueueSemaphoreTake+0x14a>
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc8:	b25b      	sxtb	r3, r3
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d103      	bne.n	8004cd8 <xQueueSemaphoreTake+0x160>
 8004cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd8:	f001 febc 	bl	8006a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cdc:	463a      	mov	r2, r7
 8004cde:	f107 030c 	add.w	r3, r7, #12
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fed5 	bl	8005a94 <xTaskCheckForTimeOut>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d132      	bne.n	8004d56 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cf2:	f000 f94f 	bl	8004f94 <prvIsQueueEmpty>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d026      	beq.n	8004d4a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004d04:	f001 fe72 	bl	80069ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 f839 	bl	8005d84 <xTaskPriorityInherit>
 8004d12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004d14:	f001 fe9e 	bl	8006a54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	3324      	adds	r3, #36	; 0x24
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fde7 	bl	80058f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d28:	f000 f8e2 	bl	8004ef0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d2c:	f000 fc16 	bl	800555c <xTaskResumeAll>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f47f af66 	bne.w	8004c04 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8004d38:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <xQueueSemaphoreTake+0x224>)
 8004d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	e75c      	b.n	8004c04 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d4c:	f000 f8d0 	bl	8004ef0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d50:	f000 fc04 	bl	800555c <xTaskResumeAll>
 8004d54:	e756      	b.n	8004c04 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d58:	f000 f8ca 	bl	8004ef0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d5c:	f000 fbfe 	bl	800555c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d62:	f000 f917 	bl	8004f94 <prvIsQueueEmpty>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f43f af4b 	beq.w	8004c04 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00d      	beq.n	8004d90 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8004d74:	f001 fe3a 	bl	80069ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d7a:	f000 f811 	bl	8004da0 <prvGetDisinheritPriorityAfterTimeout>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 f8d6 	bl	8005f38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d8c:	f001 fe62 	bl	8006a54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3738      	adds	r7, #56	; 0x38
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d006      	beq.n	8004dbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	e001      	b.n	8004dc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
	}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10d      	bne.n	8004e0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d14d      	bne.n	8004e92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 f82a 	bl	8005e54 <xTaskPriorityDisinherit>
 8004e00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	e043      	b.n	8004e92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d119      	bne.n	8004e44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6858      	ldr	r0, [r3, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	f002 f9ac 	bl	8007178 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	441a      	add	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d32b      	bcc.n	8004e92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	e026      	b.n	8004e92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68d8      	ldr	r0, [r3, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	f002 f992 	bl	8007178 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	425b      	negs	r3, r3
 8004e5e:	441a      	add	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d207      	bcs.n	8004e80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	425b      	negs	r3, r3
 8004e7a:	441a      	add	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d105      	bne.n	8004e92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e9a:	697b      	ldr	r3, [r7, #20]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d018      	beq.n	8004ee8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	441a      	add	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d303      	bcc.n	8004ed8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68d9      	ldr	r1, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6838      	ldr	r0, [r7, #0]
 8004ee4:	f002 f948 	bl	8007178 <memcpy>
	}
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ef8:	f001 fd78 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f04:	e011      	b.n	8004f2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d012      	beq.n	8004f34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3324      	adds	r3, #36	; 0x24
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fd42 	bl	800599c <xTaskRemoveFromEventList>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f1e:	f000 fe1f 	bl	8005b60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	dce9      	bgt.n	8004f06 <prvUnlockQueue+0x16>
 8004f32:	e000      	b.n	8004f36 <prvUnlockQueue+0x46>
					break;
 8004f34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	22ff      	movs	r2, #255	; 0xff
 8004f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f3e:	f001 fd89 	bl	8006a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f42:	f001 fd53 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f4e:	e011      	b.n	8004f74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d012      	beq.n	8004f7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3310      	adds	r3, #16
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fd1d 	bl	800599c <xTaskRemoveFromEventList>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f68:	f000 fdfa 	bl	8005b60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	dce9      	bgt.n	8004f50 <prvUnlockQueue+0x60>
 8004f7c:	e000      	b.n	8004f80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	22ff      	movs	r2, #255	; 0xff
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f88:	f001 fd64 	bl	8006a54 <vPortExitCritical>
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f9c:	f001 fd26 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e001      	b.n	8004fb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fb2:	f001 fd4f 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fc8:	f001 fd10 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d102      	bne.n	8004fde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
 8004fdc:	e001      	b.n	8004fe2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fe2:	f001 fd37 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e014      	b.n	800502a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005000:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <vQueueAddToRegistry+0x50>)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10b      	bne.n	8005024 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800500c:	490c      	ldr	r1, [pc, #48]	; (8005040 <vQueueAddToRegistry+0x50>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005016:	4a0a      	ldr	r2, [pc, #40]	; (8005040 <vQueueAddToRegistry+0x50>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	4413      	add	r3, r2
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005022:	e006      	b.n	8005032 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3301      	adds	r3, #1
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b07      	cmp	r3, #7
 800502e:	d9e7      	bls.n	8005000 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	2000086c 	.word	0x2000086c

08005044 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005054:	f001 fcca 	bl	80069ec <vPortEnterCritical>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800505e:	b25b      	sxtb	r3, r3
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d103      	bne.n	800506e <vQueueWaitForMessageRestricted+0x2a>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005074:	b25b      	sxtb	r3, r3
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d103      	bne.n	8005084 <vQueueWaitForMessageRestricted+0x40>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005084:	f001 fce6 	bl	8006a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3324      	adds	r3, #36	; 0x24
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fc51 	bl	8005940 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800509e:	6978      	ldr	r0, [r7, #20]
 80050a0:	f7ff ff26 	bl	8004ef0 <prvUnlockQueue>
	}
 80050a4:	bf00      	nop
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08e      	sub	sp, #56	; 0x38
 80050b0:	af04      	add	r7, sp, #16
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10c      	bne.n	80050da <xTaskCreateStatic+0x2e>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	b672      	cpsid	i
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	b662      	cpsie	i
 80050d4:	623b      	str	r3, [r7, #32]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10c      	bne.n	80050fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	b672      	cpsid	i
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	b662      	cpsie	i
 80050f4:	61fb      	str	r3, [r7, #28]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050fa:	235c      	movs	r3, #92	; 0x5c
 80050fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b5c      	cmp	r3, #92	; 0x5c
 8005102:	d00c      	beq.n	800511e <xTaskCreateStatic+0x72>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	b672      	cpsid	i
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	b662      	cpsie	i
 8005118:	61bb      	str	r3, [r7, #24]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800511e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01e      	beq.n	8005164 <xTaskCreateStatic+0xb8>
 8005126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005134:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	2202      	movs	r2, #2
 800513a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800513e:	2300      	movs	r3, #0
 8005140:	9303      	str	r3, [sp, #12]
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	9302      	str	r3, [sp, #8]
 8005146:	f107 0314 	add.w	r3, r7, #20
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f850 	bl	80051fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800515c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800515e:	f000 f8df 	bl	8005320 <prvAddNewTaskToReadyList>
 8005162:	e001      	b.n	8005168 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005168:	697b      	ldr	r3, [r7, #20]
	}
 800516a:	4618      	mov	r0, r3
 800516c:	3728      	adds	r7, #40	; 0x28
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005172:	b580      	push	{r7, lr}
 8005174:	b08c      	sub	sp, #48	; 0x30
 8005176:	af04      	add	r7, sp, #16
 8005178:	60f8      	str	r0, [r7, #12]
 800517a:	60b9      	str	r1, [r7, #8]
 800517c:	603b      	str	r3, [r7, #0]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4618      	mov	r0, r3
 8005188:	f001 fd5c 	bl	8006c44 <pvPortMalloc>
 800518c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00e      	beq.n	80051b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005194:	205c      	movs	r0, #92	; 0x5c
 8005196:	f001 fd55 	bl	8006c44 <pvPortMalloc>
 800519a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
 80051a8:	e005      	b.n	80051b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051aa:	6978      	ldr	r0, [r7, #20]
 80051ac:	f001 fe14 	bl	8006dd8 <vPortFree>
 80051b0:	e001      	b.n	80051b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051b2:	2300      	movs	r3, #0
 80051b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d017      	beq.n	80051ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	2300      	movs	r3, #0
 80051c8:	9303      	str	r3, [sp, #12]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f80e 	bl	80051fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051e0:	69f8      	ldr	r0, [r7, #28]
 80051e2:	f000 f89d 	bl	8005320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051e6:	2301      	movs	r3, #1
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e002      	b.n	80051f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051ec:	f04f 33ff 	mov.w	r3, #4294967295
 80051f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051f2:	69bb      	ldr	r3, [r7, #24]
	}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	461a      	mov	r2, r3
 8005214:	21a5      	movs	r1, #165	; 0xa5
 8005216:	f001 ff67 	bl	80070e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005224:	440b      	add	r3, r1
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00c      	beq.n	8005258 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	b672      	cpsid	i
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	b662      	cpsie	i
 8005252:	617b      	str	r3, [r7, #20]
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01f      	beq.n	800529e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800525e:	2300      	movs	r3, #0
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	e012      	b.n	800528a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	7819      	ldrb	r1, [r3, #0]
 800526c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	3334      	adds	r3, #52	; 0x34
 8005274:	460a      	mov	r2, r1
 8005276:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d006      	beq.n	8005292 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	3301      	adds	r3, #1
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b0f      	cmp	r3, #15
 800528e:	d9e9      	bls.n	8005264 <prvInitialiseNewTask+0x68>
 8005290:	e000      	b.n	8005294 <prvInitialiseNewTask+0x98>
			{
				break;
 8005292:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800529c:	e003      	b.n	80052a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	2b37      	cmp	r3, #55	; 0x37
 80052aa:	d901      	bls.n	80052b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052ac:	2337      	movs	r3, #55	; 0x37
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	2200      	movs	r2, #0
 80052c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	3304      	adds	r3, #4
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe ff2a 	bl	8004120 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	3318      	adds	r3, #24
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe ff25 	bl	8004120 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2200      	movs	r2, #0
 80052f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	68f9      	ldr	r1, [r7, #12]
 80052fe:	69b8      	ldr	r0, [r7, #24]
 8005300:	f001 fa64 	bl	80067cc <pxPortInitialiseStack>
 8005304:	4602      	mov	r2, r0
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005316:	bf00      	nop
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005328:	f001 fb60 	bl	80069ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800532c:	4b2d      	ldr	r3, [pc, #180]	; (80053e4 <prvAddNewTaskToReadyList+0xc4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <prvAddNewTaskToReadyList+0xc4>)
 8005334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005336:	4b2c      	ldr	r3, [pc, #176]	; (80053e8 <prvAddNewTaskToReadyList+0xc8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800533e:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <prvAddNewTaskToReadyList+0xc8>)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005344:	4b27      	ldr	r3, [pc, #156]	; (80053e4 <prvAddNewTaskToReadyList+0xc4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d110      	bne.n	800536e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800534c:	f000 fc2c 	bl	8005ba8 <prvInitialiseTaskLists>
 8005350:	e00d      	b.n	800536e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005352:	4b26      	ldr	r3, [pc, #152]	; (80053ec <prvAddNewTaskToReadyList+0xcc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800535a:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <prvAddNewTaskToReadyList+0xc8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d802      	bhi.n	800536e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005368:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <prvAddNewTaskToReadyList+0xc8>)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800536e:	4b20      	ldr	r3, [pc, #128]	; (80053f0 <prvAddNewTaskToReadyList+0xd0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <prvAddNewTaskToReadyList+0xd0>)
 8005376:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <prvAddNewTaskToReadyList+0xd0>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <prvAddNewTaskToReadyList+0xd4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d903      	bls.n	8005394 <prvAddNewTaskToReadyList+0x74>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4a18      	ldr	r2, [pc, #96]	; (80053f4 <prvAddNewTaskToReadyList+0xd4>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4a15      	ldr	r2, [pc, #84]	; (80053f8 <prvAddNewTaskToReadyList+0xd8>)
 80053a2:	441a      	add	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f7fe fec5 	bl	800413a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053b0:	f001 fb50 	bl	8006a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053b4:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <prvAddNewTaskToReadyList+0xcc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00e      	beq.n	80053da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <prvAddNewTaskToReadyList+0xc8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d207      	bcs.n	80053da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <prvAddNewTaskToReadyList+0xdc>)
 80053cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000d80 	.word	0x20000d80
 80053e8:	200008ac 	.word	0x200008ac
 80053ec:	20000d8c 	.word	0x20000d8c
 80053f0:	20000d9c 	.word	0x20000d9c
 80053f4:	20000d88 	.word	0x20000d88
 80053f8:	200008b0 	.word	0x200008b0
 80053fc:	e000ed04 	.word	0xe000ed04

08005400 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d019      	beq.n	8005446 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <vTaskDelay+0x64>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00c      	beq.n	8005434 <vTaskDelay+0x34>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	b672      	cpsid	i
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	b662      	cpsie	i
 800542e:	60bb      	str	r3, [r7, #8]
}
 8005430:	bf00      	nop
 8005432:	e7fe      	b.n	8005432 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005434:	f000 f884 	bl	8005540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005438:	2100      	movs	r1, #0
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fe16 	bl	800606c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005440:	f000 f88c 	bl	800555c <xTaskResumeAll>
 8005444:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d107      	bne.n	800545c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <vTaskDelay+0x68>)
 800544e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	20000da8 	.word	0x20000da8
 8005468:	e000ed04 	.word	0xe000ed04

0800546c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800547a:	463a      	mov	r2, r7
 800547c:	1d39      	adds	r1, r7, #4
 800547e:	f107 0308 	add.w	r3, r7, #8
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe fdf8 	bl	8004078 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	9202      	str	r2, [sp, #8]
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	2300      	movs	r3, #0
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	2300      	movs	r3, #0
 8005498:	460a      	mov	r2, r1
 800549a:	4923      	ldr	r1, [pc, #140]	; (8005528 <vTaskStartScheduler+0xbc>)
 800549c:	4823      	ldr	r0, [pc, #140]	; (800552c <vTaskStartScheduler+0xc0>)
 800549e:	f7ff fe05 	bl	80050ac <xTaskCreateStatic>
 80054a2:	4603      	mov	r3, r0
 80054a4:	4a22      	ldr	r2, [pc, #136]	; (8005530 <vTaskStartScheduler+0xc4>)
 80054a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <vTaskStartScheduler+0xc4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054b0:	2301      	movs	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e001      	b.n	80054ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d102      	bne.n	80054c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054c0:	f000 fe28 	bl	8006114 <xTimerCreateTimerTask>
 80054c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d118      	bne.n	80054fe <vTaskStartScheduler+0x92>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	b672      	cpsid	i
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	b662      	cpsie	i
 80054e0:	613b      	str	r3, [r7, #16]
}
 80054e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054e4:	4b13      	ldr	r3, [pc, #76]	; (8005534 <vTaskStartScheduler+0xc8>)
 80054e6:	f04f 32ff 	mov.w	r2, #4294967295
 80054ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054ec:	4b12      	ldr	r3, [pc, #72]	; (8005538 <vTaskStartScheduler+0xcc>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <vTaskStartScheduler+0xd0>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054f8:	f001 f9fa 	bl	80068f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054fc:	e010      	b.n	8005520 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005504:	d10c      	bne.n	8005520 <vTaskStartScheduler+0xb4>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	b672      	cpsid	i
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	b662      	cpsie	i
 800551a:	60fb      	str	r3, [r7, #12]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <vTaskStartScheduler+0xb2>
}
 8005520:	bf00      	nop
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	08007d34 	.word	0x08007d34
 800552c:	08005b79 	.word	0x08005b79
 8005530:	20000da4 	.word	0x20000da4
 8005534:	20000da0 	.word	0x20000da0
 8005538:	20000d8c 	.word	0x20000d8c
 800553c:	20000d84 	.word	0x20000d84

08005540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <vTaskSuspendAll+0x18>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	4a03      	ldr	r2, [pc, #12]	; (8005558 <vTaskSuspendAll+0x18>)
 800554c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	20000da8 	.word	0x20000da8

0800555c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800556a:	4b43      	ldr	r3, [pc, #268]	; (8005678 <xTaskResumeAll+0x11c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10c      	bne.n	800558c <xTaskResumeAll+0x30>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	b672      	cpsid	i
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	b662      	cpsie	i
 8005586:	603b      	str	r3, [r7, #0]
}
 8005588:	bf00      	nop
 800558a:	e7fe      	b.n	800558a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800558c:	f001 fa2e 	bl	80069ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005590:	4b39      	ldr	r3, [pc, #228]	; (8005678 <xTaskResumeAll+0x11c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3b01      	subs	r3, #1
 8005596:	4a38      	ldr	r2, [pc, #224]	; (8005678 <xTaskResumeAll+0x11c>)
 8005598:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800559a:	4b37      	ldr	r3, [pc, #220]	; (8005678 <xTaskResumeAll+0x11c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d162      	bne.n	8005668 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055a2:	4b36      	ldr	r3, [pc, #216]	; (800567c <xTaskResumeAll+0x120>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d05e      	beq.n	8005668 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055aa:	e02f      	b.n	800560c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ac:	4b34      	ldr	r3, [pc, #208]	; (8005680 <xTaskResumeAll+0x124>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3318      	adds	r3, #24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe fe1b 	bl	80041f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fe16 	bl	80041f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055cc:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <xTaskResumeAll+0x128>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d903      	bls.n	80055dc <xTaskResumeAll+0x80>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	4a2a      	ldr	r2, [pc, #168]	; (8005684 <xTaskResumeAll+0x128>)
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e0:	4613      	mov	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	4413      	add	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4a27      	ldr	r2, [pc, #156]	; (8005688 <xTaskResumeAll+0x12c>)
 80055ea:	441a      	add	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f7fe fda1 	bl	800413a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4b23      	ldr	r3, [pc, #140]	; (800568c <xTaskResumeAll+0x130>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005606:	4b22      	ldr	r3, [pc, #136]	; (8005690 <xTaskResumeAll+0x134>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800560c:	4b1c      	ldr	r3, [pc, #112]	; (8005680 <xTaskResumeAll+0x124>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1cb      	bne.n	80055ac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800561a:	f000 fb65 	bl	8005ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800561e:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <xTaskResumeAll+0x138>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d010      	beq.n	800564c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800562a:	f000 f847 	bl	80056bc <xTaskIncrementTick>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005634:	4b16      	ldr	r3, [pc, #88]	; (8005690 <xTaskResumeAll+0x134>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3b01      	subs	r3, #1
 800563e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f1      	bne.n	800562a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005646:	4b13      	ldr	r3, [pc, #76]	; (8005694 <xTaskResumeAll+0x138>)
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800564c:	4b10      	ldr	r3, [pc, #64]	; (8005690 <xTaskResumeAll+0x134>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d009      	beq.n	8005668 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005654:	2301      	movs	r3, #1
 8005656:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005658:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <xTaskResumeAll+0x13c>)
 800565a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005668:	f001 f9f4 	bl	8006a54 <vPortExitCritical>

	return xAlreadyYielded;
 800566c:	68bb      	ldr	r3, [r7, #8]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000da8 	.word	0x20000da8
 800567c:	20000d80 	.word	0x20000d80
 8005680:	20000d40 	.word	0x20000d40
 8005684:	20000d88 	.word	0x20000d88
 8005688:	200008b0 	.word	0x200008b0
 800568c:	200008ac 	.word	0x200008ac
 8005690:	20000d94 	.word	0x20000d94
 8005694:	20000d90 	.word	0x20000d90
 8005698:	e000ed04 	.word	0xe000ed04

0800569c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <xTaskGetTickCount+0x1c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056a8:	687b      	ldr	r3, [r7, #4]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20000d84 	.word	0x20000d84

080056bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c6:	4b50      	ldr	r3, [pc, #320]	; (8005808 <xTaskIncrementTick+0x14c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f040 808b 	bne.w	80057e6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056d0:	4b4e      	ldr	r3, [pc, #312]	; (800580c <xTaskIncrementTick+0x150>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056d8:	4a4c      	ldr	r2, [pc, #304]	; (800580c <xTaskIncrementTick+0x150>)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d122      	bne.n	800572a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80056e4:	4b4a      	ldr	r3, [pc, #296]	; (8005810 <xTaskIncrementTick+0x154>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00c      	beq.n	8005708 <xTaskIncrementTick+0x4c>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	b672      	cpsid	i
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	b662      	cpsie	i
 8005702:	603b      	str	r3, [r7, #0]
}
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <xTaskIncrementTick+0x4a>
 8005708:	4b41      	ldr	r3, [pc, #260]	; (8005810 <xTaskIncrementTick+0x154>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	4b41      	ldr	r3, [pc, #260]	; (8005814 <xTaskIncrementTick+0x158>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a3f      	ldr	r2, [pc, #252]	; (8005810 <xTaskIncrementTick+0x154>)
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4a3f      	ldr	r2, [pc, #252]	; (8005814 <xTaskIncrementTick+0x158>)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	4b3e      	ldr	r3, [pc, #248]	; (8005818 <xTaskIncrementTick+0x15c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	4a3d      	ldr	r2, [pc, #244]	; (8005818 <xTaskIncrementTick+0x15c>)
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	f000 fadf 	bl	8005ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800572a:	4b3c      	ldr	r3, [pc, #240]	; (800581c <xTaskIncrementTick+0x160>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	429a      	cmp	r2, r3
 8005732:	d349      	bcc.n	80057c8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005734:	4b36      	ldr	r3, [pc, #216]	; (8005810 <xTaskIncrementTick+0x154>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d104      	bne.n	8005748 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <xTaskIncrementTick+0x160>)
 8005740:	f04f 32ff 	mov.w	r2, #4294967295
 8005744:	601a      	str	r2, [r3, #0]
					break;
 8005746:	e03f      	b.n	80057c8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005748:	4b31      	ldr	r3, [pc, #196]	; (8005810 <xTaskIncrementTick+0x154>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d203      	bcs.n	8005768 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005760:	4a2e      	ldr	r2, [pc, #184]	; (800581c <xTaskIncrementTick+0x160>)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005766:	e02f      	b.n	80057c8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	3304      	adds	r3, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fd41 	bl	80041f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	3318      	adds	r3, #24
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe fd38 	bl	80041f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <xTaskIncrementTick+0x164>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d903      	bls.n	8005798 <xTaskIncrementTick+0xdc>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	4a22      	ldr	r2, [pc, #136]	; (8005820 <xTaskIncrementTick+0x164>)
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <xTaskIncrementTick+0x168>)
 80057a6:	441a      	add	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f7fe fcc3 	bl	800413a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	4b1b      	ldr	r3, [pc, #108]	; (8005828 <xTaskIncrementTick+0x16c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	429a      	cmp	r2, r3
 80057c0:	d3b8      	bcc.n	8005734 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057c6:	e7b5      	b.n	8005734 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057c8:	4b17      	ldr	r3, [pc, #92]	; (8005828 <xTaskIncrementTick+0x16c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ce:	4915      	ldr	r1, [pc, #84]	; (8005824 <xTaskIncrementTick+0x168>)
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d907      	bls.n	80057f0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80057e0:	2301      	movs	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e004      	b.n	80057f0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057e6:	4b11      	ldr	r3, [pc, #68]	; (800582c <xTaskIncrementTick+0x170>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	4a0f      	ldr	r2, [pc, #60]	; (800582c <xTaskIncrementTick+0x170>)
 80057ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057f0:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <xTaskIncrementTick+0x174>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80057f8:	2301      	movs	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057fc:	697b      	ldr	r3, [r7, #20]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	20000da8 	.word	0x20000da8
 800580c:	20000d84 	.word	0x20000d84
 8005810:	20000d38 	.word	0x20000d38
 8005814:	20000d3c 	.word	0x20000d3c
 8005818:	20000d98 	.word	0x20000d98
 800581c:	20000da0 	.word	0x20000da0
 8005820:	20000d88 	.word	0x20000d88
 8005824:	200008b0 	.word	0x200008b0
 8005828:	200008ac 	.word	0x200008ac
 800582c:	20000d90 	.word	0x20000d90
 8005830:	20000d94 	.word	0x20000d94

08005834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800583a:	4b29      	ldr	r3, [pc, #164]	; (80058e0 <vTaskSwitchContext+0xac>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005842:	4b28      	ldr	r3, [pc, #160]	; (80058e4 <vTaskSwitchContext+0xb0>)
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005848:	e043      	b.n	80058d2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800584a:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <vTaskSwitchContext+0xb0>)
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005850:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <vTaskSwitchContext+0xb4>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e012      	b.n	800587e <vTaskSwitchContext+0x4a>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10c      	bne.n	8005878 <vTaskSwitchContext+0x44>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	b672      	cpsid	i
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	b662      	cpsie	i
 8005872:	607b      	str	r3, [r7, #4]
}
 8005874:	bf00      	nop
 8005876:	e7fe      	b.n	8005876 <vTaskSwitchContext+0x42>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	491b      	ldr	r1, [pc, #108]	; (80058ec <vTaskSwitchContext+0xb8>)
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0e2      	beq.n	8005858 <vTaskSwitchContext+0x24>
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4a13      	ldr	r2, [pc, #76]	; (80058ec <vTaskSwitchContext+0xb8>)
 800589e:	4413      	add	r3, r2
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3308      	adds	r3, #8
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d104      	bne.n	80058c2 <vTaskSwitchContext+0x8e>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	605a      	str	r2, [r3, #4]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <vTaskSwitchContext+0xbc>)
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	4a06      	ldr	r2, [pc, #24]	; (80058e8 <vTaskSwitchContext+0xb4>)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6013      	str	r3, [r2, #0]
}
 80058d2:	bf00      	nop
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000da8 	.word	0x20000da8
 80058e4:	20000d94 	.word	0x20000d94
 80058e8:	20000d88 	.word	0x20000d88
 80058ec:	200008b0 	.word	0x200008b0
 80058f0:	200008ac 	.word	0x200008ac

080058f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10c      	bne.n	800591e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	b672      	cpsid	i
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	b662      	cpsie	i
 8005918:	60fb      	str	r3, [r7, #12]
}
 800591a:	bf00      	nop
 800591c:	e7fe      	b.n	800591c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800591e:	4b07      	ldr	r3, [pc, #28]	; (800593c <vTaskPlaceOnEventList+0x48>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3318      	adds	r3, #24
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fe fc2b 	bl	8004182 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800592c:	2101      	movs	r1, #1
 800592e:	6838      	ldr	r0, [r7, #0]
 8005930:	f000 fb9c 	bl	800606c <prvAddCurrentTaskToDelayedList>
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	200008ac 	.word	0x200008ac

08005940 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	b672      	cpsid	i
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	b662      	cpsie	i
 8005966:	617b      	str	r3, [r7, #20]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <vTaskPlaceOnEventListRestricted+0x58>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3318      	adds	r3, #24
 8005972:	4619      	mov	r1, r3
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f7fe fbe0 	bl	800413a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005980:	f04f 33ff 	mov.w	r3, #4294967295
 8005984:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	68b8      	ldr	r0, [r7, #8]
 800598a:	f000 fb6f 	bl	800606c <prvAddCurrentTaskToDelayedList>
	}
 800598e:	bf00      	nop
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	200008ac 	.word	0x200008ac

0800599c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10c      	bne.n	80059cc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	b672      	cpsid	i
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	b662      	cpsie	i
 80059c6:	60fb      	str	r3, [r7, #12]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	3318      	adds	r3, #24
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fc0f 	bl	80041f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d6:	4b1e      	ldr	r3, [pc, #120]	; (8005a50 <xTaskRemoveFromEventList+0xb4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11d      	bne.n	8005a1a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fc06 	bl	80041f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <xTaskRemoveFromEventList+0xb8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d903      	bls.n	80059fc <xTaskRemoveFromEventList+0x60>
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4a16      	ldr	r2, [pc, #88]	; (8005a54 <xTaskRemoveFromEventList+0xb8>)
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <xTaskRemoveFromEventList+0xbc>)
 8005a0a:	441a      	add	r2, r3
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7fe fb91 	bl	800413a <vListInsertEnd>
 8005a18:	e005      	b.n	8005a26 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	4619      	mov	r1, r3
 8005a20:	480e      	ldr	r0, [pc, #56]	; (8005a5c <xTaskRemoveFromEventList+0xc0>)
 8005a22:	f7fe fb8a 	bl	800413a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	; (8005a60 <xTaskRemoveFromEventList+0xc4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d905      	bls.n	8005a40 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <xTaskRemoveFromEventList+0xc8>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e001      	b.n	8005a44 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a44:	697b      	ldr	r3, [r7, #20]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000da8 	.word	0x20000da8
 8005a54:	20000d88 	.word	0x20000d88
 8005a58:	200008b0 	.word	0x200008b0
 8005a5c:	20000d40 	.word	0x20000d40
 8005a60:	200008ac 	.word	0x200008ac
 8005a64:	20000d94 	.word	0x20000d94

08005a68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a70:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <vTaskInternalSetTimeOutState+0x24>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <vTaskInternalSetTimeOutState+0x28>)
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000d98 	.word	0x20000d98
 8005a90:	20000d84 	.word	0x20000d84

08005a94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10c      	bne.n	8005abe <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	b672      	cpsid	i
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	b662      	cpsie	i
 8005ab8:	613b      	str	r3, [r7, #16]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10c      	bne.n	8005ade <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	b672      	cpsid	i
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	b662      	cpsie	i
 8005ad8:	60fb      	str	r3, [r7, #12]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005ade:	f000 ff85 	bl	80069ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ae2:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <xTaskCheckForTimeOut+0xc4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d102      	bne.n	8005b02 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	e023      	b.n	8005b4a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	4b15      	ldr	r3, [pc, #84]	; (8005b5c <xTaskCheckForTimeOut+0xc8>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d007      	beq.n	8005b1e <xTaskCheckForTimeOut+0x8a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d302      	bcc.n	8005b1e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e015      	b.n	8005b4a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d20b      	bcs.n	8005b40 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff97 	bl	8005a68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
 8005b3e:	e004      	b.n	8005b4a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b46:	2301      	movs	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b4a:	f000 ff83 	bl	8006a54 <vPortExitCritical>

	return xReturn;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	20000d84 	.word	0x20000d84
 8005b5c:	20000d98 	.word	0x20000d98

08005b60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b64:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <vTaskMissedYield+0x14>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
}
 8005b6a:	bf00      	nop
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	20000d94 	.word	0x20000d94

08005b78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b80:	f000 f852 	bl	8005c28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b84:	4b06      	ldr	r3, [pc, #24]	; (8005ba0 <prvIdleTask+0x28>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d9f9      	bls.n	8005b80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <prvIdleTask+0x2c>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	f3bf 8f4f 	dsb	sy
 8005b98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b9c:	e7f0      	b.n	8005b80 <prvIdleTask+0x8>
 8005b9e:	bf00      	nop
 8005ba0:	200008b0 	.word	0x200008b0
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bae:	2300      	movs	r3, #0
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	e00c      	b.n	8005bce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4a12      	ldr	r2, [pc, #72]	; (8005c08 <prvInitialiseTaskLists+0x60>)
 8005bc0:	4413      	add	r3, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe fa8c 	bl	80040e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	607b      	str	r3, [r7, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b37      	cmp	r3, #55	; 0x37
 8005bd2:	d9ef      	bls.n	8005bb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bd4:	480d      	ldr	r0, [pc, #52]	; (8005c0c <prvInitialiseTaskLists+0x64>)
 8005bd6:	f7fe fa83 	bl	80040e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bda:	480d      	ldr	r0, [pc, #52]	; (8005c10 <prvInitialiseTaskLists+0x68>)
 8005bdc:	f7fe fa80 	bl	80040e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005be0:	480c      	ldr	r0, [pc, #48]	; (8005c14 <prvInitialiseTaskLists+0x6c>)
 8005be2:	f7fe fa7d 	bl	80040e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005be6:	480c      	ldr	r0, [pc, #48]	; (8005c18 <prvInitialiseTaskLists+0x70>)
 8005be8:	f7fe fa7a 	bl	80040e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bec:	480b      	ldr	r0, [pc, #44]	; (8005c1c <prvInitialiseTaskLists+0x74>)
 8005bee:	f7fe fa77 	bl	80040e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <prvInitialiseTaskLists+0x78>)
 8005bf4:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <prvInitialiseTaskLists+0x64>)
 8005bf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <prvInitialiseTaskLists+0x7c>)
 8005bfa:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <prvInitialiseTaskLists+0x68>)
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200008b0 	.word	0x200008b0
 8005c0c:	20000d10 	.word	0x20000d10
 8005c10:	20000d24 	.word	0x20000d24
 8005c14:	20000d40 	.word	0x20000d40
 8005c18:	20000d54 	.word	0x20000d54
 8005c1c:	20000d6c 	.word	0x20000d6c
 8005c20:	20000d38 	.word	0x20000d38
 8005c24:	20000d3c 	.word	0x20000d3c

08005c28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c2e:	e019      	b.n	8005c64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c30:	f000 fedc 	bl	80069ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <prvCheckTasksWaitingTermination+0x50>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fad7 	bl	80041f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <prvCheckTasksWaitingTermination+0x54>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	4a0b      	ldr	r2, [pc, #44]	; (8005c7c <prvCheckTasksWaitingTermination+0x54>)
 8005c4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c50:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <prvCheckTasksWaitingTermination+0x58>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3b01      	subs	r3, #1
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <prvCheckTasksWaitingTermination+0x58>)
 8005c58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c5a:	f000 fefb 	bl	8006a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f810 	bl	8005c84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <prvCheckTasksWaitingTermination+0x58>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e1      	bne.n	8005c30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000d54 	.word	0x20000d54
 8005c7c:	20000d80 	.word	0x20000d80
 8005c80:	20000d68 	.word	0x20000d68

08005c84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d108      	bne.n	8005ca8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 f89c 	bl	8006dd8 <vPortFree>
				vPortFree( pxTCB );
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 f899 	bl	8006dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ca6:	e01a      	b.n	8005cde <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d103      	bne.n	8005cba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 f890 	bl	8006dd8 <vPortFree>
	}
 8005cb8:	e011      	b.n	8005cde <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d00c      	beq.n	8005cde <prvDeleteTCB+0x5a>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	b672      	cpsid	i
 8005cca:	f383 8811 	msr	BASEPRI, r3
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f3bf 8f4f 	dsb	sy
 8005cd6:	b662      	cpsie	i
 8005cd8:	60fb      	str	r3, [r7, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <prvDeleteTCB+0x58>
	}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cee:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <prvResetNextTaskUnblockTime+0x38>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <prvResetNextTaskUnblockTime+0x3c>)
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d00:	e008      	b.n	8005d14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d02:	4b07      	ldr	r3, [pc, #28]	; (8005d20 <prvResetNextTaskUnblockTime+0x38>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a04      	ldr	r2, [pc, #16]	; (8005d24 <prvResetNextTaskUnblockTime+0x3c>)
 8005d12:	6013      	str	r3, [r2, #0]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20000d38 	.word	0x20000d38
 8005d24:	20000da0 	.word	0x20000da0

08005d28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <xTaskGetCurrentTaskHandle+0x1c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005d34:	687b      	ldr	r3, [r7, #4]
	}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	200008ac 	.word	0x200008ac

08005d48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <xTaskGetSchedulerState+0x34>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d102      	bne.n	8005d5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d56:	2301      	movs	r3, #1
 8005d58:	607b      	str	r3, [r7, #4]
 8005d5a:	e008      	b.n	8005d6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5c:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <xTaskGetSchedulerState+0x38>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d64:	2302      	movs	r3, #2
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	e001      	b.n	8005d6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d6e:	687b      	ldr	r3, [r7, #4]
	}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20000d8c 	.word	0x20000d8c
 8005d80:	20000da8 	.word	0x20000da8

08005d84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d051      	beq.n	8005e3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	4b2a      	ldr	r3, [pc, #168]	; (8005e48 <xTaskPriorityInherit+0xc4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d241      	bcs.n	8005e2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	db06      	blt.n	8005dbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <xTaskPriorityInherit+0xc4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6959      	ldr	r1, [r3, #20]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <xTaskPriorityInherit+0xc8>)
 8005dd0:	4413      	add	r3, r2
 8005dd2:	4299      	cmp	r1, r3
 8005dd4:	d122      	bne.n	8005e1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fa0a 	bl	80041f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005de0:	4b19      	ldr	r3, [pc, #100]	; (8005e48 <xTaskPriorityInherit+0xc4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dee:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <xTaskPriorityInherit+0xcc>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d903      	bls.n	8005dfe <xTaskPriorityInherit+0x7a>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <xTaskPriorityInherit+0xcc>)
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4a10      	ldr	r2, [pc, #64]	; (8005e4c <xTaskPriorityInherit+0xc8>)
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f7fe f990 	bl	800413a <vListInsertEnd>
 8005e1a:	e004      	b.n	8005e26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <xTaskPriorityInherit+0xc4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e26:	2301      	movs	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	e008      	b.n	8005e3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <xTaskPriorityInherit+0xc4>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d201      	bcs.n	8005e3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
	}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200008ac 	.word	0x200008ac
 8005e4c:	200008b0 	.word	0x200008b0
 8005e50:	20000d88 	.word	0x20000d88

08005e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d05a      	beq.n	8005f20 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e6a:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <xTaskPriorityDisinherit+0xd8>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d00c      	beq.n	8005e8e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	b672      	cpsid	i
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	b662      	cpsie	i
 8005e88:	60fb      	str	r3, [r7, #12]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	b672      	cpsid	i
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	b662      	cpsie	i
 8005eaa:	60bb      	str	r3, [r7, #8]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb4:	1e5a      	subs	r2, r3, #1
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d02c      	beq.n	8005f20 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d128      	bne.n	8005f20 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe f98e 	bl	80041f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <xTaskPriorityDisinherit+0xdc>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d903      	bls.n	8005f00 <xTaskPriorityDisinherit+0xac>
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <xTaskPriorityDisinherit+0xdc>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <xTaskPriorityDisinherit+0xe0>)
 8005f0e:	441a      	add	r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fe f90f 	bl	800413a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f20:	697b      	ldr	r3, [r7, #20]
	}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	200008ac 	.word	0x200008ac
 8005f30:	20000d88 	.word	0x20000d88
 8005f34:	200008b0 	.word	0x200008b0

08005f38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f46:	2301      	movs	r3, #1
 8005f48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d06e      	beq.n	800602e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10c      	bne.n	8005f72 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	b672      	cpsid	i
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	b662      	cpsie	i
 8005f6c:	60fb      	str	r3, [r7, #12]
}
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d902      	bls.n	8005f82 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	61fb      	str	r3, [r7, #28]
 8005f80:	e002      	b.n	8005f88 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d04d      	beq.n	800602e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d148      	bne.n	800602e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005f9c:	4b26      	ldr	r3, [pc, #152]	; (8006038 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d10c      	bne.n	8005fc0 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	b672      	cpsid	i
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	b662      	cpsie	i
 8005fba:	60bb      	str	r3, [r7, #8]
}
 8005fbc:	bf00      	nop
 8005fbe:	e7fe      	b.n	8005fbe <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db04      	blt.n	8005fde <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	6959      	ldr	r1, [r3, #20]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005fee:	4413      	add	r3, r2
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	d11c      	bne.n	800602e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe f8fb 	bl	80041f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d903      	bls.n	8006012 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	4a0c      	ldr	r2, [pc, #48]	; (8006040 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006020:	441a      	add	r2, r3
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	3304      	adds	r3, #4
 8006026:	4619      	mov	r1, r3
 8006028:	4610      	mov	r0, r2
 800602a:	f7fe f886 	bl	800413a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800602e:	bf00      	nop
 8006030:	3720      	adds	r7, #32
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	200008ac 	.word	0x200008ac
 800603c:	200008b0 	.word	0x200008b0
 8006040:	20000d88 	.word	0x20000d88

08006044 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006048:	4b07      	ldr	r3, [pc, #28]	; (8006068 <pvTaskIncrementMutexHeldCount+0x24>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <pvTaskIncrementMutexHeldCount+0x24>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006056:	3201      	adds	r2, #1
 8006058:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800605a:	4b03      	ldr	r3, [pc, #12]	; (8006068 <pvTaskIncrementMutexHeldCount+0x24>)
 800605c:	681b      	ldr	r3, [r3, #0]
	}
 800605e:	4618      	mov	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	200008ac 	.word	0x200008ac

0800606c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006076:	4b21      	ldr	r3, [pc, #132]	; (80060fc <prvAddCurrentTaskToDelayedList+0x90>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800607c:	4b20      	ldr	r3, [pc, #128]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3304      	adds	r3, #4
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe f8b6 	bl	80041f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d10a      	bne.n	80060a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3304      	adds	r3, #4
 800609c:	4619      	mov	r1, r3
 800609e:	4819      	ldr	r0, [pc, #100]	; (8006104 <prvAddCurrentTaskToDelayedList+0x98>)
 80060a0:	f7fe f84b 	bl	800413a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060a4:	e026      	b.n	80060f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060ae:	4b14      	ldr	r3, [pc, #80]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d209      	bcs.n	80060d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <prvAddCurrentTaskToDelayedList+0x9c>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fe f859 	bl	8004182 <vListInsert>
}
 80060d0:	e010      	b.n	80060f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <prvAddCurrentTaskToDelayedList+0xa0>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b0a      	ldr	r3, [pc, #40]	; (8006100 <prvAddCurrentTaskToDelayedList+0x94>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3304      	adds	r3, #4
 80060dc:	4619      	mov	r1, r3
 80060de:	4610      	mov	r0, r2
 80060e0:	f7fe f84f 	bl	8004182 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d202      	bcs.n	80060f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060ee:	4a08      	ldr	r2, [pc, #32]	; (8006110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6013      	str	r3, [r2, #0]
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000d84 	.word	0x20000d84
 8006100:	200008ac 	.word	0x200008ac
 8006104:	20000d6c 	.word	0x20000d6c
 8006108:	20000d3c 	.word	0x20000d3c
 800610c:	20000d38 	.word	0x20000d38
 8006110:	20000da0 	.word	0x20000da0

08006114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08a      	sub	sp, #40	; 0x28
 8006118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800611e:	f000 fb15 	bl	800674c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006122:	4b1d      	ldr	r3, [pc, #116]	; (8006198 <xTimerCreateTimerTask+0x84>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d021      	beq.n	800616e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006132:	1d3a      	adds	r2, r7, #4
 8006134:	f107 0108 	add.w	r1, r7, #8
 8006138:	f107 030c 	add.w	r3, r7, #12
 800613c:	4618      	mov	r0, r3
 800613e:	f7fd ffb5 	bl	80040ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	9202      	str	r2, [sp, #8]
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	2302      	movs	r3, #2
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	2300      	movs	r3, #0
 8006152:	460a      	mov	r2, r1
 8006154:	4911      	ldr	r1, [pc, #68]	; (800619c <xTimerCreateTimerTask+0x88>)
 8006156:	4812      	ldr	r0, [pc, #72]	; (80061a0 <xTimerCreateTimerTask+0x8c>)
 8006158:	f7fe ffa8 	bl	80050ac <xTaskCreateStatic>
 800615c:	4603      	mov	r3, r0
 800615e:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <xTimerCreateTimerTask+0x90>)
 8006160:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006162:	4b10      	ldr	r3, [pc, #64]	; (80061a4 <xTimerCreateTimerTask+0x90>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800616a:	2301      	movs	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10c      	bne.n	800618e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	b672      	cpsid	i
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	b662      	cpsie	i
 8006188:	613b      	str	r3, [r7, #16]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800618e:	697b      	ldr	r3, [r7, #20]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000ddc 	.word	0x20000ddc
 800619c:	08007d3c 	.word	0x08007d3c
 80061a0:	080062e5 	.word	0x080062e5
 80061a4:	20000de0 	.word	0x20000de0

080061a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10c      	bne.n	80061da <xTimerGenericCommand+0x32>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	b672      	cpsid	i
 80061c6:	f383 8811 	msr	BASEPRI, r3
 80061ca:	f3bf 8f6f 	isb	sy
 80061ce:	f3bf 8f4f 	dsb	sy
 80061d2:	b662      	cpsie	i
 80061d4:	623b      	str	r3, [r7, #32]
}
 80061d6:	bf00      	nop
 80061d8:	e7fe      	b.n	80061d8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80061da:	4b1a      	ldr	r3, [pc, #104]	; (8006244 <xTimerGenericCommand+0x9c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d02a      	beq.n	8006238 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b05      	cmp	r3, #5
 80061f2:	dc18      	bgt.n	8006226 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061f4:	f7ff fda8 	bl	8005d48 <xTaskGetSchedulerState>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d109      	bne.n	8006212 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <xTimerGenericCommand+0x9c>)
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f107 0110 	add.w	r1, r7, #16
 8006206:	2300      	movs	r3, #0
 8006208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800620a:	f7fe fa29 	bl	8004660 <xQueueGenericSend>
 800620e:	6278      	str	r0, [r7, #36]	; 0x24
 8006210:	e012      	b.n	8006238 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006212:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <xTimerGenericCommand+0x9c>)
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	f107 0110 	add.w	r1, r7, #16
 800621a:	2300      	movs	r3, #0
 800621c:	2200      	movs	r2, #0
 800621e:	f7fe fa1f 	bl	8004660 <xQueueGenericSend>
 8006222:	6278      	str	r0, [r7, #36]	; 0x24
 8006224:	e008      	b.n	8006238 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <xTimerGenericCommand+0x9c>)
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	f107 0110 	add.w	r1, r7, #16
 800622e:	2300      	movs	r3, #0
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	f7fe fb1b 	bl	800486c <xQueueGenericSendFromISR>
 8006236:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800623a:	4618      	mov	r0, r3
 800623c:	3728      	adds	r7, #40	; 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000ddc 	.word	0x20000ddc

08006248 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af02      	add	r7, sp, #8
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006252:	4b23      	ldr	r3, [pc, #140]	; (80062e0 <prvProcessExpiredTimer+0x98>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	3304      	adds	r3, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f7fd ffc7 	bl	80041f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d024      	beq.n	80062be <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	18d1      	adds	r1, r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	6978      	ldr	r0, [r7, #20]
 8006282:	f000 f8d3 	bl	800642c <prvInsertTimerInActiveList>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d021      	beq.n	80062d0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800628c:	2300      	movs	r3, #0
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2300      	movs	r3, #0
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	2100      	movs	r1, #0
 8006296:	6978      	ldr	r0, [r7, #20]
 8006298:	f7ff ff86 	bl	80061a8 <xTimerGenericCommand>
 800629c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d115      	bne.n	80062d0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	b672      	cpsid	i
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	b662      	cpsie	i
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	6978      	ldr	r0, [r7, #20]
 80062d6:	4798      	blx	r3
}
 80062d8:	bf00      	nop
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000dd4 	.word	0x20000dd4

080062e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062ec:	f107 0308 	add.w	r3, r7, #8
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f857 	bl	80063a4 <prvGetNextExpireTime>
 80062f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4619      	mov	r1, r3
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 f803 	bl	8006308 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006302:	f000 f8d5 	bl	80064b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006306:	e7f1      	b.n	80062ec <prvTimerTask+0x8>

08006308 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006312:	f7ff f915 	bl	8005540 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006316:	f107 0308 	add.w	r3, r7, #8
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f866 	bl	80063ec <prvSampleTimeNow>
 8006320:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d130      	bne.n	800638a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10a      	bne.n	8006344 <prvProcessTimerOrBlockTask+0x3c>
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	429a      	cmp	r2, r3
 8006334:	d806      	bhi.n	8006344 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006336:	f7ff f911 	bl	800555c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff ff83 	bl	8006248 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006342:	e024      	b.n	800638e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d008      	beq.n	800635c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800634a:	4b13      	ldr	r3, [pc, #76]	; (8006398 <prvProcessTimerOrBlockTask+0x90>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <prvProcessTimerOrBlockTask+0x50>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <prvProcessTimerOrBlockTask+0x52>
 8006358:	2300      	movs	r3, #0
 800635a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <prvProcessTimerOrBlockTask+0x94>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	4619      	mov	r1, r3
 800636a:	f7fe fe6b 	bl	8005044 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800636e:	f7ff f8f5 	bl	800555c <xTaskResumeAll>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006378:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <prvProcessTimerOrBlockTask+0x98>)
 800637a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	f3bf 8f6f 	isb	sy
}
 8006388:	e001      	b.n	800638e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800638a:	f7ff f8e7 	bl	800555c <xTaskResumeAll>
}
 800638e:	bf00      	nop
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000dd8 	.word	0x20000dd8
 800639c:	20000ddc 	.word	0x20000ddc
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063ac:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <prvGetNextExpireTime+0x44>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <prvGetNextExpireTime+0x16>
 80063b6:	2201      	movs	r2, #1
 80063b8:	e000      	b.n	80063bc <prvGetNextExpireTime+0x18>
 80063ba:	2200      	movs	r2, #0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d105      	bne.n	80063d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063c8:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <prvGetNextExpireTime+0x44>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e001      	b.n	80063d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80063d8:	68fb      	ldr	r3, [r7, #12]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	20000dd4 	.word	0x20000dd4

080063ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063f4:	f7ff f952 	bl	800569c <xTaskGetTickCount>
 80063f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063fa:	4b0b      	ldr	r3, [pc, #44]	; (8006428 <prvSampleTimeNow+0x3c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	429a      	cmp	r2, r3
 8006402:	d205      	bcs.n	8006410 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006404:	f000 f93c 	bl	8006680 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e002      	b.n	8006416 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006416:	4a04      	ldr	r2, [pc, #16]	; (8006428 <prvSampleTimeNow+0x3c>)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800641c:	68fb      	ldr	r3, [r7, #12]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000de4 	.word	0x20000de4

0800642c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d812      	bhi.n	8006478 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	429a      	cmp	r2, r3
 800645e:	d302      	bcc.n	8006466 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006460:	2301      	movs	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	e01b      	b.n	800649e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006466:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <prvInsertTimerInActiveList+0x7c>)
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3304      	adds	r3, #4
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f7fd fe86 	bl	8004182 <vListInsert>
 8006476:	e012      	b.n	800649e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d206      	bcs.n	800648e <prvInsertTimerInActiveList+0x62>
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d302      	bcc.n	800648e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006488:	2301      	movs	r3, #1
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e007      	b.n	800649e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <prvInsertTimerInActiveList+0x80>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3304      	adds	r3, #4
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f7fd fe72 	bl	8004182 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800649e:	697b      	ldr	r3, [r7, #20]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000dd8 	.word	0x20000dd8
 80064ac:	20000dd4 	.word	0x20000dd4

080064b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08e      	sub	sp, #56	; 0x38
 80064b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064b6:	e0d0      	b.n	800665a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	da1a      	bge.n	80064f4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	3304      	adds	r3, #4
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10c      	bne.n	80064e4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	b672      	cpsid	i
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	b662      	cpsie	i
 80064de:	61fb      	str	r3, [r7, #28]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ea:	6850      	ldr	r0, [r2, #4]
 80064ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ee:	6892      	ldr	r2, [r2, #8]
 80064f0:	4611      	mov	r1, r2
 80064f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f2c0 80af 	blt.w	800665a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	3304      	adds	r3, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f7fd fe71 	bl	80041f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006512:	463b      	mov	r3, r7
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff ff69 	bl	80063ec <prvSampleTimeNow>
 800651a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b09      	cmp	r3, #9
 8006520:	f200 809a 	bhi.w	8006658 <prvProcessReceivedCommands+0x1a8>
 8006524:	a201      	add	r2, pc, #4	; (adr r2, 800652c <prvProcessReceivedCommands+0x7c>)
 8006526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652a:	bf00      	nop
 800652c:	08006555 	.word	0x08006555
 8006530:	08006555 	.word	0x08006555
 8006534:	08006555 	.word	0x08006555
 8006538:	080065cd 	.word	0x080065cd
 800653c:	080065e1 	.word	0x080065e1
 8006540:	0800662f 	.word	0x0800662f
 8006544:	08006555 	.word	0x08006555
 8006548:	08006555 	.word	0x08006555
 800654c:	080065cd 	.word	0x080065cd
 8006550:	080065e1 	.word	0x080065e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	b2da      	uxtb	r2, r3
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	18d1      	adds	r1, r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006574:	f7ff ff5a 	bl	800642c <prvInsertTimerInActiveList>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d06d      	beq.n	800665a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006584:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d062      	beq.n	800665a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	441a      	add	r2, r3
 800659c:	2300      	movs	r3, #0
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	2300      	movs	r3, #0
 80065a2:	2100      	movs	r1, #0
 80065a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a6:	f7ff fdff 	bl	80061a8 <xTimerGenericCommand>
 80065aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d153      	bne.n	800665a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	b672      	cpsid	i
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	b662      	cpsie	i
 80065c6:	61bb      	str	r3, [r7, #24]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80065de:	e03c      	b.n	800665a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10c      	bne.n	800661a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	b672      	cpsid	i
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	b662      	cpsie	i
 8006614:	617b      	str	r3, [r7, #20]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	18d1      	adds	r1, r2, r3
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006628:	f7ff ff00 	bl	800642c <prvInsertTimerInActiveList>
					break;
 800662c:	e015      	b.n	800665a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d103      	bne.n	8006644 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800663c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663e:	f000 fbcb 	bl	8006dd8 <vPortFree>
 8006642:	e00a      	b.n	800665a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006656:	e000      	b.n	800665a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8006658:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800665a:	4b08      	ldr	r3, [pc, #32]	; (800667c <prvProcessReceivedCommands+0x1cc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	1d39      	adds	r1, r7, #4
 8006660:	2200      	movs	r2, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe f9a2 	bl	80049ac <xQueueReceive>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	f47f af24 	bne.w	80064b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	3730      	adds	r7, #48	; 0x30
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000ddc 	.word	0x20000ddc

08006680 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006686:	e04a      	b.n	800671e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006688:	4b2e      	ldr	r3, [pc, #184]	; (8006744 <prvSwitchTimerLists+0xc4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006692:	4b2c      	ldr	r3, [pc, #176]	; (8006744 <prvSwitchTimerLists+0xc4>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3304      	adds	r3, #4
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fd fda7 	bl	80041f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d030      	beq.n	800671e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4413      	add	r3, r2
 80066c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d90e      	bls.n	80066ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066da:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <prvSwitchTimerLists+0xc4>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3304      	adds	r3, #4
 80066e2:	4619      	mov	r1, r3
 80066e4:	4610      	mov	r0, r2
 80066e6:	f7fd fd4c 	bl	8004182 <vListInsert>
 80066ea:	e018      	b.n	800671e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066ec:	2300      	movs	r3, #0
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	2300      	movs	r3, #0
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	2100      	movs	r1, #0
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff fd56 	bl	80061a8 <xTimerGenericCommand>
 80066fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10c      	bne.n	800671e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	b672      	cpsid	i
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	b662      	cpsie	i
 8006718:	603b      	str	r3, [r7, #0]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800671e:	4b09      	ldr	r3, [pc, #36]	; (8006744 <prvSwitchTimerLists+0xc4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1af      	bne.n	8006688 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006728:	4b06      	ldr	r3, [pc, #24]	; (8006744 <prvSwitchTimerLists+0xc4>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <prvSwitchTimerLists+0xc8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a04      	ldr	r2, [pc, #16]	; (8006744 <prvSwitchTimerLists+0xc4>)
 8006734:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006736:	4a04      	ldr	r2, [pc, #16]	; (8006748 <prvSwitchTimerLists+0xc8>)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	6013      	str	r3, [r2, #0]
}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000dd4 	.word	0x20000dd4
 8006748:	20000dd8 	.word	0x20000dd8

0800674c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006752:	f000 f94b 	bl	80069ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006756:	4b15      	ldr	r3, [pc, #84]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d120      	bne.n	80067a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800675e:	4814      	ldr	r0, [pc, #80]	; (80067b0 <prvCheckForValidListAndQueue+0x64>)
 8006760:	f7fd fcbe 	bl	80040e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006764:	4813      	ldr	r0, [pc, #76]	; (80067b4 <prvCheckForValidListAndQueue+0x68>)
 8006766:	f7fd fcbb 	bl	80040e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <prvCheckForValidListAndQueue+0x6c>)
 800676c:	4a10      	ldr	r2, [pc, #64]	; (80067b0 <prvCheckForValidListAndQueue+0x64>)
 800676e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <prvCheckForValidListAndQueue+0x70>)
 8006772:	4a10      	ldr	r2, [pc, #64]	; (80067b4 <prvCheckForValidListAndQueue+0x68>)
 8006774:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006776:	2300      	movs	r3, #0
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <prvCheckForValidListAndQueue+0x74>)
 800677c:	4a11      	ldr	r2, [pc, #68]	; (80067c4 <prvCheckForValidListAndQueue+0x78>)
 800677e:	2110      	movs	r1, #16
 8006780:	200a      	movs	r0, #10
 8006782:	f7fd fdcb 	bl	800431c <xQueueGenericCreateStatic>
 8006786:	4603      	mov	r3, r0
 8006788:	4a08      	ldr	r2, [pc, #32]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 800678a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800678c:	4b07      	ldr	r3, [pc, #28]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <prvCheckForValidListAndQueue+0x60>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	490b      	ldr	r1, [pc, #44]	; (80067c8 <prvCheckForValidListAndQueue+0x7c>)
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc28 	bl	8004ff0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067a0:	f000 f958 	bl	8006a54 <vPortExitCritical>
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000ddc 	.word	0x20000ddc
 80067b0:	20000dac 	.word	0x20000dac
 80067b4:	20000dc0 	.word	0x20000dc0
 80067b8:	20000dd4 	.word	0x20000dd4
 80067bc:	20000dd8 	.word	0x20000dd8
 80067c0:	20000e88 	.word	0x20000e88
 80067c4:	20000de8 	.word	0x20000de8
 80067c8:	08007d44 	.word	0x08007d44

080067cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	3b04      	subs	r3, #4
 80067dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3b04      	subs	r3, #4
 80067ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f023 0201 	bic.w	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3b04      	subs	r3, #4
 80067fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067fc:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <pxPortInitialiseStack+0x64>)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3b14      	subs	r3, #20
 8006806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3b04      	subs	r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f06f 0202 	mvn.w	r2, #2
 800681a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3b20      	subs	r3, #32
 8006820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006822:	68fb      	ldr	r3, [r7, #12]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	08006835 	.word	0x08006835

08006834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800683e:	4b14      	ldr	r3, [pc, #80]	; (8006890 <prvTaskExitError+0x5c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d00c      	beq.n	8006862 <prvTaskExitError+0x2e>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	b672      	cpsid	i
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	b662      	cpsie	i
 800685c:	60fb      	str	r3, [r7, #12]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <prvTaskExitError+0x2c>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	b672      	cpsid	i
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	b662      	cpsie	i
 8006876:	60bb      	str	r3, [r7, #8]
}
 8006878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800687a:	bf00      	nop
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0fc      	beq.n	800687c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006882:	bf00      	nop
 8006884:	bf00      	nop
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20000010 	.word	0x20000010
	...

080068a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068a0:	4b07      	ldr	r3, [pc, #28]	; (80068c0 <pxCurrentTCBConst2>)
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	6808      	ldr	r0, [r1, #0]
 80068a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068aa:	f380 8809 	msr	PSP, r0
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f380 8811 	msr	BASEPRI, r0
 80068ba:	4770      	bx	lr
 80068bc:	f3af 8000 	nop.w

080068c0 <pxCurrentTCBConst2>:
 80068c0:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop

080068c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068c8:	4808      	ldr	r0, [pc, #32]	; (80068ec <prvPortStartFirstTask+0x24>)
 80068ca:	6800      	ldr	r0, [r0, #0]
 80068cc:	6800      	ldr	r0, [r0, #0]
 80068ce:	f380 8808 	msr	MSP, r0
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8814 	msr	CONTROL, r0
 80068da:	b662      	cpsie	i
 80068dc:	b661      	cpsie	f
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	df00      	svc	0
 80068e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ea:	bf00      	nop
 80068ec:	e000ed08 	.word	0xe000ed08

080068f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068f6:	4b37      	ldr	r3, [pc, #220]	; (80069d4 <xPortStartScheduler+0xe4>)
 80068f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	22ff      	movs	r2, #255	; 0xff
 8006906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006918:	b2da      	uxtb	r2, r3
 800691a:	4b2f      	ldr	r3, [pc, #188]	; (80069d8 <xPortStartScheduler+0xe8>)
 800691c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800691e:	4b2f      	ldr	r3, [pc, #188]	; (80069dc <xPortStartScheduler+0xec>)
 8006920:	2207      	movs	r2, #7
 8006922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006924:	e009      	b.n	800693a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006926:	4b2d      	ldr	r3, [pc, #180]	; (80069dc <xPortStartScheduler+0xec>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3b01      	subs	r3, #1
 800692c:	4a2b      	ldr	r2, [pc, #172]	; (80069dc <xPortStartScheduler+0xec>)
 800692e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	b2db      	uxtb	r3, r3
 8006938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d0ef      	beq.n	8006926 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006946:	4b25      	ldr	r3, [pc, #148]	; (80069dc <xPortStartScheduler+0xec>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1c3 0307 	rsb	r3, r3, #7
 800694e:	2b04      	cmp	r3, #4
 8006950:	d00c      	beq.n	800696c <xPortStartScheduler+0x7c>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	b672      	cpsid	i
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	b662      	cpsie	i
 8006966:	60bb      	str	r3, [r7, #8]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <xPortStartScheduler+0xec>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	4a1a      	ldr	r2, [pc, #104]	; (80069dc <xPortStartScheduler+0xec>)
 8006974:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006976:	4b19      	ldr	r3, [pc, #100]	; (80069dc <xPortStartScheduler+0xec>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800697e:	4a17      	ldr	r2, [pc, #92]	; (80069dc <xPortStartScheduler+0xec>)
 8006980:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <xPortStartScheduler+0xf0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a14      	ldr	r2, [pc, #80]	; (80069e0 <xPortStartScheduler+0xf0>)
 8006990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006994:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <xPortStartScheduler+0xf0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <xPortStartScheduler+0xf0>)
 800699c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069a2:	f000 f8dd 	bl	8006b60 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <xPortStartScheduler+0xf4>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069ac:	f000 f8fc 	bl	8006ba8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <xPortStartScheduler+0xf8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <xPortStartScheduler+0xf8>)
 80069b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069bc:	f7ff ff84 	bl	80068c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069c0:	f7fe ff38 	bl	8005834 <vTaskSwitchContext>
	prvTaskExitError();
 80069c4:	f7ff ff36 	bl	8006834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	e000e400 	.word	0xe000e400
 80069d8:	20000ed8 	.word	0x20000ed8
 80069dc:	20000edc 	.word	0x20000edc
 80069e0:	e000ed20 	.word	0xe000ed20
 80069e4:	20000010 	.word	0x20000010
 80069e8:	e000ef34 	.word	0xe000ef34

080069ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	b672      	cpsid	i
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	b662      	cpsie	i
 8006a06:	607b      	str	r3, [r7, #4]
}
 8006a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a0a:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <vPortEnterCritical+0x60>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <vPortEnterCritical+0x60>)
 8006a12:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <vPortEnterCritical+0x60>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d111      	bne.n	8006a40 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <vPortEnterCritical+0x64>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00c      	beq.n	8006a40 <vPortEnterCritical+0x54>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	b672      	cpsid	i
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	b662      	cpsie	i
 8006a3a:	603b      	str	r3, [r7, #0]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <vPortEnterCritical+0x52>
	}
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	20000010 	.word	0x20000010
 8006a50:	e000ed04 	.word	0xe000ed04

08006a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <vPortExitCritical+0x54>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10c      	bne.n	8006a7c <vPortExitCritical+0x28>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	607b      	str	r3, [r7, #4]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <vPortExitCritical+0x54>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <vPortExitCritical+0x54>)
 8006a84:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a86:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <vPortExitCritical+0x54>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d105      	bne.n	8006a9a <vPortExitCritical+0x46>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f383 8811 	msr	BASEPRI, r3
}
 8006a98:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	20000010 	.word	0x20000010
 8006aac:	00000000 	.word	0x00000000

08006ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ab0:	f3ef 8009 	mrs	r0, PSP
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	4b15      	ldr	r3, [pc, #84]	; (8006b10 <pxCurrentTCBConst>)
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	f01e 0f10 	tst.w	lr, #16
 8006ac0:	bf08      	it	eq
 8006ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aca:	6010      	str	r0, [r2, #0]
 8006acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ad4:	b672      	cpsid	i
 8006ad6:	f380 8811 	msr	BASEPRI, r0
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	b662      	cpsie	i
 8006ae4:	f7fe fea6 	bl	8005834 <vTaskSwitchContext>
 8006ae8:	f04f 0000 	mov.w	r0, #0
 8006aec:	f380 8811 	msr	BASEPRI, r0
 8006af0:	bc09      	pop	{r0, r3}
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	6808      	ldr	r0, [r1, #0]
 8006af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	f01e 0f10 	tst.w	lr, #16
 8006afe:	bf08      	it	eq
 8006b00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b04:	f380 8809 	msr	PSP, r0
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop

08006b10 <pxCurrentTCBConst>:
 8006b10:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop

08006b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	607b      	str	r3, [r7, #4]
}
 8006b34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b36:	f7fe fdc1 	bl	80056bc <xTaskIncrementTick>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b40:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <xPortSysTickHandler+0x44>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f383 8811 	msr	BASEPRI, r3
}
 8006b52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	e000ed04 	.word	0xe000ed04

08006b60 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <vPortSetupTimerInterrupt+0x34>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <vPortSetupTimerInterrupt+0x38>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <vPortSetupTimerInterrupt+0x3c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <vPortSetupTimerInterrupt+0x40>)
 8006b76:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7a:	099b      	lsrs	r3, r3, #6
 8006b7c:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <vPortSetupTimerInterrupt+0x44>)
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b82:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <vPortSetupTimerInterrupt+0x34>)
 8006b84:	2207      	movs	r2, #7
 8006b86:	601a      	str	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	e000e010 	.word	0xe000e010
 8006b98:	e000e018 	.word	0xe000e018
 8006b9c:	20000004 	.word	0x20000004
 8006ba0:	10624dd3 	.word	0x10624dd3
 8006ba4:	e000e014 	.word	0xe000e014

08006ba8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ba8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bb8 <vPortEnableVFP+0x10>
 8006bac:	6801      	ldr	r1, [r0, #0]
 8006bae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bb2:	6001      	str	r1, [r0, #0]
 8006bb4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bb6:	bf00      	nop
 8006bb8:	e000ed88 	.word	0xe000ed88

08006bbc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bc2:	f3ef 8305 	mrs	r3, IPSR
 8006bc6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b0f      	cmp	r3, #15
 8006bcc:	d916      	bls.n	8006bfc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bce:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <vPortValidateInterruptPriority+0x78>)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <vPortValidateInterruptPriority+0x7c>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	7afa      	ldrb	r2, [r7, #11]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d20c      	bcs.n	8006bfc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	b672      	cpsid	i
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	b662      	cpsie	i
 8006bf6:	607b      	str	r3, [r7, #4]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <vPortValidateInterruptPriority+0x80>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c04:	4b0e      	ldr	r3, [pc, #56]	; (8006c40 <vPortValidateInterruptPriority+0x84>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d90c      	bls.n	8006c26 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	b672      	cpsid	i
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	b662      	cpsie	i
 8006c20:	603b      	str	r3, [r7, #0]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <vPortValidateInterruptPriority+0x68>
	}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	e000e3f0 	.word	0xe000e3f0
 8006c38:	20000ed8 	.word	0x20000ed8
 8006c3c:	e000ed0c 	.word	0xe000ed0c
 8006c40:	20000edc 	.word	0x20000edc

08006c44 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b08a      	sub	sp, #40	; 0x28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c50:	f7fe fc76 	bl	8005540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c54:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <pvPortMalloc+0x180>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c5c:	f000 f91a 	bl	8006e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c60:	4b59      	ldr	r3, [pc, #356]	; (8006dc8 <pvPortMalloc+0x184>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4013      	ands	r3, r2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 8092 	bne.w	8006d92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01f      	beq.n	8006cb4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006c74:	2208      	movs	r2, #8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4413      	add	r3, r2
 8006c7a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f023 0307 	bic.w	r3, r3, #7
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f003 0307 	and.w	r3, r3, #7
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00c      	beq.n	8006cb4 <pvPortMalloc+0x70>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	b672      	cpsid	i
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	b662      	cpsie	i
 8006cae:	617b      	str	r3, [r7, #20]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d06b      	beq.n	8006d92 <pvPortMalloc+0x14e>
 8006cba:	4b44      	ldr	r3, [pc, #272]	; (8006dcc <pvPortMalloc+0x188>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d866      	bhi.n	8006d92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cc4:	4b42      	ldr	r3, [pc, #264]	; (8006dd0 <pvPortMalloc+0x18c>)
 8006cc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cc8:	4b41      	ldr	r3, [pc, #260]	; (8006dd0 <pvPortMalloc+0x18c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cce:	e004      	b.n	8006cda <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d903      	bls.n	8006cec <pvPortMalloc+0xa8>
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f1      	bne.n	8006cd0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cec:	4b35      	ldr	r3, [pc, #212]	; (8006dc4 <pvPortMalloc+0x180>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d04d      	beq.n	8006d92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	1ad2      	subs	r2, r2, r3
 8006d10:	2308      	movs	r3, #8
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d921      	bls.n	8006d5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <pvPortMalloc+0x100>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	b672      	cpsid	i
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	b662      	cpsie	i
 8006d3e:	613b      	str	r3, [r7, #16]
}
 8006d40:	bf00      	nop
 8006d42:	e7fe      	b.n	8006d42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d56:	69b8      	ldr	r0, [r7, #24]
 8006d58:	f000 f8fe 	bl	8006f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <pvPortMalloc+0x188>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <pvPortMalloc+0x188>)
 8006d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d6a:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <pvPortMalloc+0x188>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <pvPortMalloc+0x190>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d203      	bcs.n	8006d7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d76:	4b15      	ldr	r3, [pc, #84]	; (8006dcc <pvPortMalloc+0x188>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a16      	ldr	r2, [pc, #88]	; (8006dd4 <pvPortMalloc+0x190>)
 8006d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <pvPortMalloc+0x184>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d92:	f7fe fbe3 	bl	800555c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <pvPortMalloc+0x176>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da4:	b672      	cpsid	i
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	b662      	cpsie	i
 8006db4:	60fb      	str	r3, [r7, #12]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <pvPortMalloc+0x174>
	return pvReturn;
 8006dba:	69fb      	ldr	r3, [r7, #28]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3728      	adds	r7, #40	; 0x28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20004ae8 	.word	0x20004ae8
 8006dc8:	20004af4 	.word	0x20004af4
 8006dcc:	20004aec 	.word	0x20004aec
 8006dd0:	20004ae0 	.word	0x20004ae0
 8006dd4:	20004af0 	.word	0x20004af0

08006dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d04c      	beq.n	8006e84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dea:	2308      	movs	r3, #8
 8006dec:	425b      	negs	r3, r3
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	4413      	add	r3, r2
 8006df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <vPortFree+0xb4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <vPortFree+0x48>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	b672      	cpsid	i
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	b662      	cpsie	i
 8006e1a:	60fb      	str	r3, [r7, #12]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00c      	beq.n	8006e42 <vPortFree+0x6a>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	b672      	cpsid	i
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	b662      	cpsie	i
 8006e3c:	60bb      	str	r3, [r7, #8]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <vPortFree+0xb4>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d115      	bne.n	8006e84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <vPortFree+0xb4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	401a      	ands	r2, r3
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e68:	f7fe fb6a 	bl	8005540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <vPortFree+0xb8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4413      	add	r3, r2
 8006e76:	4a06      	ldr	r2, [pc, #24]	; (8006e90 <vPortFree+0xb8>)
 8006e78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f000 f86c 	bl	8006f58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e80:	f7fe fb6c 	bl	800555c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20004af4 	.word	0x20004af4
 8006e90:	20004aec 	.word	0x20004aec

08006e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ea0:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <prvHeapInit+0xac>)
 8006ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00c      	beq.n	8006ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3307      	adds	r3, #7
 8006eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0307 	bic.w	r3, r3, #7
 8006eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <prvHeapInit+0xac>)
 8006ec4:	4413      	add	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ecc:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <prvHeapInit+0xb0>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <prvHeapInit+0xb0>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	4413      	add	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0307 	bic.w	r3, r3, #7
 8006eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a15      	ldr	r2, [pc, #84]	; (8006f48 <prvHeapInit+0xb4>)
 8006ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <prvHeapInit+0xb4>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <prvHeapInit+0xb4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	1ad2      	subs	r2, r2, r3
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f14:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <prvHeapInit+0xb4>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	4a0a      	ldr	r2, [pc, #40]	; (8006f4c <prvHeapInit+0xb8>)
 8006f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a09      	ldr	r2, [pc, #36]	; (8006f50 <prvHeapInit+0xbc>)
 8006f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <prvHeapInit+0xc0>)
 8006f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f32:	601a      	str	r2, [r3, #0]
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	20000ee0 	.word	0x20000ee0
 8006f44:	20004ae0 	.word	0x20004ae0
 8006f48:	20004ae8 	.word	0x20004ae8
 8006f4c:	20004af0 	.word	0x20004af0
 8006f50:	20004aec 	.word	0x20004aec
 8006f54:	20004af4 	.word	0x20004af4

08006f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f60:	4b28      	ldr	r3, [pc, #160]	; (8007004 <prvInsertBlockIntoFreeList+0xac>)
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	e002      	b.n	8006f6c <prvInsertBlockIntoFreeList+0x14>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d8f7      	bhi.n	8006f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4413      	add	r3, r2
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d108      	bne.n	8006f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d118      	bne.n	8006fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d00d      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	441a      	add	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e008      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <prvInsertBlockIntoFreeList+0xb0>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e003      	b.n	8006fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d002      	beq.n	8006ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20004ae0 	.word	0x20004ae0
 8007008:	20004ae8 	.word	0x20004ae8

0800700c <sniprintf>:
 800700c:	b40c      	push	{r2, r3}
 800700e:	b530      	push	{r4, r5, lr}
 8007010:	4b17      	ldr	r3, [pc, #92]	; (8007070 <sniprintf+0x64>)
 8007012:	1e0c      	subs	r4, r1, #0
 8007014:	681d      	ldr	r5, [r3, #0]
 8007016:	b09d      	sub	sp, #116	; 0x74
 8007018:	da08      	bge.n	800702c <sniprintf+0x20>
 800701a:	238b      	movs	r3, #139	; 0x8b
 800701c:	602b      	str	r3, [r5, #0]
 800701e:	f04f 30ff 	mov.w	r0, #4294967295
 8007022:	b01d      	add	sp, #116	; 0x74
 8007024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007028:	b002      	add	sp, #8
 800702a:	4770      	bx	lr
 800702c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007030:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007034:	bf14      	ite	ne
 8007036:	f104 33ff 	addne.w	r3, r4, #4294967295
 800703a:	4623      	moveq	r3, r4
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	9307      	str	r3, [sp, #28]
 8007040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007044:	9002      	str	r0, [sp, #8]
 8007046:	9006      	str	r0, [sp, #24]
 8007048:	f8ad 3016 	strh.w	r3, [sp, #22]
 800704c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800704e:	ab21      	add	r3, sp, #132	; 0x84
 8007050:	a902      	add	r1, sp, #8
 8007052:	4628      	mov	r0, r5
 8007054:	9301      	str	r3, [sp, #4]
 8007056:	f000 f9ef 	bl	8007438 <_svfiprintf_r>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	bfbc      	itt	lt
 800705e:	238b      	movlt	r3, #139	; 0x8b
 8007060:	602b      	strlt	r3, [r5, #0]
 8007062:	2c00      	cmp	r4, #0
 8007064:	d0dd      	beq.n	8007022 <sniprintf+0x16>
 8007066:	9b02      	ldr	r3, [sp, #8]
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	e7d9      	b.n	8007022 <sniprintf+0x16>
 800706e:	bf00      	nop
 8007070:	20000060 	.word	0x20000060

08007074 <_vsniprintf_r>:
 8007074:	b530      	push	{r4, r5, lr}
 8007076:	4614      	mov	r4, r2
 8007078:	2c00      	cmp	r4, #0
 800707a:	b09b      	sub	sp, #108	; 0x6c
 800707c:	4605      	mov	r5, r0
 800707e:	461a      	mov	r2, r3
 8007080:	da05      	bge.n	800708e <_vsniprintf_r+0x1a>
 8007082:	238b      	movs	r3, #139	; 0x8b
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	f04f 30ff 	mov.w	r0, #4294967295
 800708a:	b01b      	add	sp, #108	; 0x6c
 800708c:	bd30      	pop	{r4, r5, pc}
 800708e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007092:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007096:	bf14      	ite	ne
 8007098:	f104 33ff 	addne.w	r3, r4, #4294967295
 800709c:	4623      	moveq	r3, r4
 800709e:	9302      	str	r3, [sp, #8]
 80070a0:	9305      	str	r3, [sp, #20]
 80070a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070a6:	9100      	str	r1, [sp, #0]
 80070a8:	9104      	str	r1, [sp, #16]
 80070aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80070ae:	4669      	mov	r1, sp
 80070b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80070b2:	f000 f9c1 	bl	8007438 <_svfiprintf_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	bfbc      	itt	lt
 80070ba:	238b      	movlt	r3, #139	; 0x8b
 80070bc:	602b      	strlt	r3, [r5, #0]
 80070be:	2c00      	cmp	r4, #0
 80070c0:	d0e3      	beq.n	800708a <_vsniprintf_r+0x16>
 80070c2:	9b00      	ldr	r3, [sp, #0]
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e7df      	b.n	800708a <_vsniprintf_r+0x16>
	...

080070cc <vsniprintf>:
 80070cc:	b507      	push	{r0, r1, r2, lr}
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	460a      	mov	r2, r1
 80070d4:	4601      	mov	r1, r0
 80070d6:	4803      	ldr	r0, [pc, #12]	; (80070e4 <vsniprintf+0x18>)
 80070d8:	6800      	ldr	r0, [r0, #0]
 80070da:	f7ff ffcb 	bl	8007074 <_vsniprintf_r>
 80070de:	b003      	add	sp, #12
 80070e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80070e4:	20000060 	.word	0x20000060

080070e8 <memset>:
 80070e8:	4402      	add	r2, r0
 80070ea:	4603      	mov	r3, r0
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d100      	bne.n	80070f2 <memset+0xa>
 80070f0:	4770      	bx	lr
 80070f2:	f803 1b01 	strb.w	r1, [r3], #1
 80070f6:	e7f9      	b.n	80070ec <memset+0x4>

080070f8 <strncpy>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	3901      	subs	r1, #1
 80070fc:	4603      	mov	r3, r0
 80070fe:	b132      	cbz	r2, 800710e <strncpy+0x16>
 8007100:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007104:	f803 4b01 	strb.w	r4, [r3], #1
 8007108:	3a01      	subs	r2, #1
 800710a:	2c00      	cmp	r4, #0
 800710c:	d1f7      	bne.n	80070fe <strncpy+0x6>
 800710e:	441a      	add	r2, r3
 8007110:	2100      	movs	r1, #0
 8007112:	4293      	cmp	r3, r2
 8007114:	d100      	bne.n	8007118 <strncpy+0x20>
 8007116:	bd10      	pop	{r4, pc}
 8007118:	f803 1b01 	strb.w	r1, [r3], #1
 800711c:	e7f9      	b.n	8007112 <strncpy+0x1a>
	...

08007120 <__errno>:
 8007120:	4b01      	ldr	r3, [pc, #4]	; (8007128 <__errno+0x8>)
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000060 	.word	0x20000060

0800712c <__libc_init_array>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	4d0d      	ldr	r5, [pc, #52]	; (8007164 <__libc_init_array+0x38>)
 8007130:	4c0d      	ldr	r4, [pc, #52]	; (8007168 <__libc_init_array+0x3c>)
 8007132:	1b64      	subs	r4, r4, r5
 8007134:	10a4      	asrs	r4, r4, #2
 8007136:	2600      	movs	r6, #0
 8007138:	42a6      	cmp	r6, r4
 800713a:	d109      	bne.n	8007150 <__libc_init_array+0x24>
 800713c:	4d0b      	ldr	r5, [pc, #44]	; (800716c <__libc_init_array+0x40>)
 800713e:	4c0c      	ldr	r4, [pc, #48]	; (8007170 <__libc_init_array+0x44>)
 8007140:	f000 fc6a 	bl	8007a18 <_init>
 8007144:	1b64      	subs	r4, r4, r5
 8007146:	10a4      	asrs	r4, r4, #2
 8007148:	2600      	movs	r6, #0
 800714a:	42a6      	cmp	r6, r4
 800714c:	d105      	bne.n	800715a <__libc_init_array+0x2e>
 800714e:	bd70      	pop	{r4, r5, r6, pc}
 8007150:	f855 3b04 	ldr.w	r3, [r5], #4
 8007154:	4798      	blx	r3
 8007156:	3601      	adds	r6, #1
 8007158:	e7ee      	b.n	8007138 <__libc_init_array+0xc>
 800715a:	f855 3b04 	ldr.w	r3, [r5], #4
 800715e:	4798      	blx	r3
 8007160:	3601      	adds	r6, #1
 8007162:	e7f2      	b.n	800714a <__libc_init_array+0x1e>
 8007164:	08007e40 	.word	0x08007e40
 8007168:	08007e40 	.word	0x08007e40
 800716c:	08007e40 	.word	0x08007e40
 8007170:	08007e44 	.word	0x08007e44

08007174 <__retarget_lock_acquire_recursive>:
 8007174:	4770      	bx	lr

08007176 <__retarget_lock_release_recursive>:
 8007176:	4770      	bx	lr

08007178 <memcpy>:
 8007178:	440a      	add	r2, r1
 800717a:	4291      	cmp	r1, r2
 800717c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007180:	d100      	bne.n	8007184 <memcpy+0xc>
 8007182:	4770      	bx	lr
 8007184:	b510      	push	{r4, lr}
 8007186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718e:	4291      	cmp	r1, r2
 8007190:	d1f9      	bne.n	8007186 <memcpy+0xe>
 8007192:	bd10      	pop	{r4, pc}

08007194 <_free_r>:
 8007194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007196:	2900      	cmp	r1, #0
 8007198:	d044      	beq.n	8007224 <_free_r+0x90>
 800719a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800719e:	9001      	str	r0, [sp, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f1a1 0404 	sub.w	r4, r1, #4
 80071a6:	bfb8      	it	lt
 80071a8:	18e4      	addlt	r4, r4, r3
 80071aa:	f000 f8df 	bl	800736c <__malloc_lock>
 80071ae:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <_free_r+0x94>)
 80071b0:	9801      	ldr	r0, [sp, #4]
 80071b2:	6813      	ldr	r3, [r2, #0]
 80071b4:	b933      	cbnz	r3, 80071c4 <_free_r+0x30>
 80071b6:	6063      	str	r3, [r4, #4]
 80071b8:	6014      	str	r4, [r2, #0]
 80071ba:	b003      	add	sp, #12
 80071bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071c0:	f000 b8da 	b.w	8007378 <__malloc_unlock>
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	d908      	bls.n	80071da <_free_r+0x46>
 80071c8:	6825      	ldr	r5, [r4, #0]
 80071ca:	1961      	adds	r1, r4, r5
 80071cc:	428b      	cmp	r3, r1
 80071ce:	bf01      	itttt	eq
 80071d0:	6819      	ldreq	r1, [r3, #0]
 80071d2:	685b      	ldreq	r3, [r3, #4]
 80071d4:	1949      	addeq	r1, r1, r5
 80071d6:	6021      	streq	r1, [r4, #0]
 80071d8:	e7ed      	b.n	80071b6 <_free_r+0x22>
 80071da:	461a      	mov	r2, r3
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	b10b      	cbz	r3, 80071e4 <_free_r+0x50>
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d9fa      	bls.n	80071da <_free_r+0x46>
 80071e4:	6811      	ldr	r1, [r2, #0]
 80071e6:	1855      	adds	r5, r2, r1
 80071e8:	42a5      	cmp	r5, r4
 80071ea:	d10b      	bne.n	8007204 <_free_r+0x70>
 80071ec:	6824      	ldr	r4, [r4, #0]
 80071ee:	4421      	add	r1, r4
 80071f0:	1854      	adds	r4, r2, r1
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	6011      	str	r1, [r2, #0]
 80071f6:	d1e0      	bne.n	80071ba <_free_r+0x26>
 80071f8:	681c      	ldr	r4, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	6053      	str	r3, [r2, #4]
 80071fe:	440c      	add	r4, r1
 8007200:	6014      	str	r4, [r2, #0]
 8007202:	e7da      	b.n	80071ba <_free_r+0x26>
 8007204:	d902      	bls.n	800720c <_free_r+0x78>
 8007206:	230c      	movs	r3, #12
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	e7d6      	b.n	80071ba <_free_r+0x26>
 800720c:	6825      	ldr	r5, [r4, #0]
 800720e:	1961      	adds	r1, r4, r5
 8007210:	428b      	cmp	r3, r1
 8007212:	bf04      	itt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	6063      	str	r3, [r4, #4]
 800721a:	bf04      	itt	eq
 800721c:	1949      	addeq	r1, r1, r5
 800721e:	6021      	streq	r1, [r4, #0]
 8007220:	6054      	str	r4, [r2, #4]
 8007222:	e7ca      	b.n	80071ba <_free_r+0x26>
 8007224:	b003      	add	sp, #12
 8007226:	bd30      	pop	{r4, r5, pc}
 8007228:	20004c38 	.word	0x20004c38

0800722c <sbrk_aligned>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	4e0e      	ldr	r6, [pc, #56]	; (8007268 <sbrk_aligned+0x3c>)
 8007230:	460c      	mov	r4, r1
 8007232:	6831      	ldr	r1, [r6, #0]
 8007234:	4605      	mov	r5, r0
 8007236:	b911      	cbnz	r1, 800723e <sbrk_aligned+0x12>
 8007238:	f000 fba6 	bl	8007988 <_sbrk_r>
 800723c:	6030      	str	r0, [r6, #0]
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f000 fba1 	bl	8007988 <_sbrk_r>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	d00a      	beq.n	8007260 <sbrk_aligned+0x34>
 800724a:	1cc4      	adds	r4, r0, #3
 800724c:	f024 0403 	bic.w	r4, r4, #3
 8007250:	42a0      	cmp	r0, r4
 8007252:	d007      	beq.n	8007264 <sbrk_aligned+0x38>
 8007254:	1a21      	subs	r1, r4, r0
 8007256:	4628      	mov	r0, r5
 8007258:	f000 fb96 	bl	8007988 <_sbrk_r>
 800725c:	3001      	adds	r0, #1
 800725e:	d101      	bne.n	8007264 <sbrk_aligned+0x38>
 8007260:	f04f 34ff 	mov.w	r4, #4294967295
 8007264:	4620      	mov	r0, r4
 8007266:	bd70      	pop	{r4, r5, r6, pc}
 8007268:	20004c3c 	.word	0x20004c3c

0800726c <_malloc_r>:
 800726c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007270:	1ccd      	adds	r5, r1, #3
 8007272:	f025 0503 	bic.w	r5, r5, #3
 8007276:	3508      	adds	r5, #8
 8007278:	2d0c      	cmp	r5, #12
 800727a:	bf38      	it	cc
 800727c:	250c      	movcc	r5, #12
 800727e:	2d00      	cmp	r5, #0
 8007280:	4607      	mov	r7, r0
 8007282:	db01      	blt.n	8007288 <_malloc_r+0x1c>
 8007284:	42a9      	cmp	r1, r5
 8007286:	d905      	bls.n	8007294 <_malloc_r+0x28>
 8007288:	230c      	movs	r3, #12
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	2600      	movs	r6, #0
 800728e:	4630      	mov	r0, r6
 8007290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007294:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007368 <_malloc_r+0xfc>
 8007298:	f000 f868 	bl	800736c <__malloc_lock>
 800729c:	f8d8 3000 	ldr.w	r3, [r8]
 80072a0:	461c      	mov	r4, r3
 80072a2:	bb5c      	cbnz	r4, 80072fc <_malloc_r+0x90>
 80072a4:	4629      	mov	r1, r5
 80072a6:	4638      	mov	r0, r7
 80072a8:	f7ff ffc0 	bl	800722c <sbrk_aligned>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	4604      	mov	r4, r0
 80072b0:	d155      	bne.n	800735e <_malloc_r+0xf2>
 80072b2:	f8d8 4000 	ldr.w	r4, [r8]
 80072b6:	4626      	mov	r6, r4
 80072b8:	2e00      	cmp	r6, #0
 80072ba:	d145      	bne.n	8007348 <_malloc_r+0xdc>
 80072bc:	2c00      	cmp	r4, #0
 80072be:	d048      	beq.n	8007352 <_malloc_r+0xe6>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	4631      	mov	r1, r6
 80072c4:	4638      	mov	r0, r7
 80072c6:	eb04 0903 	add.w	r9, r4, r3
 80072ca:	f000 fb5d 	bl	8007988 <_sbrk_r>
 80072ce:	4581      	cmp	r9, r0
 80072d0:	d13f      	bne.n	8007352 <_malloc_r+0xe6>
 80072d2:	6821      	ldr	r1, [r4, #0]
 80072d4:	1a6d      	subs	r5, r5, r1
 80072d6:	4629      	mov	r1, r5
 80072d8:	4638      	mov	r0, r7
 80072da:	f7ff ffa7 	bl	800722c <sbrk_aligned>
 80072de:	3001      	adds	r0, #1
 80072e0:	d037      	beq.n	8007352 <_malloc_r+0xe6>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	442b      	add	r3, r5
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	f8d8 3000 	ldr.w	r3, [r8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d038      	beq.n	8007362 <_malloc_r+0xf6>
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	42a2      	cmp	r2, r4
 80072f4:	d12b      	bne.n	800734e <_malloc_r+0xe2>
 80072f6:	2200      	movs	r2, #0
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	e00f      	b.n	800731c <_malloc_r+0xb0>
 80072fc:	6822      	ldr	r2, [r4, #0]
 80072fe:	1b52      	subs	r2, r2, r5
 8007300:	d41f      	bmi.n	8007342 <_malloc_r+0xd6>
 8007302:	2a0b      	cmp	r2, #11
 8007304:	d917      	bls.n	8007336 <_malloc_r+0xca>
 8007306:	1961      	adds	r1, r4, r5
 8007308:	42a3      	cmp	r3, r4
 800730a:	6025      	str	r5, [r4, #0]
 800730c:	bf18      	it	ne
 800730e:	6059      	strne	r1, [r3, #4]
 8007310:	6863      	ldr	r3, [r4, #4]
 8007312:	bf08      	it	eq
 8007314:	f8c8 1000 	streq.w	r1, [r8]
 8007318:	5162      	str	r2, [r4, r5]
 800731a:	604b      	str	r3, [r1, #4]
 800731c:	4638      	mov	r0, r7
 800731e:	f104 060b 	add.w	r6, r4, #11
 8007322:	f000 f829 	bl	8007378 <__malloc_unlock>
 8007326:	f026 0607 	bic.w	r6, r6, #7
 800732a:	1d23      	adds	r3, r4, #4
 800732c:	1af2      	subs	r2, r6, r3
 800732e:	d0ae      	beq.n	800728e <_malloc_r+0x22>
 8007330:	1b9b      	subs	r3, r3, r6
 8007332:	50a3      	str	r3, [r4, r2]
 8007334:	e7ab      	b.n	800728e <_malloc_r+0x22>
 8007336:	42a3      	cmp	r3, r4
 8007338:	6862      	ldr	r2, [r4, #4]
 800733a:	d1dd      	bne.n	80072f8 <_malloc_r+0x8c>
 800733c:	f8c8 2000 	str.w	r2, [r8]
 8007340:	e7ec      	b.n	800731c <_malloc_r+0xb0>
 8007342:	4623      	mov	r3, r4
 8007344:	6864      	ldr	r4, [r4, #4]
 8007346:	e7ac      	b.n	80072a2 <_malloc_r+0x36>
 8007348:	4634      	mov	r4, r6
 800734a:	6876      	ldr	r6, [r6, #4]
 800734c:	e7b4      	b.n	80072b8 <_malloc_r+0x4c>
 800734e:	4613      	mov	r3, r2
 8007350:	e7cc      	b.n	80072ec <_malloc_r+0x80>
 8007352:	230c      	movs	r3, #12
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	4638      	mov	r0, r7
 8007358:	f000 f80e 	bl	8007378 <__malloc_unlock>
 800735c:	e797      	b.n	800728e <_malloc_r+0x22>
 800735e:	6025      	str	r5, [r4, #0]
 8007360:	e7dc      	b.n	800731c <_malloc_r+0xb0>
 8007362:	605b      	str	r3, [r3, #4]
 8007364:	deff      	udf	#255	; 0xff
 8007366:	bf00      	nop
 8007368:	20004c38 	.word	0x20004c38

0800736c <__malloc_lock>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__malloc_lock+0x8>)
 800736e:	f7ff bf01 	b.w	8007174 <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	20004c34 	.word	0x20004c34

08007378 <__malloc_unlock>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__malloc_unlock+0x8>)
 800737a:	f7ff befc 	b.w	8007176 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	20004c34 	.word	0x20004c34

08007384 <__ssputs_r>:
 8007384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	688e      	ldr	r6, [r1, #8]
 800738a:	461f      	mov	r7, r3
 800738c:	42be      	cmp	r6, r7
 800738e:	680b      	ldr	r3, [r1, #0]
 8007390:	4682      	mov	sl, r0
 8007392:	460c      	mov	r4, r1
 8007394:	4690      	mov	r8, r2
 8007396:	d82c      	bhi.n	80073f2 <__ssputs_r+0x6e>
 8007398:	898a      	ldrh	r2, [r1, #12]
 800739a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800739e:	d026      	beq.n	80073ee <__ssputs_r+0x6a>
 80073a0:	6965      	ldr	r5, [r4, #20]
 80073a2:	6909      	ldr	r1, [r1, #16]
 80073a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073a8:	eba3 0901 	sub.w	r9, r3, r1
 80073ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073b0:	1c7b      	adds	r3, r7, #1
 80073b2:	444b      	add	r3, r9
 80073b4:	106d      	asrs	r5, r5, #1
 80073b6:	429d      	cmp	r5, r3
 80073b8:	bf38      	it	cc
 80073ba:	461d      	movcc	r5, r3
 80073bc:	0553      	lsls	r3, r2, #21
 80073be:	d527      	bpl.n	8007410 <__ssputs_r+0x8c>
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7ff ff53 	bl	800726c <_malloc_r>
 80073c6:	4606      	mov	r6, r0
 80073c8:	b360      	cbz	r0, 8007424 <__ssputs_r+0xa0>
 80073ca:	6921      	ldr	r1, [r4, #16]
 80073cc:	464a      	mov	r2, r9
 80073ce:	f7ff fed3 	bl	8007178 <memcpy>
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	6126      	str	r6, [r4, #16]
 80073e0:	6165      	str	r5, [r4, #20]
 80073e2:	444e      	add	r6, r9
 80073e4:	eba5 0509 	sub.w	r5, r5, r9
 80073e8:	6026      	str	r6, [r4, #0]
 80073ea:	60a5      	str	r5, [r4, #8]
 80073ec:	463e      	mov	r6, r7
 80073ee:	42be      	cmp	r6, r7
 80073f0:	d900      	bls.n	80073f4 <__ssputs_r+0x70>
 80073f2:	463e      	mov	r6, r7
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	4632      	mov	r2, r6
 80073f8:	4641      	mov	r1, r8
 80073fa:	f000 faab 	bl	8007954 <memmove>
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	1b9b      	subs	r3, r3, r6
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	4433      	add	r3, r6
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	2000      	movs	r0, #0
 800740c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007410:	462a      	mov	r2, r5
 8007412:	f000 fac9 	bl	80079a8 <_realloc_r>
 8007416:	4606      	mov	r6, r0
 8007418:	2800      	cmp	r0, #0
 800741a:	d1e0      	bne.n	80073de <__ssputs_r+0x5a>
 800741c:	6921      	ldr	r1, [r4, #16]
 800741e:	4650      	mov	r0, sl
 8007420:	f7ff feb8 	bl	8007194 <_free_r>
 8007424:	230c      	movs	r3, #12
 8007426:	f8ca 3000 	str.w	r3, [sl]
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007430:	81a3      	strh	r3, [r4, #12]
 8007432:	f04f 30ff 	mov.w	r0, #4294967295
 8007436:	e7e9      	b.n	800740c <__ssputs_r+0x88>

08007438 <_svfiprintf_r>:
 8007438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743c:	4698      	mov	r8, r3
 800743e:	898b      	ldrh	r3, [r1, #12]
 8007440:	061b      	lsls	r3, r3, #24
 8007442:	b09d      	sub	sp, #116	; 0x74
 8007444:	4607      	mov	r7, r0
 8007446:	460d      	mov	r5, r1
 8007448:	4614      	mov	r4, r2
 800744a:	d50e      	bpl.n	800746a <_svfiprintf_r+0x32>
 800744c:	690b      	ldr	r3, [r1, #16]
 800744e:	b963      	cbnz	r3, 800746a <_svfiprintf_r+0x32>
 8007450:	2140      	movs	r1, #64	; 0x40
 8007452:	f7ff ff0b 	bl	800726c <_malloc_r>
 8007456:	6028      	str	r0, [r5, #0]
 8007458:	6128      	str	r0, [r5, #16]
 800745a:	b920      	cbnz	r0, 8007466 <_svfiprintf_r+0x2e>
 800745c:	230c      	movs	r3, #12
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	e0d0      	b.n	8007608 <_svfiprintf_r+0x1d0>
 8007466:	2340      	movs	r3, #64	; 0x40
 8007468:	616b      	str	r3, [r5, #20]
 800746a:	2300      	movs	r3, #0
 800746c:	9309      	str	r3, [sp, #36]	; 0x24
 800746e:	2320      	movs	r3, #32
 8007470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007474:	f8cd 800c 	str.w	r8, [sp, #12]
 8007478:	2330      	movs	r3, #48	; 0x30
 800747a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007620 <_svfiprintf_r+0x1e8>
 800747e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007482:	f04f 0901 	mov.w	r9, #1
 8007486:	4623      	mov	r3, r4
 8007488:	469a      	mov	sl, r3
 800748a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800748e:	b10a      	cbz	r2, 8007494 <_svfiprintf_r+0x5c>
 8007490:	2a25      	cmp	r2, #37	; 0x25
 8007492:	d1f9      	bne.n	8007488 <_svfiprintf_r+0x50>
 8007494:	ebba 0b04 	subs.w	fp, sl, r4
 8007498:	d00b      	beq.n	80074b2 <_svfiprintf_r+0x7a>
 800749a:	465b      	mov	r3, fp
 800749c:	4622      	mov	r2, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	4638      	mov	r0, r7
 80074a2:	f7ff ff6f 	bl	8007384 <__ssputs_r>
 80074a6:	3001      	adds	r0, #1
 80074a8:	f000 80a9 	beq.w	80075fe <_svfiprintf_r+0x1c6>
 80074ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074ae:	445a      	add	r2, fp
 80074b0:	9209      	str	r2, [sp, #36]	; 0x24
 80074b2:	f89a 3000 	ldrb.w	r3, [sl]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 80a1 	beq.w	80075fe <_svfiprintf_r+0x1c6>
 80074bc:	2300      	movs	r3, #0
 80074be:	f04f 32ff 	mov.w	r2, #4294967295
 80074c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c6:	f10a 0a01 	add.w	sl, sl, #1
 80074ca:	9304      	str	r3, [sp, #16]
 80074cc:	9307      	str	r3, [sp, #28]
 80074ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074d2:	931a      	str	r3, [sp, #104]	; 0x68
 80074d4:	4654      	mov	r4, sl
 80074d6:	2205      	movs	r2, #5
 80074d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074dc:	4850      	ldr	r0, [pc, #320]	; (8007620 <_svfiprintf_r+0x1e8>)
 80074de:	f7f8 feaf 	bl	8000240 <memchr>
 80074e2:	9a04      	ldr	r2, [sp, #16]
 80074e4:	b9d8      	cbnz	r0, 800751e <_svfiprintf_r+0xe6>
 80074e6:	06d0      	lsls	r0, r2, #27
 80074e8:	bf44      	itt	mi
 80074ea:	2320      	movmi	r3, #32
 80074ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074f0:	0711      	lsls	r1, r2, #28
 80074f2:	bf44      	itt	mi
 80074f4:	232b      	movmi	r3, #43	; 0x2b
 80074f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074fa:	f89a 3000 	ldrb.w	r3, [sl]
 80074fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007500:	d015      	beq.n	800752e <_svfiprintf_r+0xf6>
 8007502:	9a07      	ldr	r2, [sp, #28]
 8007504:	4654      	mov	r4, sl
 8007506:	2000      	movs	r0, #0
 8007508:	f04f 0c0a 	mov.w	ip, #10
 800750c:	4621      	mov	r1, r4
 800750e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007512:	3b30      	subs	r3, #48	; 0x30
 8007514:	2b09      	cmp	r3, #9
 8007516:	d94d      	bls.n	80075b4 <_svfiprintf_r+0x17c>
 8007518:	b1b0      	cbz	r0, 8007548 <_svfiprintf_r+0x110>
 800751a:	9207      	str	r2, [sp, #28]
 800751c:	e014      	b.n	8007548 <_svfiprintf_r+0x110>
 800751e:	eba0 0308 	sub.w	r3, r0, r8
 8007522:	fa09 f303 	lsl.w	r3, r9, r3
 8007526:	4313      	orrs	r3, r2
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	46a2      	mov	sl, r4
 800752c:	e7d2      	b.n	80074d4 <_svfiprintf_r+0x9c>
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	1d19      	adds	r1, r3, #4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	9103      	str	r1, [sp, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	bfbb      	ittet	lt
 800753a:	425b      	neglt	r3, r3
 800753c:	f042 0202 	orrlt.w	r2, r2, #2
 8007540:	9307      	strge	r3, [sp, #28]
 8007542:	9307      	strlt	r3, [sp, #28]
 8007544:	bfb8      	it	lt
 8007546:	9204      	strlt	r2, [sp, #16]
 8007548:	7823      	ldrb	r3, [r4, #0]
 800754a:	2b2e      	cmp	r3, #46	; 0x2e
 800754c:	d10c      	bne.n	8007568 <_svfiprintf_r+0x130>
 800754e:	7863      	ldrb	r3, [r4, #1]
 8007550:	2b2a      	cmp	r3, #42	; 0x2a
 8007552:	d134      	bne.n	80075be <_svfiprintf_r+0x186>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	1d1a      	adds	r2, r3, #4
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	9203      	str	r2, [sp, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	bfb8      	it	lt
 8007560:	f04f 33ff 	movlt.w	r3, #4294967295
 8007564:	3402      	adds	r4, #2
 8007566:	9305      	str	r3, [sp, #20]
 8007568:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007630 <_svfiprintf_r+0x1f8>
 800756c:	7821      	ldrb	r1, [r4, #0]
 800756e:	2203      	movs	r2, #3
 8007570:	4650      	mov	r0, sl
 8007572:	f7f8 fe65 	bl	8000240 <memchr>
 8007576:	b138      	cbz	r0, 8007588 <_svfiprintf_r+0x150>
 8007578:	9b04      	ldr	r3, [sp, #16]
 800757a:	eba0 000a 	sub.w	r0, r0, sl
 800757e:	2240      	movs	r2, #64	; 0x40
 8007580:	4082      	lsls	r2, r0
 8007582:	4313      	orrs	r3, r2
 8007584:	3401      	adds	r4, #1
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800758c:	4825      	ldr	r0, [pc, #148]	; (8007624 <_svfiprintf_r+0x1ec>)
 800758e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007592:	2206      	movs	r2, #6
 8007594:	f7f8 fe54 	bl	8000240 <memchr>
 8007598:	2800      	cmp	r0, #0
 800759a:	d038      	beq.n	800760e <_svfiprintf_r+0x1d6>
 800759c:	4b22      	ldr	r3, [pc, #136]	; (8007628 <_svfiprintf_r+0x1f0>)
 800759e:	bb1b      	cbnz	r3, 80075e8 <_svfiprintf_r+0x1b0>
 80075a0:	9b03      	ldr	r3, [sp, #12]
 80075a2:	3307      	adds	r3, #7
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	3308      	adds	r3, #8
 80075aa:	9303      	str	r3, [sp, #12]
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	4433      	add	r3, r6
 80075b0:	9309      	str	r3, [sp, #36]	; 0x24
 80075b2:	e768      	b.n	8007486 <_svfiprintf_r+0x4e>
 80075b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80075b8:	460c      	mov	r4, r1
 80075ba:	2001      	movs	r0, #1
 80075bc:	e7a6      	b.n	800750c <_svfiprintf_r+0xd4>
 80075be:	2300      	movs	r3, #0
 80075c0:	3401      	adds	r4, #1
 80075c2:	9305      	str	r3, [sp, #20]
 80075c4:	4619      	mov	r1, r3
 80075c6:	f04f 0c0a 	mov.w	ip, #10
 80075ca:	4620      	mov	r0, r4
 80075cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d0:	3a30      	subs	r2, #48	; 0x30
 80075d2:	2a09      	cmp	r2, #9
 80075d4:	d903      	bls.n	80075de <_svfiprintf_r+0x1a6>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0c6      	beq.n	8007568 <_svfiprintf_r+0x130>
 80075da:	9105      	str	r1, [sp, #20]
 80075dc:	e7c4      	b.n	8007568 <_svfiprintf_r+0x130>
 80075de:	fb0c 2101 	mla	r1, ip, r1, r2
 80075e2:	4604      	mov	r4, r0
 80075e4:	2301      	movs	r3, #1
 80075e6:	e7f0      	b.n	80075ca <_svfiprintf_r+0x192>
 80075e8:	ab03      	add	r3, sp, #12
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	462a      	mov	r2, r5
 80075ee:	4b0f      	ldr	r3, [pc, #60]	; (800762c <_svfiprintf_r+0x1f4>)
 80075f0:	a904      	add	r1, sp, #16
 80075f2:	4638      	mov	r0, r7
 80075f4:	f3af 8000 	nop.w
 80075f8:	1c42      	adds	r2, r0, #1
 80075fa:	4606      	mov	r6, r0
 80075fc:	d1d6      	bne.n	80075ac <_svfiprintf_r+0x174>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	065b      	lsls	r3, r3, #25
 8007602:	f53f af2d 	bmi.w	8007460 <_svfiprintf_r+0x28>
 8007606:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007608:	b01d      	add	sp, #116	; 0x74
 800760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760e:	ab03      	add	r3, sp, #12
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	462a      	mov	r2, r5
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <_svfiprintf_r+0x1f4>)
 8007616:	a904      	add	r1, sp, #16
 8007618:	4638      	mov	r0, r7
 800761a:	f000 f879 	bl	8007710 <_printf_i>
 800761e:	e7eb      	b.n	80075f8 <_svfiprintf_r+0x1c0>
 8007620:	08007e04 	.word	0x08007e04
 8007624:	08007e0e 	.word	0x08007e0e
 8007628:	00000000 	.word	0x00000000
 800762c:	08007385 	.word	0x08007385
 8007630:	08007e0a 	.word	0x08007e0a

08007634 <_printf_common>:
 8007634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	4616      	mov	r6, r2
 800763a:	4699      	mov	r9, r3
 800763c:	688a      	ldr	r2, [r1, #8]
 800763e:	690b      	ldr	r3, [r1, #16]
 8007640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007644:	4293      	cmp	r3, r2
 8007646:	bfb8      	it	lt
 8007648:	4613      	movlt	r3, r2
 800764a:	6033      	str	r3, [r6, #0]
 800764c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007650:	4607      	mov	r7, r0
 8007652:	460c      	mov	r4, r1
 8007654:	b10a      	cbz	r2, 800765a <_printf_common+0x26>
 8007656:	3301      	adds	r3, #1
 8007658:	6033      	str	r3, [r6, #0]
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	0699      	lsls	r1, r3, #26
 800765e:	bf42      	ittt	mi
 8007660:	6833      	ldrmi	r3, [r6, #0]
 8007662:	3302      	addmi	r3, #2
 8007664:	6033      	strmi	r3, [r6, #0]
 8007666:	6825      	ldr	r5, [r4, #0]
 8007668:	f015 0506 	ands.w	r5, r5, #6
 800766c:	d106      	bne.n	800767c <_printf_common+0x48>
 800766e:	f104 0a19 	add.w	sl, r4, #25
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	6832      	ldr	r2, [r6, #0]
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	42ab      	cmp	r3, r5
 800767a:	dc26      	bgt.n	80076ca <_printf_common+0x96>
 800767c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007680:	1e13      	subs	r3, r2, #0
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	bf18      	it	ne
 8007686:	2301      	movne	r3, #1
 8007688:	0692      	lsls	r2, r2, #26
 800768a:	d42b      	bmi.n	80076e4 <_printf_common+0xb0>
 800768c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007690:	4649      	mov	r1, r9
 8007692:	4638      	mov	r0, r7
 8007694:	47c0      	blx	r8
 8007696:	3001      	adds	r0, #1
 8007698:	d01e      	beq.n	80076d8 <_printf_common+0xa4>
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	6922      	ldr	r2, [r4, #16]
 800769e:	f003 0306 	and.w	r3, r3, #6
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	bf02      	ittt	eq
 80076a6:	68e5      	ldreq	r5, [r4, #12]
 80076a8:	6833      	ldreq	r3, [r6, #0]
 80076aa:	1aed      	subeq	r5, r5, r3
 80076ac:	68a3      	ldr	r3, [r4, #8]
 80076ae:	bf0c      	ite	eq
 80076b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b4:	2500      	movne	r5, #0
 80076b6:	4293      	cmp	r3, r2
 80076b8:	bfc4      	itt	gt
 80076ba:	1a9b      	subgt	r3, r3, r2
 80076bc:	18ed      	addgt	r5, r5, r3
 80076be:	2600      	movs	r6, #0
 80076c0:	341a      	adds	r4, #26
 80076c2:	42b5      	cmp	r5, r6
 80076c4:	d11a      	bne.n	80076fc <_printf_common+0xc8>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e008      	b.n	80076dc <_printf_common+0xa8>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4652      	mov	r2, sl
 80076ce:	4649      	mov	r1, r9
 80076d0:	4638      	mov	r0, r7
 80076d2:	47c0      	blx	r8
 80076d4:	3001      	adds	r0, #1
 80076d6:	d103      	bne.n	80076e0 <_printf_common+0xac>
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295
 80076dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e0:	3501      	adds	r5, #1
 80076e2:	e7c6      	b.n	8007672 <_printf_common+0x3e>
 80076e4:	18e1      	adds	r1, r4, r3
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	2030      	movs	r0, #48	; 0x30
 80076ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076ee:	4422      	add	r2, r4
 80076f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076f8:	3302      	adds	r3, #2
 80076fa:	e7c7      	b.n	800768c <_printf_common+0x58>
 80076fc:	2301      	movs	r3, #1
 80076fe:	4622      	mov	r2, r4
 8007700:	4649      	mov	r1, r9
 8007702:	4638      	mov	r0, r7
 8007704:	47c0      	blx	r8
 8007706:	3001      	adds	r0, #1
 8007708:	d0e6      	beq.n	80076d8 <_printf_common+0xa4>
 800770a:	3601      	adds	r6, #1
 800770c:	e7d9      	b.n	80076c2 <_printf_common+0x8e>
	...

08007710 <_printf_i>:
 8007710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	7e0f      	ldrb	r7, [r1, #24]
 8007716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007718:	2f78      	cmp	r7, #120	; 0x78
 800771a:	4691      	mov	r9, r2
 800771c:	4680      	mov	r8, r0
 800771e:	460c      	mov	r4, r1
 8007720:	469a      	mov	sl, r3
 8007722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007726:	d807      	bhi.n	8007738 <_printf_i+0x28>
 8007728:	2f62      	cmp	r7, #98	; 0x62
 800772a:	d80a      	bhi.n	8007742 <_printf_i+0x32>
 800772c:	2f00      	cmp	r7, #0
 800772e:	f000 80d4 	beq.w	80078da <_printf_i+0x1ca>
 8007732:	2f58      	cmp	r7, #88	; 0x58
 8007734:	f000 80c0 	beq.w	80078b8 <_printf_i+0x1a8>
 8007738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800773c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007740:	e03a      	b.n	80077b8 <_printf_i+0xa8>
 8007742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007746:	2b15      	cmp	r3, #21
 8007748:	d8f6      	bhi.n	8007738 <_printf_i+0x28>
 800774a:	a101      	add	r1, pc, #4	; (adr r1, 8007750 <_printf_i+0x40>)
 800774c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007750:	080077a9 	.word	0x080077a9
 8007754:	080077bd 	.word	0x080077bd
 8007758:	08007739 	.word	0x08007739
 800775c:	08007739 	.word	0x08007739
 8007760:	08007739 	.word	0x08007739
 8007764:	08007739 	.word	0x08007739
 8007768:	080077bd 	.word	0x080077bd
 800776c:	08007739 	.word	0x08007739
 8007770:	08007739 	.word	0x08007739
 8007774:	08007739 	.word	0x08007739
 8007778:	08007739 	.word	0x08007739
 800777c:	080078c1 	.word	0x080078c1
 8007780:	080077e9 	.word	0x080077e9
 8007784:	0800787b 	.word	0x0800787b
 8007788:	08007739 	.word	0x08007739
 800778c:	08007739 	.word	0x08007739
 8007790:	080078e3 	.word	0x080078e3
 8007794:	08007739 	.word	0x08007739
 8007798:	080077e9 	.word	0x080077e9
 800779c:	08007739 	.word	0x08007739
 80077a0:	08007739 	.word	0x08007739
 80077a4:	08007883 	.word	0x08007883
 80077a8:	682b      	ldr	r3, [r5, #0]
 80077aa:	1d1a      	adds	r2, r3, #4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	602a      	str	r2, [r5, #0]
 80077b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077b8:	2301      	movs	r3, #1
 80077ba:	e09f      	b.n	80078fc <_printf_i+0x1ec>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	682b      	ldr	r3, [r5, #0]
 80077c0:	0607      	lsls	r7, r0, #24
 80077c2:	f103 0104 	add.w	r1, r3, #4
 80077c6:	6029      	str	r1, [r5, #0]
 80077c8:	d501      	bpl.n	80077ce <_printf_i+0xbe>
 80077ca:	681e      	ldr	r6, [r3, #0]
 80077cc:	e003      	b.n	80077d6 <_printf_i+0xc6>
 80077ce:	0646      	lsls	r6, r0, #25
 80077d0:	d5fb      	bpl.n	80077ca <_printf_i+0xba>
 80077d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	da03      	bge.n	80077e2 <_printf_i+0xd2>
 80077da:	232d      	movs	r3, #45	; 0x2d
 80077dc:	4276      	negs	r6, r6
 80077de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e2:	485a      	ldr	r0, [pc, #360]	; (800794c <_printf_i+0x23c>)
 80077e4:	230a      	movs	r3, #10
 80077e6:	e012      	b.n	800780e <_printf_i+0xfe>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	6820      	ldr	r0, [r4, #0]
 80077ec:	1d19      	adds	r1, r3, #4
 80077ee:	6029      	str	r1, [r5, #0]
 80077f0:	0605      	lsls	r5, r0, #24
 80077f2:	d501      	bpl.n	80077f8 <_printf_i+0xe8>
 80077f4:	681e      	ldr	r6, [r3, #0]
 80077f6:	e002      	b.n	80077fe <_printf_i+0xee>
 80077f8:	0641      	lsls	r1, r0, #25
 80077fa:	d5fb      	bpl.n	80077f4 <_printf_i+0xe4>
 80077fc:	881e      	ldrh	r6, [r3, #0]
 80077fe:	4853      	ldr	r0, [pc, #332]	; (800794c <_printf_i+0x23c>)
 8007800:	2f6f      	cmp	r7, #111	; 0x6f
 8007802:	bf0c      	ite	eq
 8007804:	2308      	moveq	r3, #8
 8007806:	230a      	movne	r3, #10
 8007808:	2100      	movs	r1, #0
 800780a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800780e:	6865      	ldr	r5, [r4, #4]
 8007810:	60a5      	str	r5, [r4, #8]
 8007812:	2d00      	cmp	r5, #0
 8007814:	bfa2      	ittt	ge
 8007816:	6821      	ldrge	r1, [r4, #0]
 8007818:	f021 0104 	bicge.w	r1, r1, #4
 800781c:	6021      	strge	r1, [r4, #0]
 800781e:	b90e      	cbnz	r6, 8007824 <_printf_i+0x114>
 8007820:	2d00      	cmp	r5, #0
 8007822:	d04b      	beq.n	80078bc <_printf_i+0x1ac>
 8007824:	4615      	mov	r5, r2
 8007826:	fbb6 f1f3 	udiv	r1, r6, r3
 800782a:	fb03 6711 	mls	r7, r3, r1, r6
 800782e:	5dc7      	ldrb	r7, [r0, r7]
 8007830:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007834:	4637      	mov	r7, r6
 8007836:	42bb      	cmp	r3, r7
 8007838:	460e      	mov	r6, r1
 800783a:	d9f4      	bls.n	8007826 <_printf_i+0x116>
 800783c:	2b08      	cmp	r3, #8
 800783e:	d10b      	bne.n	8007858 <_printf_i+0x148>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	07de      	lsls	r6, r3, #31
 8007844:	d508      	bpl.n	8007858 <_printf_i+0x148>
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	6861      	ldr	r1, [r4, #4]
 800784a:	4299      	cmp	r1, r3
 800784c:	bfde      	ittt	le
 800784e:	2330      	movle	r3, #48	; 0x30
 8007850:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007854:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007858:	1b52      	subs	r2, r2, r5
 800785a:	6122      	str	r2, [r4, #16]
 800785c:	f8cd a000 	str.w	sl, [sp]
 8007860:	464b      	mov	r3, r9
 8007862:	aa03      	add	r2, sp, #12
 8007864:	4621      	mov	r1, r4
 8007866:	4640      	mov	r0, r8
 8007868:	f7ff fee4 	bl	8007634 <_printf_common>
 800786c:	3001      	adds	r0, #1
 800786e:	d14a      	bne.n	8007906 <_printf_i+0x1f6>
 8007870:	f04f 30ff 	mov.w	r0, #4294967295
 8007874:	b004      	add	sp, #16
 8007876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	f043 0320 	orr.w	r3, r3, #32
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	4833      	ldr	r0, [pc, #204]	; (8007950 <_printf_i+0x240>)
 8007884:	2778      	movs	r7, #120	; 0x78
 8007886:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	6829      	ldr	r1, [r5, #0]
 800788e:	061f      	lsls	r7, r3, #24
 8007890:	f851 6b04 	ldr.w	r6, [r1], #4
 8007894:	d402      	bmi.n	800789c <_printf_i+0x18c>
 8007896:	065f      	lsls	r7, r3, #25
 8007898:	bf48      	it	mi
 800789a:	b2b6      	uxthmi	r6, r6
 800789c:	07df      	lsls	r7, r3, #31
 800789e:	bf48      	it	mi
 80078a0:	f043 0320 	orrmi.w	r3, r3, #32
 80078a4:	6029      	str	r1, [r5, #0]
 80078a6:	bf48      	it	mi
 80078a8:	6023      	strmi	r3, [r4, #0]
 80078aa:	b91e      	cbnz	r6, 80078b4 <_printf_i+0x1a4>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	f023 0320 	bic.w	r3, r3, #32
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	2310      	movs	r3, #16
 80078b6:	e7a7      	b.n	8007808 <_printf_i+0xf8>
 80078b8:	4824      	ldr	r0, [pc, #144]	; (800794c <_printf_i+0x23c>)
 80078ba:	e7e4      	b.n	8007886 <_printf_i+0x176>
 80078bc:	4615      	mov	r5, r2
 80078be:	e7bd      	b.n	800783c <_printf_i+0x12c>
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	6826      	ldr	r6, [r4, #0]
 80078c4:	6961      	ldr	r1, [r4, #20]
 80078c6:	1d18      	adds	r0, r3, #4
 80078c8:	6028      	str	r0, [r5, #0]
 80078ca:	0635      	lsls	r5, r6, #24
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	d501      	bpl.n	80078d4 <_printf_i+0x1c4>
 80078d0:	6019      	str	r1, [r3, #0]
 80078d2:	e002      	b.n	80078da <_printf_i+0x1ca>
 80078d4:	0670      	lsls	r0, r6, #25
 80078d6:	d5fb      	bpl.n	80078d0 <_printf_i+0x1c0>
 80078d8:	8019      	strh	r1, [r3, #0]
 80078da:	2300      	movs	r3, #0
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	4615      	mov	r5, r2
 80078e0:	e7bc      	b.n	800785c <_printf_i+0x14c>
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	1d1a      	adds	r2, r3, #4
 80078e6:	602a      	str	r2, [r5, #0]
 80078e8:	681d      	ldr	r5, [r3, #0]
 80078ea:	6862      	ldr	r2, [r4, #4]
 80078ec:	2100      	movs	r1, #0
 80078ee:	4628      	mov	r0, r5
 80078f0:	f7f8 fca6 	bl	8000240 <memchr>
 80078f4:	b108      	cbz	r0, 80078fa <_printf_i+0x1ea>
 80078f6:	1b40      	subs	r0, r0, r5
 80078f8:	6060      	str	r0, [r4, #4]
 80078fa:	6863      	ldr	r3, [r4, #4]
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	2300      	movs	r3, #0
 8007900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007904:	e7aa      	b.n	800785c <_printf_i+0x14c>
 8007906:	6923      	ldr	r3, [r4, #16]
 8007908:	462a      	mov	r2, r5
 800790a:	4649      	mov	r1, r9
 800790c:	4640      	mov	r0, r8
 800790e:	47d0      	blx	sl
 8007910:	3001      	adds	r0, #1
 8007912:	d0ad      	beq.n	8007870 <_printf_i+0x160>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	079b      	lsls	r3, r3, #30
 8007918:	d413      	bmi.n	8007942 <_printf_i+0x232>
 800791a:	68e0      	ldr	r0, [r4, #12]
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	4298      	cmp	r0, r3
 8007920:	bfb8      	it	lt
 8007922:	4618      	movlt	r0, r3
 8007924:	e7a6      	b.n	8007874 <_printf_i+0x164>
 8007926:	2301      	movs	r3, #1
 8007928:	4632      	mov	r2, r6
 800792a:	4649      	mov	r1, r9
 800792c:	4640      	mov	r0, r8
 800792e:	47d0      	blx	sl
 8007930:	3001      	adds	r0, #1
 8007932:	d09d      	beq.n	8007870 <_printf_i+0x160>
 8007934:	3501      	adds	r5, #1
 8007936:	68e3      	ldr	r3, [r4, #12]
 8007938:	9903      	ldr	r1, [sp, #12]
 800793a:	1a5b      	subs	r3, r3, r1
 800793c:	42ab      	cmp	r3, r5
 800793e:	dcf2      	bgt.n	8007926 <_printf_i+0x216>
 8007940:	e7eb      	b.n	800791a <_printf_i+0x20a>
 8007942:	2500      	movs	r5, #0
 8007944:	f104 0619 	add.w	r6, r4, #25
 8007948:	e7f5      	b.n	8007936 <_printf_i+0x226>
 800794a:	bf00      	nop
 800794c:	08007e15 	.word	0x08007e15
 8007950:	08007e26 	.word	0x08007e26

08007954 <memmove>:
 8007954:	4288      	cmp	r0, r1
 8007956:	b510      	push	{r4, lr}
 8007958:	eb01 0402 	add.w	r4, r1, r2
 800795c:	d902      	bls.n	8007964 <memmove+0x10>
 800795e:	4284      	cmp	r4, r0
 8007960:	4623      	mov	r3, r4
 8007962:	d807      	bhi.n	8007974 <memmove+0x20>
 8007964:	1e43      	subs	r3, r0, #1
 8007966:	42a1      	cmp	r1, r4
 8007968:	d008      	beq.n	800797c <memmove+0x28>
 800796a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800796e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007972:	e7f8      	b.n	8007966 <memmove+0x12>
 8007974:	4402      	add	r2, r0
 8007976:	4601      	mov	r1, r0
 8007978:	428a      	cmp	r2, r1
 800797a:	d100      	bne.n	800797e <memmove+0x2a>
 800797c:	bd10      	pop	{r4, pc}
 800797e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007986:	e7f7      	b.n	8007978 <memmove+0x24>

08007988 <_sbrk_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d06      	ldr	r5, [pc, #24]	; (80079a4 <_sbrk_r+0x1c>)
 800798c:	2300      	movs	r3, #0
 800798e:	4604      	mov	r4, r0
 8007990:	4608      	mov	r0, r1
 8007992:	602b      	str	r3, [r5, #0]
 8007994:	f7f9 fad2 	bl	8000f3c <_sbrk>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_sbrk_r+0x1a>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_sbrk_r+0x1a>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	20004c30 	.word	0x20004c30

080079a8 <_realloc_r>:
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	4680      	mov	r8, r0
 80079ae:	4614      	mov	r4, r2
 80079b0:	460e      	mov	r6, r1
 80079b2:	b921      	cbnz	r1, 80079be <_realloc_r+0x16>
 80079b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	4611      	mov	r1, r2
 80079ba:	f7ff bc57 	b.w	800726c <_malloc_r>
 80079be:	b92a      	cbnz	r2, 80079cc <_realloc_r+0x24>
 80079c0:	f7ff fbe8 	bl	8007194 <_free_r>
 80079c4:	4625      	mov	r5, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079cc:	f000 f81b 	bl	8007a06 <_malloc_usable_size_r>
 80079d0:	4284      	cmp	r4, r0
 80079d2:	4607      	mov	r7, r0
 80079d4:	d802      	bhi.n	80079dc <_realloc_r+0x34>
 80079d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079da:	d812      	bhi.n	8007a02 <_realloc_r+0x5a>
 80079dc:	4621      	mov	r1, r4
 80079de:	4640      	mov	r0, r8
 80079e0:	f7ff fc44 	bl	800726c <_malloc_r>
 80079e4:	4605      	mov	r5, r0
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d0ed      	beq.n	80079c6 <_realloc_r+0x1e>
 80079ea:	42bc      	cmp	r4, r7
 80079ec:	4622      	mov	r2, r4
 80079ee:	4631      	mov	r1, r6
 80079f0:	bf28      	it	cs
 80079f2:	463a      	movcs	r2, r7
 80079f4:	f7ff fbc0 	bl	8007178 <memcpy>
 80079f8:	4631      	mov	r1, r6
 80079fa:	4640      	mov	r0, r8
 80079fc:	f7ff fbca 	bl	8007194 <_free_r>
 8007a00:	e7e1      	b.n	80079c6 <_realloc_r+0x1e>
 8007a02:	4635      	mov	r5, r6
 8007a04:	e7df      	b.n	80079c6 <_realloc_r+0x1e>

08007a06 <_malloc_usable_size_r>:
 8007a06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a0a:	1f18      	subs	r0, r3, #4
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	bfbc      	itt	lt
 8007a10:	580b      	ldrlt	r3, [r1, r0]
 8007a12:	18c0      	addlt	r0, r0, r3
 8007a14:	4770      	bx	lr
	...

08007a18 <_init>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	bf00      	nop
 8007a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1e:	bc08      	pop	{r3}
 8007a20:	469e      	mov	lr, r3
 8007a22:	4770      	bx	lr

08007a24 <_fini>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	bf00      	nop
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc08      	pop	{r3}
 8007a2c:	469e      	mov	lr, r3
 8007a2e:	4770      	bx	lr
