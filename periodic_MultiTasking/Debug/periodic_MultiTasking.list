
periodic_MultiTasking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df8  08004df8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df8  08004df8  00014df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dfc  08004dfc  00014dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049bc  20000010  08004e10  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049cc  08004e10  000249cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f1b  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae1  00000000  00000000  00032f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  00035a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d44  00000000  00000000  00036ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027fb  00000000  00000000  000378e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013030  00000000  00000000  0003a0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff408  00000000  00000000  0004d10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004818  00000000  00000000  0014c518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00150d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08004d50 	.word	0x08004d50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08004d50 	.word	0x08004d50

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b970 	b.w	8000538 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	460f      	mov	r7, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d965      	bls.n	8000352 <__udivmoddi4+0xe2>
 8000286:	fab2 f382 	clz	r3, r2
 800028a:	b143      	cbz	r3, 800029e <__udivmoddi4+0x2e>
 800028c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000290:	f1c3 0220 	rsb	r2, r3, #32
 8000294:	409f      	lsls	r7, r3
 8000296:	fa20 f202 	lsr.w	r2, r0, r2
 800029a:	4317      	orrs	r7, r2
 800029c:	409c      	lsls	r4, r3
 800029e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a2:	fa1f f58c 	uxth.w	r5, ip
 80002a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002aa:	0c22      	lsrs	r2, r4, #16
 80002ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b4:	fb01 f005 	mul.w	r0, r1, r5
 80002b8:	4290      	cmp	r0, r2
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002bc:	eb1c 0202 	adds.w	r2, ip, r2
 80002c0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c4:	f080 811c 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f240 8119 	bls.w	8000500 <__udivmoddi4+0x290>
 80002ce:	3902      	subs	r1, #2
 80002d0:	4462      	add	r2, ip
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e2:	fb00 f505 	mul.w	r5, r0, r5
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	d90a      	bls.n	8000300 <__udivmoddi4+0x90>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	f080 8107 	bcs.w	8000504 <__udivmoddi4+0x294>
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	f240 8104 	bls.w	8000504 <__udivmoddi4+0x294>
 80002fc:	4464      	add	r4, ip
 80002fe:	3802      	subs	r0, #2
 8000300:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	2100      	movs	r1, #0
 8000308:	b11e      	cbz	r6, 8000312 <__udivmoddi4+0xa2>
 800030a:	40dc      	lsrs	r4, r3
 800030c:	2300      	movs	r3, #0
 800030e:	e9c6 4300 	strd	r4, r3, [r6]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0xbc>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80ed 	beq.w	80004fa <__udivmoddi4+0x28a>
 8000320:	2100      	movs	r1, #0
 8000322:	e9c6 0500 	strd	r0, r5, [r6]
 8000326:	4608      	mov	r0, r1
 8000328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032c:	fab3 f183 	clz	r1, r3
 8000330:	2900      	cmp	r1, #0
 8000332:	d149      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d302      	bcc.n	800033e <__udivmoddi4+0xce>
 8000338:	4282      	cmp	r2, r0
 800033a:	f200 80f8 	bhi.w	800052e <__udivmoddi4+0x2be>
 800033e:	1a84      	subs	r4, r0, r2
 8000340:	eb65 0203 	sbc.w	r2, r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	4617      	mov	r7, r2
 8000348:	2e00      	cmp	r6, #0
 800034a:	d0e2      	beq.n	8000312 <__udivmoddi4+0xa2>
 800034c:	e9c6 4700 	strd	r4, r7, [r6]
 8000350:	e7df      	b.n	8000312 <__udivmoddi4+0xa2>
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xe6>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8090 	bne.w	8000480 <__udivmoddi4+0x210>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2101      	movs	r1, #1
 800036c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000370:	fb07 2015 	mls	r0, r7, r5, r2
 8000374:	0c22      	lsrs	r2, r4, #16
 8000376:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037a:	fb0e f005 	mul.w	r0, lr, r5
 800037e:	4290      	cmp	r0, r2
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x124>
 8000382:	eb1c 0202 	adds.w	r2, ip, r2
 8000386:	f105 38ff 	add.w	r8, r5, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4290      	cmp	r0, r2
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b8>
 8000392:	4645      	mov	r5, r8
 8000394:	1a12      	subs	r2, r2, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb2 f0f7 	udiv	r0, r2, r7
 800039c:	fb07 2210 	mls	r2, r7, r0, r2
 80003a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x14e>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x14c>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2c2>
 80003bc:	4610      	mov	r0, r2
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c6:	e79f      	b.n	8000308 <__udivmoddi4+0x98>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa05 f401 	lsl.w	r4, r5, r1
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	40fd      	lsrs	r5, r7
 80003e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e4:	4323      	orrs	r3, r4
 80003e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	fb09 5518 	mls	r5, r9, r8, r5
 80003f2:	0c1c      	lsrs	r4, r3, #16
 80003f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f8:	fb08 f50e 	mul.w	r5, r8, lr
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	fa00 f001 	lsl.w	r0, r0, r1
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2b4>
 8000414:	42a5      	cmp	r5, r4
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2b4>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4464      	add	r4, ip
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	b29d      	uxth	r5, r3
 8000424:	fbb4 f3f9 	udiv	r3, r4, r9
 8000428:	fb09 4413 	mls	r4, r9, r3, r4
 800042c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000430:	fb03 fe0e 	mul.w	lr, r3, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2ac>
 8000442:	45a6      	cmp	lr, r4
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2ac>
 8000446:	3b02      	subs	r3, #2
 8000448:	4464      	add	r4, ip
 800044a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044e:	fba3 9502 	umull	r9, r5, r3, r2
 8000452:	eba4 040e 	sub.w	r4, r4, lr
 8000456:	42ac      	cmp	r4, r5
 8000458:	46c8      	mov	r8, r9
 800045a:	46ae      	mov	lr, r5
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x29c>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x298>
 8000460:	b156      	cbz	r6, 8000478 <__udivmoddi4+0x208>
 8000462:	ebb0 0208 	subs.w	r2, r0, r8
 8000466:	eb64 040e 	sbc.w	r4, r4, lr
 800046a:	fa04 f707 	lsl.w	r7, r4, r7
 800046e:	40ca      	lsrs	r2, r1
 8000470:	40cc      	lsrs	r4, r1
 8000472:	4317      	orrs	r7, r2
 8000474:	e9c6 7400 	strd	r7, r4, [r6]
 8000478:	4618      	mov	r0, r3
 800047a:	2100      	movs	r1, #0
 800047c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000480:	f1c3 0120 	rsb	r1, r3, #32
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	fa20 f201 	lsr.w	r2, r0, r1
 800048c:	fa25 f101 	lsr.w	r1, r5, r1
 8000490:	409d      	lsls	r5, r3
 8000492:	432a      	orrs	r2, r5
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a0:	fb07 1510 	mls	r5, r7, r0, r1
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004aa:	fb00 f50e 	mul.w	r5, r0, lr
 80004ae:	428d      	cmp	r5, r1
 80004b0:	fa04 f403 	lsl.w	r4, r4, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x258>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004c0:	428d      	cmp	r5, r1
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1b49      	subs	r1, r1, r5
 80004ca:	b292      	uxth	r2, r2
 80004cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d0:	fb07 1115 	mls	r1, r7, r5, r1
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	fb05 f10e 	mul.w	r1, r5, lr
 80004dc:	4291      	cmp	r1, r2
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x282>
 80004e0:	eb1c 0202 	adds.w	r2, ip, r2
 80004e4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2a8>
 80004ea:	4291      	cmp	r1, r2
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2a8>
 80004ee:	3d02      	subs	r5, #2
 80004f0:	4462      	add	r2, ip
 80004f2:	1a52      	subs	r2, r2, r1
 80004f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0xfc>
 80004fa:	4631      	mov	r1, r6
 80004fc:	4630      	mov	r0, r6
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xa2>
 8000500:	4639      	mov	r1, r7
 8000502:	e6e6      	b.n	80002d2 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e6fb      	b.n	8000300 <__udivmoddi4+0x90>
 8000508:	4548      	cmp	r0, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000514:	3b01      	subs	r3, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000518:	4645      	mov	r5, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x282>
 800051c:	462b      	mov	r3, r5
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1da>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x258>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000528:	3d02      	subs	r5, #2
 800052a:	4462      	add	r2, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x124>
 800052e:	4608      	mov	r0, r1
 8000530:	e70a      	b.n	8000348 <__udivmoddi4+0xd8>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x14e>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000540:	f000 f9ae 	bl	80008a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fa95 	bl	8000a72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f828 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f8c0 	bl	80006d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000550:	f000 f880 	bl	8000654 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000554:	f000 f886 	bl	8000664 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f001 fd9c 	bl	8002094 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of toggleGreen */
  toggleGreenHandle = osThreadNew(toggleGreenHook, NULL, &toggleGreen_attributes);
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <main+0x48>)
 800055e:	2100      	movs	r1, #0
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <main+0x4c>)
 8000562:	f001 fe01 	bl	8002168 <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a08      	ldr	r2, [pc, #32]	; (800058c <main+0x50>)
 800056a:	6013      	str	r3, [r2, #0]

  /* creation of toggleRed */
  toggleRedHandle = osThreadNew(toggleRedHook, NULL, &toggleRed_attributes);
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <main+0x54>)
 800056e:	2100      	movs	r1, #0
 8000570:	4808      	ldr	r0, [pc, #32]	; (8000594 <main+0x58>)
 8000572:	f001 fdf9 	bl	8002168 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <main+0x5c>)
 800057a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800057c:	f001 fdbe 	bl	80020fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x44>
 8000582:	bf00      	nop
 8000584:	08004d98 	.word	0x08004d98
 8000588:	080007b9 	.word	0x080007b9
 800058c:	20000078 	.word	0x20000078
 8000590:	08004dbc 	.word	0x08004dbc
 8000594:	0800082d 	.word	0x0800082d
 8000598:	2000007c 	.word	0x2000007c

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	; 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2234      	movs	r2, #52	; 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fb96 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <SystemClock_Config+0xb0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xb0>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xb0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <SystemClock_Config+0xb4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <SystemClock_Config+0xb4>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <SystemClock_Config+0xb4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fdf9 	bl	8001200 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000614:	f000 f970 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f892 	bl	800175c <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800063e:	f000 f95b 	bl	80008f8 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_Init 1 */
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <MX_TIM6_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16 - 1;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_TIM6_Init+0x64>)
 800067c:	220f      	movs	r2, #15
 800067e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <MX_TIM6_Init+0x64>)
 8000696:	f001 fa13 	bl	8001ac0 <HAL_TIM_Base_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80006a0:	f000 f92a 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_TIM6_Init+0x64>)
 80006b2:	f001 fc3b 	bl	8001f2c <HAL_TIMEx_MasterConfigSynchronization>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 f91c 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	40001000 	.word	0x40001000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <MX_GPIO_Init+0xd8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <MX_GPIO_Init+0xd8>)
 80006ec:	f043 0320 	orr.w	r3, r3, #32
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <MX_GPIO_Init+0xd8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0320 	and.w	r3, r3, #32
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a29      	ldr	r2, [pc, #164]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a23      	ldr	r2, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xd8>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_GPIO_Init+0xd8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(yellow_LED_GPIO_Port, yellow_LED_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2108      	movs	r1, #8
 8000732:	481e      	ldr	r0, [pc, #120]	; (80007ac <MX_GPIO_Init+0xdc>)
 8000734:	f000 fd30 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, green_LED_Pin|red_LED_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2109      	movs	r1, #9
 800073c:	481c      	ldr	r0, [pc, #112]	; (80007b0 <MX_GPIO_Init+0xe0>)
 800073e:	f000 fd2b 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(blue_LED_GPIO_Port, blue_LED_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2108      	movs	r1, #8
 8000746:	481b      	ldr	r0, [pc, #108]	; (80007b4 <MX_GPIO_Init+0xe4>)
 8000748:	f000 fd26 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : yellow_LED_Pin */
  GPIO_InitStruct.Pin = yellow_LED_Pin;
 800074c:	2308      	movs	r3, #8
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(yellow_LED_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <MX_GPIO_Init+0xdc>)
 8000764:	f000 fb6c 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_LED_Pin red_LED_Pin */
  GPIO_InitStruct.Pin = green_LED_Pin|red_LED_Pin;
 8000768:	2309      	movs	r3, #9
 800076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076c:	2301      	movs	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	4619      	mov	r1, r3
 800077e:	480c      	ldr	r0, [pc, #48]	; (80007b0 <MX_GPIO_Init+0xe0>)
 8000780:	f000 fb5e 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_LED_Pin */
  GPIO_InitStruct.Pin = blue_LED_Pin;
 8000784:	2308      	movs	r3, #8
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(blue_LED_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <MX_GPIO_Init+0xe4>)
 800079c:	f000 fb50 	bl	8000e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40021400 	.word	0x40021400
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020000 	.word	0x40020000

080007b8 <toggleGreenHook>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_toggleGreenHook */
void toggleGreenHook(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const TickType_t xTaskPeriod = pdMS_TO_TICKS(6000); // 6 second total period
 80007c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80007c4:	617b      	str	r3, [r7, #20]
	const TickType_t xTogglePeriod = pdMS_TO_TICKS(25); // 25ms for each toggle (20Hz)
 80007c6:	2319      	movs	r3, #25
 80007c8:	613b      	str	r3, [r7, #16]

	TickType_t xLastWakeTime = xTaskGetTickCount();
 80007ca:	f002 fee1 	bl	8003590 <xTaskGetTickCount>
 80007ce:	4603      	mov	r3, r0
 80007d0:	60bb      	str	r3, [r7, #8]

	  /* Infinite loop */
	  for(;;)
	  {
	    // At startup, turn ON the blue LED
	    HAL_GPIO_WritePin(blue_LED_GPIO_Port, blue_LED_Pin, GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2108      	movs	r1, #8
 80007d6:	4813      	ldr	r0, [pc, #76]	; (8000824 <toggleGreenHook+0x6c>)
 80007d8:	f000 fcde 	bl	8001198 <HAL_GPIO_WritePin>

	    // Toggle green LED at 20Hz for 4 seconds
	    TickType_t xToggleStart = xTaskGetTickCount();
 80007dc:	f002 fed8 	bl	8003590 <xTaskGetTickCount>
 80007e0:	60f8      	str	r0, [r7, #12]

	    while((xTaskGetTickCount() - xToggleStart) < pdMS_TO_TICKS(4000))
 80007e2:	e006      	b.n	80007f2 <toggleGreenHook+0x3a>
	    {
	      HAL_GPIO_TogglePin(GPIOC, green_LED_Pin);
 80007e4:	2101      	movs	r1, #1
 80007e6:	4810      	ldr	r0, [pc, #64]	; (8000828 <toggleGreenHook+0x70>)
 80007e8:	f000 fcef 	bl	80011ca <HAL_GPIO_TogglePin>
	      vTaskDelay(xTogglePeriod);
 80007ec:	6938      	ldr	r0, [r7, #16]
 80007ee:	f002 fd81 	bl	80032f4 <vTaskDelay>
	    while((xTaskGetTickCount() - xToggleStart) < pdMS_TO_TICKS(4000))
 80007f2:	f002 fecd 	bl	8003590 <xTaskGetTickCount>
 80007f6:	4602      	mov	r2, r0
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000800:	d3f0      	bcc.n	80007e4 <toggleGreenHook+0x2c>
	    }

	    // Ensure green LED is OFF after toggling
	    HAL_GPIO_WritePin(GPIOC, green_LED_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2101      	movs	r1, #1
 8000806:	4808      	ldr	r0, [pc, #32]	; (8000828 <toggleGreenHook+0x70>)
 8000808:	f000 fcc6 	bl	8001198 <HAL_GPIO_WritePin>

	    // At completion, turn OFF the blue LED
	    HAL_GPIO_WritePin(blue_LED_GPIO_Port, blue_LED_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2108      	movs	r1, #8
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <toggleGreenHook+0x6c>)
 8000812:	f000 fcc1 	bl	8001198 <HAL_GPIO_WritePin>

	    // Wait for the next cycle using absolute timing (6s total period)
	    vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	6979      	ldr	r1, [r7, #20]
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fce5 	bl	80031ec <vTaskDelayUntil>
	  {
 8000822:	e7d6      	b.n	80007d2 <toggleGreenHook+0x1a>
 8000824:	40020000 	.word	0x40020000
 8000828:	40020800 	.word	0x40020800

0800082c <toggleRedHook>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_toggleRedHook */
void toggleRedHook(void *argument)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN toggleRedHook */
	const TickType_t xTaskPeriod = pdMS_TO_TICKS(2250); // 2 second total period + 250 mS just to show that the led is actually turning off
 8000834:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8000838:	617b      	str	r3, [r7, #20]
    const TickType_t xTogglePeriod = pdMS_TO_TICKS(25); // 25ms for each toggle (20Hz)
 800083a:	2319      	movs	r3, #25
 800083c:	613b      	str	r3, [r7, #16]

	// Initialize the xLastWakeTime variable with the current time
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800083e:	f002 fea7 	bl	8003590 <xTaskGetTickCount>
 8000842:	4603      	mov	r3, r0
 8000844:	60bb      	str	r3, [r7, #8]

	  /* Infinite loop */
	  for(;;)
	  {
	    // At startup, turn ON the yellow LED
	    HAL_GPIO_WritePin(yellow_LED_GPIO_Port, yellow_LED_Pin, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4813      	ldr	r0, [pc, #76]	; (8000898 <toggleRedHook+0x6c>)
 800084c:	f000 fca4 	bl	8001198 <HAL_GPIO_WritePin>

	    // Toggle red LED at 20Hz for 2 seconds
	    TickType_t xToggleStart = xTaskGetTickCount();
 8000850:	f002 fe9e 	bl	8003590 <xTaskGetTickCount>
 8000854:	60f8      	str	r0, [r7, #12]

	    while((xTaskGetTickCount() - xToggleStart) < pdMS_TO_TICKS(2000))
 8000856:	e006      	b.n	8000866 <toggleRedHook+0x3a>
	    {
	      HAL_GPIO_TogglePin(GPIOC, red_LED_Pin);
 8000858:	2108      	movs	r1, #8
 800085a:	4810      	ldr	r0, [pc, #64]	; (800089c <toggleRedHook+0x70>)
 800085c:	f000 fcb5 	bl	80011ca <HAL_GPIO_TogglePin>
	      vTaskDelay(xTogglePeriod);
 8000860:	6938      	ldr	r0, [r7, #16]
 8000862:	f002 fd47 	bl	80032f4 <vTaskDelay>
	    while((xTaskGetTickCount() - xToggleStart) < pdMS_TO_TICKS(2000))
 8000866:	f002 fe93 	bl	8003590 <xTaskGetTickCount>
 800086a:	4602      	mov	r2, r0
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000874:	d3f0      	bcc.n	8000858 <toggleRedHook+0x2c>
	    }

	    // Ensure red LED is OFF after toggling
	    HAL_GPIO_WritePin(GPIOC, red_LED_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	4808      	ldr	r0, [pc, #32]	; (800089c <toggleRedHook+0x70>)
 800087c:	f000 fc8c 	bl	8001198 <HAL_GPIO_WritePin>

	    // At completion, turn OFF the yellow LED
	    HAL_GPIO_WritePin(yellow_LED_GPIO_Port, yellow_LED_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2108      	movs	r1, #8
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <toggleRedHook+0x6c>)
 8000886:	f000 fc87 	bl	8001198 <HAL_GPIO_WritePin>

	    // Wait for the next cycle using absolute timing (2s total period)
	    vTaskDelayUntil(&xLastWakeTime, xTaskPeriod);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	6979      	ldr	r1, [r7, #20]
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fcab 	bl	80031ec <vTaskDelayUntil>
	  {
 8000896:	e7d6      	b.n	8000846 <toggleRedHook+0x1a>
 8000898:	40021400 	.word	0x40021400
 800089c:	40020800 	.word	0x40020800

080008a0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008b2:	f000 fa4d 	bl	8000d50 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008b6:	2301      	movs	r3, #1
 80008b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008c2:	231f      	movs	r3, #31
 80008c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008c6:	2387      	movs	r3, #135	; 0x87
 80008c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008ce:	2300      	movs	r3, #0
 80008d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008d2:	2301      	movs	r3, #1
 80008d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008d6:	2301      	movs	r3, #1
 80008d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008e2:	463b      	mov	r3, r7
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fa6b 	bl	8000dc0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008ea:	2004      	movs	r0, #4
 80008ec:	f000 fa48 	bl	8000d80 <HAL_MPU_Enable>

}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a10      	ldr	r2, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_MspInit+0x4c>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	210f      	movs	r1, #15
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f000 f9ce 	bl	8000ce2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <HAL_TIM_Base_MspInit+0x44>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d113      	bne.n	800098e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a0c      	ldr	r2, [pc, #48]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 800096c:	f043 0310 	orr.w	r3, r3, #16
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_TIM_Base_MspInit+0x48>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 0310 	and.w	r3, r3, #16
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	2036      	movs	r0, #54	; 0x36
 8000984:	f000 f9ad 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000988:	2036      	movs	r0, #54	; 0x36
 800098a:	f000 f9c6 	bl	8000d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40001000 	.word	0x40001000
 800099c:	40023800 	.word	0x40023800

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f000 f88c 	bl	8000aec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009d4:	f003 f922 	bl	8003c1c <xTaskGetSchedulerState>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d001      	beq.n	80009e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009de:	f003 ff03 	bl	80047e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <TIM6_DAC_IRQHandler+0x10>)
 80009ee:	f001 f8be 	bl	8001b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000002c 	.word	0x2000002c

080009fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	; (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f004 f94d 	bl	8004cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd73 	bl	800053c <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a64:	08004e00 	.word	0x08004e00
  ldr r2, =_sbss
 8000a68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a6c:	200049cc 	.word	0x200049cc

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>

08000a72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f928 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7c:	200f      	movs	r0, #15
 8000a7e:	f000 f805 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a82:	f7ff ff3f 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f943 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f90b 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000080 	.word	0x20000080

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000080 	.word	0x20000080

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <__NVIC_SetPriorityGrouping+0x40>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x40>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	05fa0000 	.word	0x05fa0000

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff29 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff3e 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff31 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d54:	f3bf 8f5f 	dmb	sy
}
 8000d58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <HAL_MPU_Disable+0x28>)
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_MPU_Disable+0x28>)
 8000d60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d64:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_MPU_Disable+0x2c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	e000ed90 	.word	0xe000ed90

08000d80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_MPU_Enable+0x38>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_MPU_Enable+0x3c>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_MPU_Enable+0x3c>)
 8000d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d9e:	f3bf 8f4f 	dsb	sy
}
 8000da2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000da4:	f3bf 8f6f 	isb	sy
}
 8000da8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed90 	.word	0xe000ed90
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	785a      	ldrb	r2, [r3, #1]
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_MPU_ConfigRegion+0x7c>)
 8000dce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_MPU_ConfigRegion+0x7c>)
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <HAL_MPU_ConfigRegion+0x7c>)
 8000dd6:	f023 0301 	bic.w	r3, r3, #1
 8000dda:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_MPU_ConfigRegion+0x7c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7b1b      	ldrb	r3, [r3, #12]
 8000de8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7adb      	ldrb	r3, [r3, #11]
 8000dee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000df0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7a9b      	ldrb	r3, [r3, #10]
 8000df6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000df8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7b5b      	ldrb	r3, [r3, #13]
 8000dfe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7b9b      	ldrb	r3, [r3, #14]
 8000e06:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7bdb      	ldrb	r3, [r3, #15]
 8000e0e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7a5b      	ldrb	r3, [r3, #9]
 8000e16:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7a1b      	ldrb	r3, [r3, #8]
 8000e1e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e20:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e2a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e2c:	6113      	str	r3, [r2, #16]
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed90 	.word	0xe000ed90

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	e175      	b.n	800114c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8164 	bne.w	8001146 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_GPIO_Init+0x56>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d017      	beq.n	8000f34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d123      	bne.n	8000f88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0203 	and.w	r2, r3, #3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80be 	beq.w	8001146 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b66      	ldr	r3, [pc, #408]	; (8001164 <HAL_GPIO_Init+0x324>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a65      	ldr	r2, [pc, #404]	; (8001164 <HAL_GPIO_Init+0x324>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b63      	ldr	r3, [pc, #396]	; (8001164 <HAL_GPIO_Init+0x324>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fe2:	4a61      	ldr	r2, [pc, #388]	; (8001168 <HAL_GPIO_Init+0x328>)
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a58      	ldr	r2, [pc, #352]	; (800116c <HAL_GPIO_Init+0x32c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d037      	beq.n	800107e <HAL_GPIO_Init+0x23e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a57      	ldr	r2, [pc, #348]	; (8001170 <HAL_GPIO_Init+0x330>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d031      	beq.n	800107a <HAL_GPIO_Init+0x23a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a56      	ldr	r2, [pc, #344]	; (8001174 <HAL_GPIO_Init+0x334>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d02b      	beq.n	8001076 <HAL_GPIO_Init+0x236>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a55      	ldr	r2, [pc, #340]	; (8001178 <HAL_GPIO_Init+0x338>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x232>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a54      	ldr	r2, [pc, #336]	; (800117c <HAL_GPIO_Init+0x33c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x22e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a53      	ldr	r2, [pc, #332]	; (8001180 <HAL_GPIO_Init+0x340>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x22a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x344>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x226>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a51      	ldr	r2, [pc, #324]	; (8001188 <HAL_GPIO_Init+0x348>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x222>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <HAL_GPIO_Init+0x34c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x21e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4f      	ldr	r2, [pc, #316]	; (8001190 <HAL_GPIO_Init+0x350>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x21a>
 8001056:	2309      	movs	r3, #9
 8001058:	e012      	b.n	8001080 <HAL_GPIO_Init+0x240>
 800105a:	230a      	movs	r3, #10
 800105c:	e010      	b.n	8001080 <HAL_GPIO_Init+0x240>
 800105e:	2308      	movs	r3, #8
 8001060:	e00e      	b.n	8001080 <HAL_GPIO_Init+0x240>
 8001062:	2307      	movs	r3, #7
 8001064:	e00c      	b.n	8001080 <HAL_GPIO_Init+0x240>
 8001066:	2306      	movs	r3, #6
 8001068:	e00a      	b.n	8001080 <HAL_GPIO_Init+0x240>
 800106a:	2305      	movs	r3, #5
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x240>
 800106e:	2304      	movs	r3, #4
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x240>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x240>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x240>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x240>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <HAL_GPIO_Init+0x328>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <HAL_GPIO_Init+0x354>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a34      	ldr	r2, [pc, #208]	; (8001194 <HAL_GPIO_Init+0x354>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <HAL_GPIO_Init+0x354>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a29      	ldr	r2, [pc, #164]	; (8001194 <HAL_GPIO_Init+0x354>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <HAL_GPIO_Init+0x354>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <HAL_GPIO_Init+0x354>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_GPIO_Init+0x354>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_GPIO_Init+0x354>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f ae86 	bls.w	8000e60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40013800 	.word	0x40013800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40021400 	.word	0x40021400
 8001184:	40021800 	.word	0x40021800
 8001188:	40021c00 	.word	0x40021c00
 800118c:	40022000 	.word	0x40022000
 8001190:	40022400 	.word	0x40022400
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	619a      	str	r2, [r3, #24]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011dc:	887a      	ldrh	r2, [r7, #2]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	041a      	lsls	r2, r3, #16
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	400b      	ands	r3, r1
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e29b      	b.n	800174e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8087 	beq.w	8001332 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001224:	4b96      	ldr	r3, [pc, #600]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b04      	cmp	r3, #4
 800122e:	d00c      	beq.n	800124a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001230:	4b93      	ldr	r3, [pc, #588]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b08      	cmp	r3, #8
 800123a:	d112      	bne.n	8001262 <HAL_RCC_OscConfig+0x62>
 800123c:	4b90      	ldr	r3, [pc, #576]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001248:	d10b      	bne.n	8001262 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	4b8d      	ldr	r3, [pc, #564]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d06c      	beq.n	8001330 <HAL_RCC_OscConfig+0x130>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d168      	bne.n	8001330 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e275      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126a:	d106      	bne.n	800127a <HAL_RCC_OscConfig+0x7a>
 800126c:	4b84      	ldr	r3, [pc, #528]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a83      	ldr	r2, [pc, #524]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e02e      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x9c>
 8001282:	4b7f      	ldr	r3, [pc, #508]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7e      	ldr	r2, [pc, #504]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b7c      	ldr	r3, [pc, #496]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a7b      	ldr	r2, [pc, #492]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b73      	ldr	r3, [pc, #460]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a72      	ldr	r2, [pc, #456]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xd8>
 80012c0:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6e      	ldr	r2, [pc, #440]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a6b      	ldr	r2, [pc, #428]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc18 	bl	8000b14 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fc14 	bl	8000b14 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e229      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b61      	ldr	r3, [pc, #388]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fc04 	bl	8000b14 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fc00 	bl	8000b14 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e215      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b57      	ldr	r3, [pc, #348]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x110>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d069      	beq.n	8001412 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133e:	4b50      	ldr	r3, [pc, #320]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134a:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x190>
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x17a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1e9      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b41      	ldr	r3, [pc, #260]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	493d      	ldr	r1, [pc, #244]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e040      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a38      	ldr	r2, [pc, #224]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff fbb6 	bl	8000b14 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff fbb2 	bl	8000b14 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1c7      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4929      	ldr	r1, [pc, #164]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]
 80013de:	e018      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb92 	bl	8000b14 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fb8e 	bl	8000b14 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1a3      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d038      	beq.n	8001490 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d019      	beq.n	800145a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	4a15      	ldr	r2, [pc, #84]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff fb6f 	bl	8000b14 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fb6b 	bl	8000b14 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e180      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x23a>
 8001458:	e01a      	b.n	8001490 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 800145c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_RCC_OscConfig+0x280>)
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fb55 	bl	8000b14 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e00a      	b.n	8001484 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fb51 	bl	8000b14 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d903      	bls.n	8001484 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e166      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
 8001480:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ee      	bne.n	800146e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80a4 	beq.w	80015e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10d      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a88      	ldr	r2, [pc, #544]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b86      	ldr	r3, [pc, #536]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014d2:	4b80      	ldr	r3, [pc, #512]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7f      	ldr	r2, [pc, #508]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fb19 	bl	8000b14 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fb15 	bl	8000b14 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	; 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e12a      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f8:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x31a>
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a6f      	ldr	r2, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	e02d      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x33c>
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6713      	str	r3, [r2, #112]	; 0x70
 800152e:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a67      	ldr	r2, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	e01c      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x35e>
 8001544:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a61      	ldr	r2, [pc, #388]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	4b5f      	ldr	r3, [pc, #380]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a5e      	ldr	r2, [pc, #376]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x376>
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
 800156a:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d015      	beq.n	80015aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157e:	f7ff fac9 	bl	8000b14 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fac5 	bl	8000b14 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0d8      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ee      	beq.n	8001586 <HAL_RCC_OscConfig+0x386>
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015aa:	f7ff fab3 	bl	8000b14 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff faaf 	bl	8000b14 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e0c2      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ee      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d105      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a3c      	ldr	r2, [pc, #240]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80ae 	beq.w	800174c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f0:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d06d      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d14b      	bne.n	800169c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b32      	ldr	r3, [pc, #200]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800160a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800160e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fa80 	bl	8000b14 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa7c 	bl	8000b14 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e091      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69da      	ldr	r2, [r3, #28]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	019b      	lsls	r3, r3, #6
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	3b01      	subs	r3, #1
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	071b      	lsls	r3, r3, #28
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fa4e 	bl	8000b14 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa4a 	bl	8000b14 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e05f      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x47c>
 800169a:	e057      	b.n	800174c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80016a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa34 	bl	8000b14 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fa30 	bl	8000b14 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e045      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_RCC_OscConfig+0x4d0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x4b0>
 80016ce:	e03d      	b.n	800174c <HAL_RCC_OscConfig+0x54c>
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_RCC_OscConfig+0x558>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d030      	beq.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d129      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d122      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001708:	4013      	ands	r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800170e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001710:	4293      	cmp	r3, r2
 8001712:	d119      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	3b01      	subs	r3, #1
 8001722:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d10f      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d107      	bne.n	8001748 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0d0      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d910      	bls.n	80017a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 020f 	bic.w	r2, r3, #15
 800178a:	4965      	ldr	r1, [pc, #404]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0b8      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d020      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b59      	ldr	r3, [pc, #356]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a58      	ldr	r2, [pc, #352]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	494d      	ldr	r1, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d040      	beq.n	8001880 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d107      	bne.n	8001816 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	4b47      	ldr	r3, [pc, #284]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d115      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e07f      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e073      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e06b      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4936      	ldr	r1, [pc, #216]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001850:	f7ff f960 	bl	8000b14 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff f95c 	bl	8000b14 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e053      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d210      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 020f 	bic.w	r2, r3, #15
 8001896:	4922      	ldr	r1, [pc, #136]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e032      	b.n	8001916 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d008      	beq.n	80018ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4916      	ldr	r1, [pc, #88]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ee:	f000 f821 	bl	8001934 <HAL_RCC_GetSysClockFreq>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x1cc>)
 8001900:	5ccb      	ldrb	r3, [r1, r3]
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1d0>)
 8001908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_ClockConfig+0x1d4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f8bc 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00
 8001924:	40023800 	.word	0x40023800
 8001928:	08004de0 	.word	0x08004de0
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001938:	b090      	sub	sp, #64	; 0x40
 800193a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194c:	4b59      	ldr	r3, [pc, #356]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 030c 	and.w	r3, r3, #12
 8001954:	2b08      	cmp	r3, #8
 8001956:	d00d      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x40>
 8001958:	2b08      	cmp	r3, #8
 800195a:	f200 80a1 	bhi.w	8001aa0 <HAL_RCC_GetSysClockFreq+0x16c>
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x34>
 8001962:	2b04      	cmp	r3, #4
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x3a>
 8001966:	e09b      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800196c:	e09b      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196e:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001972:	e098      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001974:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800197e:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d028      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198a:	4b4a      	ldr	r3, [pc, #296]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	099b      	lsrs	r3, r3, #6
 8001990:	2200      	movs	r2, #0
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	627a      	str	r2, [r7, #36]	; 0x24
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800199c:	2100      	movs	r1, #0
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 80019a0:	fb03 f201 	mul.w	r2, r3, r1
 80019a4:	2300      	movs	r3, #0
 80019a6:	fb00 f303 	mul.w	r3, r0, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	4a43      	ldr	r2, [pc, #268]	; (8001abc <HAL_RCC_GetSysClockFreq+0x188>)
 80019ae:	fba0 1202 	umull	r1, r2, r0, r2
 80019b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019b4:	460a      	mov	r2, r1
 80019b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80019b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ba:	4413      	add	r3, r2
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c0:	2200      	movs	r2, #0
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	61fa      	str	r2, [r7, #28]
 80019c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019ce:	f7fe fc37 	bl	8000240 <__aeabi_uldivmod>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4613      	mov	r3, r2
 80019d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019da:	e053      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	099b      	lsrs	r3, r3, #6
 80019e2:	2200      	movs	r2, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	617a      	str	r2, [r7, #20]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ee:	f04f 0b00 	mov.w	fp, #0
 80019f2:	4652      	mov	r2, sl
 80019f4:	465b      	mov	r3, fp
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a04:	0150      	lsls	r0, r2, #5
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a0e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a26:	ebb2 0408 	subs.w	r4, r2, r8
 8001a2a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	00eb      	lsls	r3, r5, #3
 8001a38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a3c:	00e2      	lsls	r2, r4, #3
 8001a3e:	4614      	mov	r4, r2
 8001a40:	461d      	mov	r5, r3
 8001a42:	eb14 030a 	adds.w	r3, r4, sl
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	eb45 030b 	adc.w	r3, r5, fp
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	028b      	lsls	r3, r1, #10
 8001a5e:	4621      	mov	r1, r4
 8001a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a64:	4621      	mov	r1, r4
 8001a66:	028a      	lsls	r2, r1, #10
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	60fa      	str	r2, [r7, #12]
 8001a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a78:	f7fe fbe2 	bl	8000240 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3740      	adds	r7, #64	; 0x40
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	017d7840 	.word	0x017d7840

08001ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e049      	b.n	8001b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe ff34 	bl	8000954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f000 f96e 	bl	8001de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01b      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f06f 0202 	mvn.w	r2, #2
 8001ba2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8f3 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001bbe:	e005      	b.n	8001bcc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8e5 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8f6 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01b      	beq.n	8001c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0204 	mvn.w	r2, #4
 8001bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8cd 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c0a:	e005      	b.n	8001c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f8bf 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8d0 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01b      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f06f 0208 	mvn.w	r2, #8
 8001c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8a7 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001c56:	e005      	b.n	8001c64 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f899 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f8aa 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d01b      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f06f 0210 	mvn.w	r2, #16
 8001c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f881 	bl	8001da4 <HAL_TIM_IC_CaptureCallback>
 8001ca2:	e005      	b.n	8001cb0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f873 	bl	8001d90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f884 	bl	8001db8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00c      	beq.n	8001cda <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d007      	beq.n	8001cda <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0201 	mvn.w	r2, #1
 8001cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f851 	bl	8001d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00c      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8001d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f9aa 	bl	800205c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00c      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f9a2 	bl	8002070 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f83e 	bl	8001dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0320 	and.w	r3, r3, #32
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0220 	mvn.w	r2, #32
 8001d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f96a 	bl	8002048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a43      	ldr	r2, [pc, #268]	; (8001f00 <TIM_Base_SetConfig+0x120>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d013      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfe:	d00f      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a40      	ldr	r2, [pc, #256]	; (8001f04 <TIM_Base_SetConfig+0x124>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00b      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3f      	ldr	r2, [pc, #252]	; (8001f08 <TIM_Base_SetConfig+0x128>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d007      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3e      	ldr	r2, [pc, #248]	; (8001f0c <TIM_Base_SetConfig+0x12c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d003      	beq.n	8001e20 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3d      	ldr	r2, [pc, #244]	; (8001f10 <TIM_Base_SetConfig+0x130>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d108      	bne.n	8001e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a32      	ldr	r2, [pc, #200]	; (8001f00 <TIM_Base_SetConfig+0x120>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d02b      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e40:	d027      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <TIM_Base_SetConfig+0x124>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d023      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2e      	ldr	r2, [pc, #184]	; (8001f08 <TIM_Base_SetConfig+0x128>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <TIM_Base_SetConfig+0x12c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01b      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <TIM_Base_SetConfig+0x130>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d017      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2b      	ldr	r2, [pc, #172]	; (8001f14 <TIM_Base_SetConfig+0x134>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <TIM_Base_SetConfig+0x138>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00f      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <TIM_Base_SetConfig+0x13c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00b      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <TIM_Base_SetConfig+0x140>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <TIM_Base_SetConfig+0x144>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d003      	beq.n	8001e92 <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <TIM_Base_SetConfig+0x148>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d108      	bne.n	8001ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <TIM_Base_SetConfig+0x120>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d003      	beq.n	8001ed2 <TIM_Base_SetConfig+0xf2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <TIM_Base_SetConfig+0x130>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d103      	bne.n	8001eda <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f043 0204 	orr.w	r2, r3, #4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	601a      	str	r2, [r3, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40000400 	.word	0x40000400
 8001f08:	40000800 	.word	0x40000800
 8001f0c:	40000c00 	.word	0x40000c00
 8001f10:	40010400 	.word	0x40010400
 8001f14:	40014000 	.word	0x40014000
 8001f18:	40014400 	.word	0x40014400
 8001f1c:	40014800 	.word	0x40014800
 8001f20:	40001800 	.word	0x40001800
 8001f24:	40001c00 	.word	0x40001c00
 8001f28:	40002000 	.word	0x40002000

08001f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e06d      	b.n	8002020 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a30      	ldr	r2, [pc, #192]	; (800202c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d108      	bne.n	8001f8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d022      	beq.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d01d      	beq.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d018      	beq.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	; (8002038 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00e      	beq.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a16      	ldr	r2, [pc, #88]	; (8002040 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d10c      	bne.n	800200e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ffa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	4313      	orrs	r3, r2
 8002004:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40010000 	.word	0x40010000
 8002030:	40010400 	.word	0x40010400
 8002034:	40000400 	.word	0x40000400
 8002038:	40000800 	.word	0x40000800
 800203c:	40000c00 	.word	0x40000c00
 8002040:	40014000 	.word	0x40014000
 8002044:	40001800 	.word	0x40001800

08002048 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800209a:	f3ef 8305 	mrs	r3, IPSR
 800209e:	60bb      	str	r3, [r7, #8]
  return(result);
 80020a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020a6:	f3ef 8310 	mrs	r3, PRIMASK
 80020aa:	607b      	str	r3, [r7, #4]
  return(result);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80020b2:	f3ef 8311 	mrs	r3, BASEPRI
 80020b6:	603b      	str	r3, [r7, #0]
  return(result);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <osKernelInitialize+0x3a>
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <osKernelInitialize+0x64>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d103      	bne.n	80020ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80020c6:	f06f 0305 	mvn.w	r3, #5
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e00c      	b.n	80020e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <osKernelInitialize+0x64>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <osKernelInitialize+0x64>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e002      	b.n	80020e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80020e8:	68fb      	ldr	r3, [r7, #12]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	20000084 	.word	0x20000084

080020fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002102:	f3ef 8305 	mrs	r3, IPSR
 8002106:	60bb      	str	r3, [r7, #8]
  return(result);
 8002108:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800210e:	f3ef 8310 	mrs	r3, PRIMASK
 8002112:	607b      	str	r3, [r7, #4]
  return(result);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800211a:	f3ef 8311 	mrs	r3, BASEPRI
 800211e:	603b      	str	r3, [r7, #0]
  return(result);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <osKernelStart+0x3a>
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <osKernelStart+0x68>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d103      	bne.n	8002136 <osKernelStart+0x3a>
    stat = osErrorISR;
 800212e:	f06f 0305 	mvn.w	r3, #5
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e010      	b.n	8002158 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <osKernelStart+0x68>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d109      	bne.n	8002152 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800213e:	f7ff ffa1 	bl	8002084 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <osKernelStart+0x68>)
 8002144:	2202      	movs	r2, #2
 8002146:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002148:	f001 f90a 	bl	8003360 <vTaskStartScheduler>
      stat = osOK;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e002      	b.n	8002158 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000084 	.word	0x20000084

08002168 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b090      	sub	sp, #64	; 0x40
 800216c:	af04      	add	r7, sp, #16
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002178:	f3ef 8305 	mrs	r3, IPSR
 800217c:	61fb      	str	r3, [r7, #28]
  return(result);
 800217e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002180:	2b00      	cmp	r3, #0
 8002182:	f040 808f 	bne.w	80022a4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002186:	f3ef 8310 	mrs	r3, PRIMASK
 800218a:	61bb      	str	r3, [r7, #24]
  return(result);
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002192:	f3ef 8311 	mrs	r3, BASEPRI
 8002196:	617b      	str	r3, [r7, #20]
  return(result);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <osThreadNew+0x3e>
 800219e:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <osThreadNew+0x148>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d07e      	beq.n	80022a4 <osThreadNew+0x13c>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d07b      	beq.n	80022a4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80021b0:	2318      	movs	r3, #24
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
 80021bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d045      	beq.n	8002250 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <osThreadNew+0x6a>
        name = attr->name;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <osThreadNew+0x90>
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	2b38      	cmp	r3, #56	; 0x38
 80021ea:	d805      	bhi.n	80021f8 <osThreadNew+0x90>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <osThreadNew+0x94>
        return (NULL);
 80021f8:	2300      	movs	r3, #0
 80021fa:	e054      	b.n	80022a6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <osThreadNew+0xca>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b5b      	cmp	r3, #91	; 0x5b
 800221a:	d90a      	bls.n	8002232 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <osThreadNew+0xca>
        mem = 1;
 800222c:	2301      	movs	r3, #1
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	e010      	b.n	8002254 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <osThreadNew+0xec>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d108      	bne.n	8002254 <osThreadNew+0xec>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <osThreadNew+0xec>
          mem = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
 800224e:	e001      	b.n	8002254 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d110      	bne.n	800227c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002262:	9202      	str	r2, [sp, #8]
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800226e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fe11 	bl	8002e98 <xTaskCreateStatic>
 8002276:	4603      	mov	r3, r0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	e013      	b.n	80022a4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d110      	bne.n	80022a4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	b29a      	uxth	r2, r3
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fe62 	bl	8002f5e <xTaskCreate>
 800229a:	4603      	mov	r3, r0
 800229c:	2b01      	cmp	r3, #1
 800229e:	d001      	beq.n	80022a4 <osThreadNew+0x13c>
          hTask = NULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80022a4:	693b      	ldr	r3, [r7, #16]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3730      	adds	r7, #48	; 0x30
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000084 	.word	0x20000084

080022b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80022c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <vApplicationGetIdleTaskMemory+0x30>)
 80022ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2280      	movs	r2, #128	; 0x80
 80022d0:	601a      	str	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000088 	.word	0x20000088
 80022e4:	200000e4 	.word	0x200000e4

080022e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <vApplicationGetTimerTaskMemory+0x2c>)
 80022f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <vApplicationGetTimerTaskMemory+0x30>)
 80022fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002306:	601a      	str	r2, [r3, #0]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	200002e4 	.word	0x200002e4
 8002318:	20000340 	.word	0x20000340

0800231c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f103 0208 	add.w	r2, r3, #8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0208 	add.w	r2, r3, #8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0208 	add.w	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	601a      	str	r2, [r3, #0]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023be:	b480      	push	{r7}
 80023c0:	b085      	sub	sp, #20
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d103      	bne.n	80023de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	e00c      	b.n	80023f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3308      	adds	r3, #8
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e002      	b.n	80023ec <vListInsert+0x2e>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d2f6      	bcs.n	80023e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6892      	ldr	r2, [r2, #8]
 8002446:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6852      	ldr	r2, [r2, #4]
 8002450:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	d103      	bne.n	8002464 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10c      	bne.n	80024b2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	b672      	cpsid	i
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	b662      	cpsie	i
 80024ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80024b2:	f002 f903 	bl	80046bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	441a      	add	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	3b01      	subs	r3, #1
 80024e4:	68f9      	ldr	r1, [r7, #12]
 80024e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	441a      	add	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22ff      	movs	r2, #255	; 0xff
 80024f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d114      	bne.n	8002532 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01a      	beq.n	8002546 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3310      	adds	r3, #16
 8002514:	4618      	mov	r0, r3
 8002516:	f001 f9bb 	bl	8003890 <xTaskRemoveFromEventList>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <xQueueGenericReset+0xd0>)
 8002522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	f3bf 8f6f 	isb	sy
 8002530:	e009      	b.n	8002546 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3310      	adds	r3, #16
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fef0 	bl	800231c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3324      	adds	r3, #36	; 0x24
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff feeb 	bl	800231c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002546:	f002 f8ed 	bl	8004724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800254a:	2301      	movs	r3, #1
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	e000ed04 	.word	0xe000ed04

08002558 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10c      	bne.n	8002586 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002570:	b672      	cpsid	i
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	b662      	cpsie	i
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002582:	bf00      	nop
 8002584:	e7fe      	b.n	8002584 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10c      	bne.n	80025a6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	b672      	cpsid	i
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	b662      	cpsie	i
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025a2:	bf00      	nop
 80025a4:	e7fe      	b.n	80025a4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <xQueueGenericCreateStatic+0x5a>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <xQueueGenericCreateStatic+0x5e>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <xQueueGenericCreateStatic+0x60>
 80025b6:	2300      	movs	r3, #0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10c      	bne.n	80025d6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	b672      	cpsid	i
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	b662      	cpsie	i
 80025d0:	623b      	str	r3, [r7, #32]
}
 80025d2:	bf00      	nop
 80025d4:	e7fe      	b.n	80025d4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <xQueueGenericCreateStatic+0x8a>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <xQueueGenericCreateStatic+0x8e>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <xQueueGenericCreateStatic+0x90>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10c      	bne.n	8002606 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	b672      	cpsid	i
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	b662      	cpsie	i
 8002600:	61fb      	str	r3, [r7, #28]
}
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002606:	2350      	movs	r3, #80	; 0x50
 8002608:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b50      	cmp	r3, #80	; 0x50
 800260e:	d00c      	beq.n	800262a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	b672      	cpsid	i
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	b662      	cpsie	i
 8002624:	61bb      	str	r3, [r7, #24]
}
 8002626:	bf00      	nop
 8002628:	e7fe      	b.n	8002628 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800262a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800263e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f805 	bl	800265c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002654:	4618      	mov	r0, r3
 8002656:	3730      	adds	r7, #48	; 0x30
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e002      	b.n	800267e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800268a:	2101      	movs	r1, #1
 800268c:	69b8      	ldr	r0, [r7, #24]
 800268e:	f7ff fef9 	bl	8002484 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08e      	sub	sp, #56	; 0x38
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10c      	bne.n	80026da <xQueueGenericSend+0x36>
	__asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	b672      	cpsid	i
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	b662      	cpsie	i
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <xQueueGenericSend+0x44>
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <xQueueGenericSend+0x48>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <xQueueGenericSend+0x4a>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <xQueueGenericSend+0x68>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	b672      	cpsid	i
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	b662      	cpsie	i
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002708:	bf00      	nop
 800270a:	e7fe      	b.n	800270a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d103      	bne.n	800271a <xQueueGenericSend+0x76>
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <xQueueGenericSend+0x7a>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <xQueueGenericSend+0x7c>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10c      	bne.n	800273e <xQueueGenericSend+0x9a>
	__asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	b672      	cpsid	i
 800272a:	f383 8811 	msr	BASEPRI, r3
 800272e:	f3bf 8f6f 	isb	sy
 8002732:	f3bf 8f4f 	dsb	sy
 8002736:	b662      	cpsie	i
 8002738:	623b      	str	r3, [r7, #32]
}
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800273e:	f001 fa6d 	bl	8003c1c <xTaskGetSchedulerState>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <xQueueGenericSend+0xaa>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueGenericSend+0xae>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueGenericSend+0xb0>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10c      	bne.n	8002772 <xQueueGenericSend+0xce>
	__asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	b672      	cpsid	i
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	b662      	cpsie	i
 800276c:	61fb      	str	r3, [r7, #28]
}
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002772:	f001 ffa3 	bl	80046bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <xQueueGenericSend+0xe4>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d129      	bne.n	80027dc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800278e:	f000 fa15 	bl	8002bbc <prvCopyDataToQueue>
 8002792:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	3324      	adds	r3, #36	; 0x24
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 f875 	bl	8003890 <xTaskRemoveFromEventList>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d013      	beq.n	80027d4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80027ac:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <xQueueGenericSend+0x208>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	e00a      	b.n	80027d4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d007      	beq.n	80027d4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <xQueueGenericSend+0x208>)
 80027c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027d4:	f001 ffa6 	bl	8004724 <vPortExitCritical>
				return pdPASS;
 80027d8:	2301      	movs	r3, #1
 80027da:	e063      	b.n	80028a4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027e2:	f001 ff9f 	bl	8004724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	e05c      	b.n	80028a4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4618      	mov	r0, r3
 80027f6:	f001 f8b1 	bl	800395c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027fa:	2301      	movs	r3, #1
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027fe:	f001 ff91 	bl	8004724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002802:	f000 fe17 	bl	8003434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002806:	f001 ff59 	bl	80046bc <vPortEnterCritical>
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002810:	b25b      	sxtb	r3, r3
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d103      	bne.n	8002820 <xQueueGenericSend+0x17c>
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002826:	b25b      	sxtb	r3, r3
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d103      	bne.n	8002836 <xQueueGenericSend+0x192>
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002836:	f001 ff75 	bl	8004724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800283a:	1d3a      	adds	r2, r7, #4
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f8a0 	bl	8003988 <xTaskCheckForTimeOut>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d124      	bne.n	8002898 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800284e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002850:	f000 faac 	bl	8002dac <prvIsQueueFull>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d018      	beq.n	800288c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	3310      	adds	r3, #16
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f000 ffc0 	bl	80037e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286a:	f000 fa37 	bl	8002cdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800286e:	f000 fdef 	bl	8003450 <xTaskResumeAll>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f47f af7c 	bne.w	8002772 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <xQueueGenericSend+0x208>)
 800287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f3bf 8f4f 	dsb	sy
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	e772      	b.n	8002772 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800288c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800288e:	f000 fa25 	bl	8002cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002892:	f000 fddd 	bl	8003450 <xTaskResumeAll>
 8002896:	e76c      	b.n	8002772 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800289a:	f000 fa1f 	bl	8002cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800289e:	f000 fdd7 	bl	8003450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80028a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3738      	adds	r7, #56	; 0x38
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	e000ed04 	.word	0xe000ed04

080028b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	; 0x38
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10c      	bne.n	80028e2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	b672      	cpsid	i
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	b662      	cpsie	i
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <xQueueGenericSendFromISR+0x40>
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <xQueueGenericSendFromISR+0x44>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <xQueueGenericSendFromISR+0x46>
 80028f4:	2300      	movs	r3, #0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fe:	b672      	cpsid	i
 8002900:	f383 8811 	msr	BASEPRI, r3
 8002904:	f3bf 8f6f 	isb	sy
 8002908:	f3bf 8f4f 	dsb	sy
 800290c:	b662      	cpsie	i
 800290e:	623b      	str	r3, [r7, #32]
}
 8002910:	bf00      	nop
 8002912:	e7fe      	b.n	8002912 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d103      	bne.n	8002922 <xQueueGenericSendFromISR+0x72>
 800291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <xQueueGenericSendFromISR+0x76>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <xQueueGenericSendFromISR+0x78>
 8002926:	2300      	movs	r3, #0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10c      	bne.n	8002946 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	b672      	cpsid	i
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	b662      	cpsie	i
 8002940:	61fb      	str	r3, [r7, #28]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002946:	f001 ffa1 	bl	800488c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800294a:	f3ef 8211 	mrs	r2, BASEPRI
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	b672      	cpsid	i
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	b662      	cpsie	i
 8002962:	61ba      	str	r2, [r7, #24]
 8002964:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002966:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <xQueueGenericSendFromISR+0xcc>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d12c      	bne.n	80029d6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800298c:	f000 f916 	bl	8002bbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002990:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d112      	bne.n	80029c0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	3324      	adds	r3, #36	; 0x24
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 ff72 	bl	8003890 <xTaskRemoveFromEventList>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00e      	beq.n	80029d0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e007      	b.n	80029d0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029c4:	3301      	adds	r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	b25a      	sxtb	r2, r3
 80029ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80029d0:	2301      	movs	r3, #1
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80029d4:	e001      	b.n	80029da <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3738      	adds	r7, #56	; 0x38
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	; 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10c      	bne.n	8002a24 <xQueueReceive+0x34>
	__asm volatile
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	b672      	cpsid	i
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	b662      	cpsie	i
 8002a1e:	623b      	str	r3, [r7, #32]
}
 8002a20:	bf00      	nop
 8002a22:	e7fe      	b.n	8002a22 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <xQueueReceive+0x42>
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <xQueueReceive+0x46>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <xQueueReceive+0x48>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10c      	bne.n	8002a56 <xQueueReceive+0x66>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a40:	b672      	cpsid	i
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	b662      	cpsie	i
 8002a50:	61fb      	str	r3, [r7, #28]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a56:	f001 f8e1 	bl	8003c1c <xTaskGetSchedulerState>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <xQueueReceive+0x76>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <xQueueReceive+0x7a>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <xQueueReceive+0x7c>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10c      	bne.n	8002a8a <xQueueReceive+0x9a>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	b672      	cpsid	i
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	b662      	cpsie	i
 8002a84:	61bb      	str	r3, [r7, #24]
}
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a8a:	f001 fe17 	bl	80046bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01f      	beq.n	8002ada <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9e:	f000 f8f7 	bl	8002c90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00f      	beq.n	8002ad2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 feea 	bl	8003890 <xTaskRemoveFromEventList>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ac2:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <xQueueReceive+0x1c8>)
 8002ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ad2:	f001 fe27 	bl	8004724 <vPortExitCritical>
				return pdPASS;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e069      	b.n	8002bae <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ae0:	f001 fe20 	bl	8004724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e062      	b.n	8002bae <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 ff32 	bl	800395c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002af8:	2301      	movs	r3, #1
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002afc:	f001 fe12 	bl	8004724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b00:	f000 fc98 	bl	8003434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b04:	f001 fdda 	bl	80046bc <vPortEnterCritical>
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d103      	bne.n	8002b1e <xQueueReceive+0x12e>
 8002b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2a:	d103      	bne.n	8002b34 <xQueueReceive+0x144>
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b34:	f001 fdf6 	bl	8004724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b38:	1d3a      	adds	r2, r7, #4
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 ff21 	bl	8003988 <xTaskCheckForTimeOut>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d123      	bne.n	8002b94 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b4e:	f000 f917 	bl	8002d80 <prvIsQueueEmpty>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d017      	beq.n	8002b88 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	3324      	adds	r3, #36	; 0x24
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fe41 	bl	80037e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b68:	f000 f8b8 	bl	8002cdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b6c:	f000 fc70 	bl	8003450 <xTaskResumeAll>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d189      	bne.n	8002a8a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <xQueueReceive+0x1c8>)
 8002b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	e780      	b.n	8002a8a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b8a:	f000 f8a7 	bl	8002cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b8e:	f000 fc5f 	bl	8003450 <xTaskResumeAll>
 8002b92:	e77a      	b.n	8002a8a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b96:	f000 f8a1 	bl	8002cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b9a:	f000 fc59 	bl	8003450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ba0:	f000 f8ee 	bl	8002d80 <prvIsQueueEmpty>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f43f af6f 	beq.w	8002a8a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002bac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3730      	adds	r7, #48	; 0x30
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000ed04 	.word	0xe000ed04

08002bbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10d      	bne.n	8002bf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d14d      	bne.n	8002c7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f836 	bl	8003c58 <xTaskPriorityDisinherit>
 8002bec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	e043      	b.n	8002c7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d119      	bne.n	8002c30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6858      	ldr	r0, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	461a      	mov	r2, r3
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	f002 f894 	bl	8004d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	441a      	add	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d32b      	bcc.n	8002c7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	e026      	b.n	8002c7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	68d8      	ldr	r0, [r3, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	f002 f87a 	bl	8004d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	425b      	negs	r3, r3
 8002c4a:	441a      	add	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d207      	bcs.n	8002c6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	425b      	negs	r3, r3
 8002c66:	441a      	add	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d105      	bne.n	8002c7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c86:	697b      	ldr	r3, [r7, #20]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d303      	bcc.n	8002cc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68d9      	ldr	r1, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	461a      	mov	r2, r3
 8002cce:	6838      	ldr	r0, [r7, #0]
 8002cd0:	f002 f830 	bl	8004d34 <memcpy>
	}
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ce4:	f001 fcea 	bl	80046bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cf0:	e011      	b.n	8002d16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d012      	beq.n	8002d20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3324      	adds	r3, #36	; 0x24
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fdc6 	bl	8003890 <xTaskRemoveFromEventList>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d0a:	f000 fea3 	bl	8003a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	dce9      	bgt.n	8002cf2 <prvUnlockQueue+0x16>
 8002d1e:	e000      	b.n	8002d22 <prvUnlockQueue+0x46>
					break;
 8002d20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	22ff      	movs	r2, #255	; 0xff
 8002d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d2a:	f001 fcfb 	bl	8004724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d2e:	f001 fcc5 	bl	80046bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d3a:	e011      	b.n	8002d60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3310      	adds	r3, #16
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fda1 	bl	8003890 <xTaskRemoveFromEventList>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d54:	f000 fe7e 	bl	8003a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d58:	7bbb      	ldrb	r3, [r7, #14]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	dce9      	bgt.n	8002d3c <prvUnlockQueue+0x60>
 8002d68:	e000      	b.n	8002d6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	22ff      	movs	r2, #255	; 0xff
 8002d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d74:	f001 fcd6 	bl	8004724 <vPortExitCritical>
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d88:	f001 fc98 	bl	80046bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d94:	2301      	movs	r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e001      	b.n	8002d9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d9e:	f001 fcc1 	bl	8004724 <vPortExitCritical>

	return xReturn;
 8002da2:	68fb      	ldr	r3, [r7, #12]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002db4:	f001 fc82 	bl	80046bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d102      	bne.n	8002dca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e001      	b.n	8002dce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dce:	f001 fca9 	bl	8004724 <vPortExitCritical>

	return xReturn;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e014      	b.n	8002e16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <vQueueAddToRegistry+0x50>)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002df8:	490c      	ldr	r1, [pc, #48]	; (8002e2c <vQueueAddToRegistry+0x50>)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <vQueueAddToRegistry+0x50>)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e0e:	e006      	b.n	8002e1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3301      	adds	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b07      	cmp	r3, #7
 8002e1a:	d9e7      	bls.n	8002dec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000740 	.word	0x20000740

08002e30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e40:	f001 fc3c 	bl	80046bc <vPortEnterCritical>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e4a:	b25b      	sxtb	r3, r3
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d103      	bne.n	8002e5a <vQueueWaitForMessageRestricted+0x2a>
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d103      	bne.n	8002e70 <vQueueWaitForMessageRestricted+0x40>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e70:	f001 fc58 	bl	8004724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3324      	adds	r3, #36	; 0x24
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fcd5 	bl	8003834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff26 	bl	8002cdc <prvUnlockQueue>
	}
 8002e90:	bf00      	nop
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08e      	sub	sp, #56	; 0x38
 8002e9c:	af04      	add	r7, sp, #16
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10c      	bne.n	8002ec6 <xTaskCreateStatic+0x2e>
	__asm volatile
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	b672      	cpsid	i
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	b662      	cpsie	i
 8002ec0:	623b      	str	r3, [r7, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10c      	bne.n	8002ee6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	b672      	cpsid	i
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	b662      	cpsie	i
 8002ee0:	61fb      	str	r3, [r7, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ee6:	235c      	movs	r3, #92	; 0x5c
 8002ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b5c      	cmp	r3, #92	; 0x5c
 8002eee:	d00c      	beq.n	8002f0a <xTaskCreateStatic+0x72>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	b672      	cpsid	i
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	b662      	cpsie	i
 8002f04:	61bb      	str	r3, [r7, #24]
}
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01e      	beq.n	8002f50 <xTaskCreateStatic+0xb8>
 8002f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	9303      	str	r3, [sp, #12]
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	9302      	str	r3, [sp, #8]
 8002f32:	f107 0314 	add.w	r3, r7, #20
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f850 	bl	8002fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f4a:	f000 f8df 	bl	800310c <prvAddNewTaskToReadyList>
 8002f4e:	e001      	b.n	8002f54 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f54:	697b      	ldr	r3, [r7, #20]
	}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3728      	adds	r7, #40	; 0x28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b08c      	sub	sp, #48	; 0x30
 8002f62:	af04      	add	r7, sp, #16
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fcce 	bl	8004914 <pvPortMalloc>
 8002f78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00e      	beq.n	8002f9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f80:	205c      	movs	r0, #92	; 0x5c
 8002f82:	f001 fcc7 	bl	8004914 <pvPortMalloc>
 8002f86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
 8002f94:	e005      	b.n	8002fa2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f001 fd86 	bl	8004aa8 <vPortFree>
 8002f9c:	e001      	b.n	8002fa2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d017      	beq.n	8002fd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	9302      	str	r3, [sp, #8]
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f80e 	bl	8002fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fcc:	69f8      	ldr	r0, [r7, #28]
 8002fce:	f000 f89d 	bl	800310c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
 8002fd6:	e002      	b.n	8002fde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002fde:	69bb      	ldr	r3, [r7, #24]
	}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	461a      	mov	r2, r3
 8003000:	21a5      	movs	r1, #165	; 0xa5
 8003002:	f001 fe6b 	bl	8004cdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003010:	440b      	add	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f023 0307 	bic.w	r3, r3, #7
 800301e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302e:	b672      	cpsid	i
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	b662      	cpsie	i
 800303e:	617b      	str	r3, [r7, #20]
}
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01f      	beq.n	800308a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	e012      	b.n	8003076 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	7819      	ldrb	r1, [r3, #0]
 8003058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	4413      	add	r3, r2
 800305e:	3334      	adds	r3, #52	; 0x34
 8003060:	460a      	mov	r2, r1
 8003062:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d006      	beq.n	800307e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d9e9      	bls.n	8003050 <prvInitialiseNewTask+0x68>
 800307c:	e000      	b.n	8003080 <prvInitialiseNewTask+0x98>
			{
				break;
 800307e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003088:	e003      	b.n	8003092 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	2b37      	cmp	r3, #55	; 0x37
 8003096:	d901      	bls.n	800309c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003098:	2337      	movs	r3, #55	; 0x37
 800309a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	2200      	movs	r2, #0
 80030ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	3304      	adds	r3, #4
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f952 	bl	800235c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	3318      	adds	r3, #24
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f94d 	bl	800235c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	2200      	movs	r2, #0
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	68f9      	ldr	r1, [r7, #12]
 80030ea:	69b8      	ldr	r0, [r7, #24]
 80030ec:	f001 f9d6 	bl	800449c <pxPortInitialiseStack>
 80030f0:	4602      	mov	r2, r0
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003102:	bf00      	nop
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003114:	f001 fad2 	bl	80046bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003118:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <prvAddNewTaskToReadyList+0xc4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3301      	adds	r3, #1
 800311e:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <prvAddNewTaskToReadyList+0xc4>)
 8003120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003122:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <prvAddNewTaskToReadyList+0xc8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800312a:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <prvAddNewTaskToReadyList+0xc8>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <prvAddNewTaskToReadyList+0xc4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d110      	bne.n	800315a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003138:	f000 fcb0 	bl	8003a9c <prvInitialiseTaskLists>
 800313c:	e00d      	b.n	800315a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <prvAddNewTaskToReadyList+0xcc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <prvAddNewTaskToReadyList+0xc8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	429a      	cmp	r2, r3
 8003152:	d802      	bhi.n	800315a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <prvAddNewTaskToReadyList+0xc8>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <prvAddNewTaskToReadyList+0xd0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3301      	adds	r3, #1
 8003160:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <prvAddNewTaskToReadyList+0xd0>)
 8003162:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <prvAddNewTaskToReadyList+0xd0>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <prvAddNewTaskToReadyList+0xd4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d903      	bls.n	8003180 <prvAddNewTaskToReadyList+0x74>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <prvAddNewTaskToReadyList+0xd4>)
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <prvAddNewTaskToReadyList+0xd8>)
 800318e:	441a      	add	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f7ff f8ed 	bl	8002376 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800319c:	f001 fac2 	bl	8004724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031a0:	4b0d      	ldr	r3, [pc, #52]	; (80031d8 <prvAddNewTaskToReadyList+0xcc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00e      	beq.n	80031c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <prvAddNewTaskToReadyList+0xc8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d207      	bcs.n	80031c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <prvAddNewTaskToReadyList+0xdc>)
 80031b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000c54 	.word	0x20000c54
 80031d4:	20000780 	.word	0x20000780
 80031d8:	20000c60 	.word	0x20000c60
 80031dc:	20000c70 	.word	0x20000c70
 80031e0:	20000c5c 	.word	0x20000c5c
 80031e4:	20000784 	.word	0x20000784
 80031e8:	e000ed04 	.word	0xe000ed04

080031ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10c      	bne.n	800321a <vTaskDelayUntil+0x2e>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	b672      	cpsid	i
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	b662      	cpsie	i
 8003214:	617b      	str	r3, [r7, #20]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10c      	bne.n	800323a <vTaskDelayUntil+0x4e>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	b672      	cpsid	i
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	b662      	cpsie	i
 8003234:	613b      	str	r3, [r7, #16]
}
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800323a:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <vTaskDelayUntil+0xfc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <vTaskDelayUntil+0x70>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	b672      	cpsid	i
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	b662      	cpsie	i
 8003256:	60fb      	str	r3, [r7, #12]
}
 8003258:	bf00      	nop
 800325a:	e7fe      	b.n	800325a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800325c:	f000 f8ea 	bl	8003434 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <vTaskDelayUntil+0x100>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	4413      	add	r3, r2
 800326e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	429a      	cmp	r2, r3
 8003278:	d20b      	bcs.n	8003292 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	429a      	cmp	r2, r3
 8003282:	d211      	bcs.n	80032a8 <vTaskDelayUntil+0xbc>
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	429a      	cmp	r2, r3
 800328a:	d90d      	bls.n	80032a8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800328c:	2301      	movs	r3, #1
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
 8003290:	e00a      	b.n	80032a8 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	429a      	cmp	r2, r3
 800329a:	d303      	bcc.n	80032a4 <vTaskDelayUntil+0xb8>
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d901      	bls.n	80032a8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fd3d 	bl	8003d3c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80032c2:	f000 f8c5 	bl	8003450 <xTaskResumeAll>
 80032c6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d107      	bne.n	80032de <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <vTaskDelayUntil+0x104>)
 80032d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032de:	bf00      	nop
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000c7c 	.word	0x20000c7c
 80032ec:	20000c58 	.word	0x20000c58
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d019      	beq.n	800333a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003306:	4b14      	ldr	r3, [pc, #80]	; (8003358 <vTaskDelay+0x64>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <vTaskDelay+0x34>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	b672      	cpsid	i
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	b662      	cpsie	i
 8003322:	60bb      	str	r3, [r7, #8]
}
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003328:	f000 f884 	bl	8003434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800332c:	2100      	movs	r1, #0
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fd04 	bl	8003d3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003334:	f000 f88c 	bl	8003450 <xTaskResumeAll>
 8003338:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d107      	bne.n	8003350 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <vTaskDelay+0x68>)
 8003342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000c7c 	.word	0x20000c7c
 800335c:	e000ed04 	.word	0xe000ed04

08003360 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800336e:	463a      	mov	r2, r7
 8003370:	1d39      	adds	r1, r7, #4
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe ff9c 	bl	80022b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800337c:	6839      	ldr	r1, [r7, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	9202      	str	r2, [sp, #8]
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	2300      	movs	r3, #0
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	2300      	movs	r3, #0
 800338c:	460a      	mov	r2, r1
 800338e:	4923      	ldr	r1, [pc, #140]	; (800341c <vTaskStartScheduler+0xbc>)
 8003390:	4823      	ldr	r0, [pc, #140]	; (8003420 <vTaskStartScheduler+0xc0>)
 8003392:	f7ff fd81 	bl	8002e98 <xTaskCreateStatic>
 8003396:	4603      	mov	r3, r0
 8003398:	4a22      	ldr	r2, [pc, #136]	; (8003424 <vTaskStartScheduler+0xc4>)
 800339a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <vTaskStartScheduler+0xc4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033a4:	2301      	movs	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e001      	b.n	80033ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80033b4:	f000 fd16 	bl	8003de4 <xTimerCreateTimerTask>
 80033b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d118      	bne.n	80033f2 <vTaskStartScheduler+0x92>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	b672      	cpsid	i
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	b662      	cpsie	i
 80033d4:	613b      	str	r3, [r7, #16]
}
 80033d6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <vTaskStartScheduler+0xc8>)
 80033da:	f04f 32ff 	mov.w	r2, #4294967295
 80033de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033e0:	4b12      	ldr	r3, [pc, #72]	; (800342c <vTaskStartScheduler+0xcc>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033e6:	4b12      	ldr	r3, [pc, #72]	; (8003430 <vTaskStartScheduler+0xd0>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033ec:	f001 f8e8 	bl	80045c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033f0:	e010      	b.n	8003414 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d10c      	bne.n	8003414 <vTaskStartScheduler+0xb4>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	b672      	cpsid	i
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	b662      	cpsie	i
 800340e:	60fb      	str	r3, [r7, #12]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <vTaskStartScheduler+0xb2>
}
 8003414:	bf00      	nop
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	08004d80 	.word	0x08004d80
 8003420:	08003a6d 	.word	0x08003a6d
 8003424:	20000c78 	.word	0x20000c78
 8003428:	20000c74 	.word	0x20000c74
 800342c:	20000c60 	.word	0x20000c60
 8003430:	20000c58 	.word	0x20000c58

08003434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <vTaskSuspendAll+0x18>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	4a03      	ldr	r2, [pc, #12]	; (800344c <vTaskSuspendAll+0x18>)
 8003440:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003442:	bf00      	nop
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	20000c7c 	.word	0x20000c7c

08003450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800345e:	4b43      	ldr	r3, [pc, #268]	; (800356c <xTaskResumeAll+0x11c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <xTaskResumeAll+0x30>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	b672      	cpsid	i
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	b662      	cpsie	i
 800347a:	603b      	str	r3, [r7, #0]
}
 800347c:	bf00      	nop
 800347e:	e7fe      	b.n	800347e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003480:	f001 f91c 	bl	80046bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003484:	4b39      	ldr	r3, [pc, #228]	; (800356c <xTaskResumeAll+0x11c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3b01      	subs	r3, #1
 800348a:	4a38      	ldr	r2, [pc, #224]	; (800356c <xTaskResumeAll+0x11c>)
 800348c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <xTaskResumeAll+0x11c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d162      	bne.n	800355c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <xTaskResumeAll+0x120>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d05e      	beq.n	800355c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800349e:	e02f      	b.n	8003500 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a0:	4b34      	ldr	r3, [pc, #208]	; (8003574 <xTaskResumeAll+0x124>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3318      	adds	r3, #24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe ffbf 	bl	8002430 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe ffba 	bl	8002430 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <xTaskResumeAll+0x128>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d903      	bls.n	80034d0 <xTaskResumeAll+0x80>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <xTaskResumeAll+0x128>)
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4a27      	ldr	r2, [pc, #156]	; (800357c <xTaskResumeAll+0x12c>)
 80034de:	441a      	add	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f7fe ff45 	bl	8002376 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f0:	4b23      	ldr	r3, [pc, #140]	; (8003580 <xTaskResumeAll+0x130>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d302      	bcc.n	8003500 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <xTaskResumeAll+0x134>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <xTaskResumeAll+0x124>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1cb      	bne.n	80034a0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800350e:	f000 fb65 	bl	8003bdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <xTaskResumeAll+0x138>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d010      	beq.n	8003540 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800351e:	f000 f847 	bl	80035b0 <xTaskIncrementTick>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003528:	4b16      	ldr	r3, [pc, #88]	; (8003584 <xTaskResumeAll+0x134>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3b01      	subs	r3, #1
 8003532:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f1      	bne.n	800351e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <xTaskResumeAll+0x138>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <xTaskResumeAll+0x134>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <xTaskResumeAll+0x13c>)
 800354e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800355c:	f001 f8e2 	bl	8004724 <vPortExitCritical>

	return xAlreadyYielded;
 8003560:	68bb      	ldr	r3, [r7, #8]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20000c7c 	.word	0x20000c7c
 8003570:	20000c54 	.word	0x20000c54
 8003574:	20000c14 	.word	0x20000c14
 8003578:	20000c5c 	.word	0x20000c5c
 800357c:	20000784 	.word	0x20000784
 8003580:	20000780 	.word	0x20000780
 8003584:	20000c68 	.word	0x20000c68
 8003588:	20000c64 	.word	0x20000c64
 800358c:	e000ed04 	.word	0xe000ed04

08003590 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <xTaskGetTickCount+0x1c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800359c:	687b      	ldr	r3, [r7, #4]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	20000c58 	.word	0x20000c58

080035b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ba:	4b50      	ldr	r3, [pc, #320]	; (80036fc <xTaskIncrementTick+0x14c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 808b 	bne.w	80036da <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035c4:	4b4e      	ldr	r3, [pc, #312]	; (8003700 <xTaskIncrementTick+0x150>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035cc:	4a4c      	ldr	r2, [pc, #304]	; (8003700 <xTaskIncrementTick+0x150>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d122      	bne.n	800361e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80035d8:	4b4a      	ldr	r3, [pc, #296]	; (8003704 <xTaskIncrementTick+0x154>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <xTaskIncrementTick+0x4c>
	__asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	b672      	cpsid	i
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	b662      	cpsie	i
 80035f6:	603b      	str	r3, [r7, #0]
}
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <xTaskIncrementTick+0x4a>
 80035fc:	4b41      	ldr	r3, [pc, #260]	; (8003704 <xTaskIncrementTick+0x154>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b41      	ldr	r3, [pc, #260]	; (8003708 <xTaskIncrementTick+0x158>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a3f      	ldr	r2, [pc, #252]	; (8003704 <xTaskIncrementTick+0x154>)
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4a3f      	ldr	r2, [pc, #252]	; (8003708 <xTaskIncrementTick+0x158>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b3e      	ldr	r3, [pc, #248]	; (800370c <xTaskIncrementTick+0x15c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	4a3d      	ldr	r2, [pc, #244]	; (800370c <xTaskIncrementTick+0x15c>)
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	f000 fadf 	bl	8003bdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800361e:	4b3c      	ldr	r3, [pc, #240]	; (8003710 <xTaskIncrementTick+0x160>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	429a      	cmp	r2, r3
 8003626:	d349      	bcc.n	80036bc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <xTaskIncrementTick+0x154>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <xTaskIncrementTick+0x160>)
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	601a      	str	r2, [r3, #0]
					break;
 800363a:	e03f      	b.n	80036bc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <xTaskIncrementTick+0x154>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d203      	bcs.n	800365c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003654:	4a2e      	ldr	r2, [pc, #184]	; (8003710 <xTaskIncrementTick+0x160>)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800365a:	e02f      	b.n	80036bc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3304      	adds	r3, #4
 8003660:	4618      	mov	r0, r3
 8003662:	f7fe fee5 	bl	8002430 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d004      	beq.n	8003678 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3318      	adds	r3, #24
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fedc 	bl	8002430 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <xTaskIncrementTick+0x164>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d903      	bls.n	800368c <xTaskIncrementTick+0xdc>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <xTaskIncrementTick+0x164>)
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <xTaskIncrementTick+0x168>)
 800369a:	441a      	add	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	3304      	adds	r3, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f7fe fe67 	bl	8002376 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	4b1b      	ldr	r3, [pc, #108]	; (800371c <xTaskIncrementTick+0x16c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d3b8      	bcc.n	8003628 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80036b6:	2301      	movs	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ba:	e7b5      	b.n	8003628 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <xTaskIncrementTick+0x16c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	4915      	ldr	r1, [pc, #84]	; (8003718 <xTaskIncrementTick+0x168>)
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d907      	bls.n	80036e4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80036d4:	2301      	movs	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e004      	b.n	80036e4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <xTaskIncrementTick+0x170>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3301      	adds	r3, #1
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <xTaskIncrementTick+0x170>)
 80036e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <xTaskIncrementTick+0x174>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80036f0:	697b      	ldr	r3, [r7, #20]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000c7c 	.word	0x20000c7c
 8003700:	20000c58 	.word	0x20000c58
 8003704:	20000c0c 	.word	0x20000c0c
 8003708:	20000c10 	.word	0x20000c10
 800370c:	20000c6c 	.word	0x20000c6c
 8003710:	20000c74 	.word	0x20000c74
 8003714:	20000c5c 	.word	0x20000c5c
 8003718:	20000784 	.word	0x20000784
 800371c:	20000780 	.word	0x20000780
 8003720:	20000c64 	.word	0x20000c64
 8003724:	20000c68 	.word	0x20000c68

08003728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800372e:	4b29      	ldr	r3, [pc, #164]	; (80037d4 <vTaskSwitchContext+0xac>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003736:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <vTaskSwitchContext+0xb0>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800373c:	e043      	b.n	80037c6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800373e:	4b26      	ldr	r3, [pc, #152]	; (80037d8 <vTaskSwitchContext+0xb0>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <vTaskSwitchContext+0xb4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e012      	b.n	8003772 <vTaskSwitchContext+0x4a>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <vTaskSwitchContext+0x44>
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	b672      	cpsid	i
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	b662      	cpsie	i
 8003766:	607b      	str	r3, [r7, #4]
}
 8003768:	bf00      	nop
 800376a:	e7fe      	b.n	800376a <vTaskSwitchContext+0x42>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3b01      	subs	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	491b      	ldr	r1, [pc, #108]	; (80037e0 <vTaskSwitchContext+0xb8>)
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0e2      	beq.n	800374c <vTaskSwitchContext+0x24>
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4a13      	ldr	r2, [pc, #76]	; (80037e0 <vTaskSwitchContext+0xb8>)
 8003792:	4413      	add	r3, r2
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3308      	adds	r3, #8
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d104      	bne.n	80037b6 <vTaskSwitchContext+0x8e>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4a09      	ldr	r2, [pc, #36]	; (80037e4 <vTaskSwitchContext+0xbc>)
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4a06      	ldr	r2, [pc, #24]	; (80037dc <vTaskSwitchContext+0xb4>)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6013      	str	r3, [r2, #0]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000c7c 	.word	0x20000c7c
 80037d8:	20000c68 	.word	0x20000c68
 80037dc:	20000c5c 	.word	0x20000c5c
 80037e0:	20000784 	.word	0x20000784
 80037e4:	20000780 	.word	0x20000780

080037e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10c      	bne.n	8003812 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	b672      	cpsid	i
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	b662      	cpsie	i
 800380c:	60fb      	str	r3, [r7, #12]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <vTaskPlaceOnEventList+0x48>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3318      	adds	r3, #24
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe fdcf 	bl	80023be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003820:	2101      	movs	r1, #1
 8003822:	6838      	ldr	r0, [r7, #0]
 8003824:	f000 fa8a 	bl	8003d3c <prvAddCurrentTaskToDelayedList>
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000780 	.word	0x20000780

08003834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10c      	bne.n	8003860 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	b672      	cpsid	i
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	b662      	cpsie	i
 800385a:	617b      	str	r3, [r7, #20]
}
 800385c:	bf00      	nop
 800385e:	e7fe      	b.n	800385e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <vTaskPlaceOnEventListRestricted+0x58>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3318      	adds	r3, #24
 8003866:	4619      	mov	r1, r3
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7fe fd84 	bl	8002376 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8003874:	f04f 33ff 	mov.w	r3, #4294967295
 8003878:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	68b8      	ldr	r0, [r7, #8]
 800387e:	f000 fa5d 	bl	8003d3c <prvAddCurrentTaskToDelayedList>
	}
 8003882:	bf00      	nop
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000780 	.word	0x20000780

08003890 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10c      	bne.n	80038c0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	b672      	cpsid	i
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	b662      	cpsie	i
 80038ba:	60fb      	str	r3, [r7, #12]
}
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3318      	adds	r3, #24
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fdb3 	bl	8002430 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <xTaskRemoveFromEventList+0xb4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d11d      	bne.n	800390e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fdaa 	bl	8002430 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <xTaskRemoveFromEventList+0xb8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d903      	bls.n	80038f0 <xTaskRemoveFromEventList+0x60>
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <xTaskRemoveFromEventList+0xb8>)
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4a13      	ldr	r2, [pc, #76]	; (800394c <xTaskRemoveFromEventList+0xbc>)
 80038fe:	441a      	add	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7fe fd35 	bl	8002376 <vListInsertEnd>
 800390c:	e005      	b.n	800391a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3318      	adds	r3, #24
 8003912:	4619      	mov	r1, r3
 8003914:	480e      	ldr	r0, [pc, #56]	; (8003950 <xTaskRemoveFromEventList+0xc0>)
 8003916:	f7fe fd2e 	bl	8002376 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	4b0d      	ldr	r3, [pc, #52]	; (8003954 <xTaskRemoveFromEventList+0xc4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	429a      	cmp	r2, r3
 8003926:	d905      	bls.n	8003934 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <xTaskRemoveFromEventList+0xc8>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e001      	b.n	8003938 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003938:	697b      	ldr	r3, [r7, #20]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000c7c 	.word	0x20000c7c
 8003948:	20000c5c 	.word	0x20000c5c
 800394c:	20000784 	.word	0x20000784
 8003950:	20000c14 	.word	0x20000c14
 8003954:	20000780 	.word	0x20000780
 8003958:	20000c68 	.word	0x20000c68

0800395c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <vTaskInternalSetTimeOutState+0x24>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <vTaskInternalSetTimeOutState+0x28>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	605a      	str	r2, [r3, #4]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	20000c6c 	.word	0x20000c6c
 8003984:	20000c58 	.word	0x20000c58

08003988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10c      	bne.n	80039b2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	b672      	cpsid	i
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	b662      	cpsie	i
 80039ac:	613b      	str	r3, [r7, #16]
}
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10c      	bne.n	80039d2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	b672      	cpsid	i
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	b662      	cpsie	i
 80039cc:	60fb      	str	r3, [r7, #12]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80039d2:	f000 fe73 	bl	80046bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <xTaskCheckForTimeOut+0xc4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d102      	bne.n	80039f6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e023      	b.n	8003a3e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <xTaskCheckForTimeOut+0xc8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d007      	beq.n	8003a12 <xTaskCheckForTimeOut+0x8a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d302      	bcc.n	8003a12 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	e015      	b.n	8003a3e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d20b      	bcs.n	8003a34 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ff97 	bl	800395c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e004      	b.n	8003a3e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a3e:	f000 fe71 	bl	8004724 <vPortExitCritical>

	return xReturn;
 8003a42:	69fb      	ldr	r3, [r7, #28]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000c58 	.word	0x20000c58
 8003a50:	20000c6c 	.word	0x20000c6c

08003a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <vTaskMissedYield+0x14>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20000c68 	.word	0x20000c68

08003a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a74:	f000 f852 	bl	8003b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <prvIdleTask+0x28>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d9f9      	bls.n	8003a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <prvIdleTask+0x2c>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a90:	e7f0      	b.n	8003a74 <prvIdleTask+0x8>
 8003a92:	bf00      	nop
 8003a94:	20000784 	.word	0x20000784
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	e00c      	b.n	8003ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a12      	ldr	r2, [pc, #72]	; (8003afc <prvInitialiseTaskLists+0x60>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fc30 	bl	800231c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b37      	cmp	r3, #55	; 0x37
 8003ac6:	d9ef      	bls.n	8003aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ac8:	480d      	ldr	r0, [pc, #52]	; (8003b00 <prvInitialiseTaskLists+0x64>)
 8003aca:	f7fe fc27 	bl	800231c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ace:	480d      	ldr	r0, [pc, #52]	; (8003b04 <prvInitialiseTaskLists+0x68>)
 8003ad0:	f7fe fc24 	bl	800231c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ad4:	480c      	ldr	r0, [pc, #48]	; (8003b08 <prvInitialiseTaskLists+0x6c>)
 8003ad6:	f7fe fc21 	bl	800231c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ada:	480c      	ldr	r0, [pc, #48]	; (8003b0c <prvInitialiseTaskLists+0x70>)
 8003adc:	f7fe fc1e 	bl	800231c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ae0:	480b      	ldr	r0, [pc, #44]	; (8003b10 <prvInitialiseTaskLists+0x74>)
 8003ae2:	f7fe fc1b 	bl	800231c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <prvInitialiseTaskLists+0x78>)
 8003ae8:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <prvInitialiseTaskLists+0x64>)
 8003aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <prvInitialiseTaskLists+0x7c>)
 8003aee:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <prvInitialiseTaskLists+0x68>)
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000784 	.word	0x20000784
 8003b00:	20000be4 	.word	0x20000be4
 8003b04:	20000bf8 	.word	0x20000bf8
 8003b08:	20000c14 	.word	0x20000c14
 8003b0c:	20000c28 	.word	0x20000c28
 8003b10:	20000c40 	.word	0x20000c40
 8003b14:	20000c0c 	.word	0x20000c0c
 8003b18:	20000c10 	.word	0x20000c10

08003b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b22:	e019      	b.n	8003b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b24:	f000 fdca 	bl	80046bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b28:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <prvCheckTasksWaitingTermination+0x50>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fc7b 	bl	8002430 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <prvCheckTasksWaitingTermination+0x54>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <prvCheckTasksWaitingTermination+0x54>)
 8003b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b4e:	f000 fde9 	bl	8004724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f810 	bl	8003b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e1      	bne.n	8003b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000c28 	.word	0x20000c28
 8003b70:	20000c54 	.word	0x20000c54
 8003b74:	20000c3c 	.word	0x20000c3c

08003b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 ff8a 	bl	8004aa8 <vPortFree>
				vPortFree( pxTCB );
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 ff87 	bl	8004aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b9a:	e01a      	b.n	8003bd2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d103      	bne.n	8003bae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 ff7e 	bl	8004aa8 <vPortFree>
	}
 8003bac:	e011      	b.n	8003bd2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d00c      	beq.n	8003bd2 <prvDeleteTCB+0x5a>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	b672      	cpsid	i
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	b662      	cpsie	i
 8003bcc:	60fb      	str	r3, [r7, #12]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <prvDeleteTCB+0x58>
	}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <prvResetNextTaskUnblockTime+0x38>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <prvResetNextTaskUnblockTime+0x3c>)
 8003bee:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bf4:	e008      	b.n	8003c08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <prvResetNextTaskUnblockTime+0x38>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <prvResetNextTaskUnblockTime+0x3c>)
 8003c06:	6013      	str	r3, [r2, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	20000c0c 	.word	0x20000c0c
 8003c18:	20000c74 	.word	0x20000c74

08003c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <xTaskGetSchedulerState+0x34>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	e008      	b.n	8003c42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <xTaskGetSchedulerState+0x38>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	e001      	b.n	8003c42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c42:	687b      	ldr	r3, [r7, #4]
	}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	20000c60 	.word	0x20000c60
 8003c54:	20000c7c 	.word	0x20000c7c

08003c58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d05a      	beq.n	8003d24 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <xTaskPriorityDisinherit+0xd8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d00c      	beq.n	8003c92 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	b672      	cpsid	i
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	b662      	cpsie	i
 8003c8c:	60fb      	str	r3, [r7, #12]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10c      	bne.n	8003cb4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	b672      	cpsid	i
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	b662      	cpsie	i
 8003cae:	60bb      	str	r3, [r7, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	1e5a      	subs	r2, r3, #1
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d02c      	beq.n	8003d24 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d128      	bne.n	8003d24 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fbaa 	bl	8002430 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <xTaskPriorityDisinherit+0xdc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d903      	bls.n	8003d04 <xTaskPriorityDisinherit+0xac>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	4a0c      	ldr	r2, [pc, #48]	; (8003d34 <xTaskPriorityDisinherit+0xdc>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <xTaskPriorityDisinherit+0xe0>)
 8003d12:	441a      	add	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f7fe fb2b 	bl	8002376 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d20:	2301      	movs	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d24:	697b      	ldr	r3, [r7, #20]
	}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000780 	.word	0x20000780
 8003d34:	20000c5c 	.word	0x20000c5c
 8003d38:	20000784 	.word	0x20000784

08003d3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d46:	4b21      	ldr	r3, [pc, #132]	; (8003dcc <prvAddCurrentTaskToDelayedList+0x90>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fb6c 	bl	8002430 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d10a      	bne.n	8003d76 <prvAddCurrentTaskToDelayedList+0x3a>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4819      	ldr	r0, [pc, #100]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d70:	f7fe fb01 	bl	8002376 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d74:	e026      	b.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d209      	bcs.n	8003da2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3304      	adds	r3, #4
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	f7fe fb0f 	bl	80023be <vListInsert>
}
 8003da0:	e010      	b.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f7fe fb05 	bl	80023be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d202      	bcs.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6013      	str	r3, [r2, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20000c58 	.word	0x20000c58
 8003dd0:	20000780 	.word	0x20000780
 8003dd4:	20000c40 	.word	0x20000c40
 8003dd8:	20000c10 	.word	0x20000c10
 8003ddc:	20000c0c 	.word	0x20000c0c
 8003de0:	20000c74 	.word	0x20000c74

08003de4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	; 0x28
 8003de8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003dee:	f000 fb15 	bl	800441c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <xTimerCreateTimerTask+0x84>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d021      	beq.n	8003e3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e02:	1d3a      	adds	r2, r7, #4
 8003e04:	f107 0108 	add.w	r1, r7, #8
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fa6b 	bl	80022e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	9202      	str	r2, [sp, #8]
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	2300      	movs	r3, #0
 8003e22:	460a      	mov	r2, r1
 8003e24:	4911      	ldr	r1, [pc, #68]	; (8003e6c <xTimerCreateTimerTask+0x88>)
 8003e26:	4812      	ldr	r0, [pc, #72]	; (8003e70 <xTimerCreateTimerTask+0x8c>)
 8003e28:	f7ff f836 	bl	8002e98 <xTaskCreateStatic>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4a11      	ldr	r2, [pc, #68]	; (8003e74 <xTimerCreateTimerTask+0x90>)
 8003e30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <xTimerCreateTimerTask+0x90>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10c      	bne.n	8003e5e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	b672      	cpsid	i
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	b662      	cpsie	i
 8003e58:	613b      	str	r3, [r7, #16]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003e5e:	697b      	ldr	r3, [r7, #20]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000cb0 	.word	0x20000cb0
 8003e6c:	08004d88 	.word	0x08004d88
 8003e70:	08003fb5 	.word	0x08003fb5
 8003e74:	20000cb4 	.word	0x20000cb4

08003e78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10c      	bne.n	8003eaa <xTimerGenericCommand+0x32>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	b672      	cpsid	i
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	b662      	cpsie	i
 8003ea4:	623b      	str	r3, [r7, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <xTimerGenericCommand+0x9c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02a      	beq.n	8003f08 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	dc18      	bgt.n	8003ef6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ec4:	f7ff feaa 	bl	8003c1c <xTaskGetSchedulerState>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d109      	bne.n	8003ee2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <xTimerGenericCommand+0x9c>)
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f107 0110 	add.w	r1, r7, #16
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003eda:	f7fe fbe3 	bl	80026a4 <xQueueGenericSend>
 8003ede:	6278      	str	r0, [r7, #36]	; 0x24
 8003ee0:	e012      	b.n	8003f08 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <xTimerGenericCommand+0x9c>)
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	f107 0110 	add.w	r1, r7, #16
 8003eea:	2300      	movs	r3, #0
 8003eec:	2200      	movs	r2, #0
 8003eee:	f7fe fbd9 	bl	80026a4 <xQueueGenericSend>
 8003ef2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ef4:	e008      	b.n	8003f08 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <xTimerGenericCommand+0x9c>)
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	f107 0110 	add.w	r1, r7, #16
 8003efe:	2300      	movs	r3, #0
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	f7fe fcd5 	bl	80028b0 <xQueueGenericSendFromISR>
 8003f06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3728      	adds	r7, #40	; 0x28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000cb0 	.word	0x20000cb0

08003f18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f22:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <prvProcessExpiredTimer+0x98>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe fa7d 	bl	8002430 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d024      	beq.n	8003f8e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	18d1      	adds	r1, r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	6978      	ldr	r0, [r7, #20]
 8003f52:	f000 f8d3 	bl	80040fc <prvInsertTimerInActiveList>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d021      	beq.n	8003fa0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2300      	movs	r3, #0
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	2100      	movs	r1, #0
 8003f66:	6978      	ldr	r0, [r7, #20]
 8003f68:	f7ff ff86 	bl	8003e78 <xTimerGenericCommand>
 8003f6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d115      	bne.n	8003fa0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8003f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f78:	b672      	cpsid	i
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	b662      	cpsie	i
 8003f88:	60fb      	str	r3, [r7, #12]
}
 8003f8a:	bf00      	nop
 8003f8c:	e7fe      	b.n	8003f8c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	6978      	ldr	r0, [r7, #20]
 8003fa6:	4798      	blx	r3
}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000ca8 	.word	0x20000ca8

08003fb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fbc:	f107 0308 	add.w	r3, r7, #8
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f857 	bl	8004074 <prvGetNextExpireTime>
 8003fc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f803 	bl	8003fd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fd2:	f000 f8d5 	bl	8004180 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fd6:	e7f1      	b.n	8003fbc <prvTimerTask+0x8>

08003fd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fe2:	f7ff fa27 	bl	8003434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fe6:	f107 0308 	add.w	r3, r7, #8
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 f866 	bl	80040bc <prvSampleTimeNow>
 8003ff0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d130      	bne.n	800405a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <prvProcessTimerOrBlockTask+0x3c>
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	429a      	cmp	r2, r3
 8004004:	d806      	bhi.n	8004014 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004006:	f7ff fa23 	bl	8003450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800400a:	68f9      	ldr	r1, [r7, #12]
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ff83 	bl	8003f18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004012:	e024      	b.n	800405e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <prvProcessTimerOrBlockTask+0x90>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <prvProcessTimerOrBlockTask+0x50>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <prvProcessTimerOrBlockTask+0x52>
 8004028:	2300      	movs	r3, #0
 800402a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <prvProcessTimerOrBlockTask+0x94>)
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	f7fe fef9 	bl	8002e30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800403e:	f7ff fa07 	bl	8003450 <xTaskResumeAll>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <prvProcessTimerOrBlockTask+0x98>)
 800404a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	f3bf 8f6f 	isb	sy
}
 8004058:	e001      	b.n	800405e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800405a:	f7ff f9f9 	bl	8003450 <xTaskResumeAll>
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000cac 	.word	0x20000cac
 800406c:	20000cb0 	.word	0x20000cb0
 8004070:	e000ed04 	.word	0xe000ed04

08004074 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <prvGetNextExpireTime+0x44>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <prvGetNextExpireTime+0x16>
 8004086:	2201      	movs	r2, #1
 8004088:	e000      	b.n	800408c <prvGetNextExpireTime+0x18>
 800408a:	2200      	movs	r2, #0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <prvGetNextExpireTime+0x44>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e001      	b.n	80040a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040a8:	68fb      	ldr	r3, [r7, #12]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	20000ca8 	.word	0x20000ca8

080040bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040c4:	f7ff fa64 	bl	8003590 <xTaskGetTickCount>
 80040c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <prvSampleTimeNow+0x3c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d205      	bcs.n	80040e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040d4:	f000 f93c 	bl	8004350 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e002      	b.n	80040e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <prvSampleTimeNow+0x3c>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040ec:	68fb      	ldr	r3, [r7, #12]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000cb8 	.word	0x20000cb8

080040fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d812      	bhi.n	8004148 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	1ad2      	subs	r2, r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	429a      	cmp	r2, r3
 800412e:	d302      	bcc.n	8004136 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004130:	2301      	movs	r3, #1
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e01b      	b.n	800416e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <prvInsertTimerInActiveList+0x7c>)
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	3304      	adds	r3, #4
 800413e:	4619      	mov	r1, r3
 8004140:	4610      	mov	r0, r2
 8004142:	f7fe f93c 	bl	80023be <vListInsert>
 8004146:	e012      	b.n	800416e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d206      	bcs.n	800415e <prvInsertTimerInActiveList+0x62>
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e007      	b.n	800416e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <prvInsertTimerInActiveList+0x80>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f7fe f928 	bl	80023be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800416e:	697b      	ldr	r3, [r7, #20]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000cac 	.word	0x20000cac
 800417c:	20000ca8 	.word	0x20000ca8

08004180 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08e      	sub	sp, #56	; 0x38
 8004184:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004186:	e0d0      	b.n	800432a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	da1a      	bge.n	80041c4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800418e:	1d3b      	adds	r3, r7, #4
 8004190:	3304      	adds	r3, #4
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10c      	bne.n	80041b4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	b672      	cpsid	i
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	b662      	cpsie	i
 80041ae:	61fb      	str	r3, [r7, #28]
}
 80041b0:	bf00      	nop
 80041b2:	e7fe      	b.n	80041b2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ba:	6850      	ldr	r0, [r2, #4]
 80041bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041be:	6892      	ldr	r2, [r2, #8]
 80041c0:	4611      	mov	r1, r2
 80041c2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f2c0 80af 	blt.w	800432a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	3304      	adds	r3, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe f927 	bl	8002430 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041e2:	463b      	mov	r3, r7
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff69 	bl	80040bc <prvSampleTimeNow>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b09      	cmp	r3, #9
 80041f0:	f200 809a 	bhi.w	8004328 <prvProcessReceivedCommands+0x1a8>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <prvProcessReceivedCommands+0x7c>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004225 	.word	0x08004225
 8004200:	08004225 	.word	0x08004225
 8004204:	08004225 	.word	0x08004225
 8004208:	0800429d 	.word	0x0800429d
 800420c:	080042b1 	.word	0x080042b1
 8004210:	080042ff 	.word	0x080042ff
 8004214:	08004225 	.word	0x08004225
 8004218:	08004225 	.word	0x08004225
 800421c:	0800429d 	.word	0x0800429d
 8004220:	080042b1 	.word	0x080042b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	18d1      	adds	r1, r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004244:	f7ff ff5a 	bl	80040fc <prvInsertTimerInActiveList>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d06d      	beq.n	800432a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800424e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004254:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d062      	beq.n	800432a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	441a      	add	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2300      	movs	r3, #0
 8004272:	2100      	movs	r1, #0
 8004274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004276:	f7ff fdff 	bl	8003e78 <xTimerGenericCommand>
 800427a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d153      	bne.n	800432a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	b672      	cpsid	i
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	b662      	cpsie	i
 8004296:	61bb      	str	r3, [r7, #24]
}
 8004298:	bf00      	nop
 800429a:	e7fe      	b.n	800429a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a2:	f023 0301 	bic.w	r3, r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80042ae:	e03c      	b.n	800432a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10c      	bne.n	80042ea <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	b672      	cpsid	i
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	b662      	cpsie	i
 80042e4:	617b      	str	r3, [r7, #20]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	18d1      	adds	r1, r2, r3
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042f8:	f7ff ff00 	bl	80040fc <prvInsertTimerInActiveList>
					break;
 80042fc:	e015      	b.n	800432a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d103      	bne.n	8004314 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800430c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800430e:	f000 fbcb 	bl	8004aa8 <vPortFree>
 8004312:	e00a      	b.n	800432a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	b2da      	uxtb	r2, r3
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004326:	e000      	b.n	800432a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8004328:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <prvProcessReceivedCommands+0x1cc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	1d39      	adds	r1, r7, #4
 8004330:	2200      	movs	r2, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f7fe fb5c 	bl	80029f0 <xQueueReceive>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	f47f af24 	bne.w	8004188 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3730      	adds	r7, #48	; 0x30
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000cb0 	.word	0x20000cb0

08004350 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004356:	e04a      	b.n	80043ee <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004358:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <prvSwitchTimerLists+0xc4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004362:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <prvSwitchTimerLists+0xc4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe f85d 	bl	8002430 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d030      	beq.n	80043ee <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	429a      	cmp	r2, r3
 800439c:	d90e      	bls.n	80043bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <prvSwitchTimerLists+0xc4>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe f802 	bl	80023be <vListInsert>
 80043ba:	e018      	b.n	80043ee <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043bc:	2300      	movs	r3, #0
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2300      	movs	r3, #0
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	2100      	movs	r1, #0
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff fd56 	bl	8003e78 <xTimerGenericCommand>
 80043cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10c      	bne.n	80043ee <prvSwitchTimerLists+0x9e>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	b672      	cpsid	i
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	b662      	cpsie	i
 80043e8:	603b      	str	r3, [r7, #0]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <prvSwitchTimerLists+0xc4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1af      	bne.n	8004358 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <prvSwitchTimerLists+0xc4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <prvSwitchTimerLists+0xc8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a04      	ldr	r2, [pc, #16]	; (8004414 <prvSwitchTimerLists+0xc4>)
 8004404:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <prvSwitchTimerLists+0xc8>)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000ca8 	.word	0x20000ca8
 8004418:	20000cac 	.word	0x20000cac

0800441c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004422:	f000 f94b 	bl	80046bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <prvCheckForValidListAndQueue+0x60>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d120      	bne.n	8004470 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800442e:	4814      	ldr	r0, [pc, #80]	; (8004480 <prvCheckForValidListAndQueue+0x64>)
 8004430:	f7fd ff74 	bl	800231c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004434:	4813      	ldr	r0, [pc, #76]	; (8004484 <prvCheckForValidListAndQueue+0x68>)
 8004436:	f7fd ff71 	bl	800231c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800443a:	4b13      	ldr	r3, [pc, #76]	; (8004488 <prvCheckForValidListAndQueue+0x6c>)
 800443c:	4a10      	ldr	r2, [pc, #64]	; (8004480 <prvCheckForValidListAndQueue+0x64>)
 800443e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004440:	4b12      	ldr	r3, [pc, #72]	; (800448c <prvCheckForValidListAndQueue+0x70>)
 8004442:	4a10      	ldr	r2, [pc, #64]	; (8004484 <prvCheckForValidListAndQueue+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004446:	2300      	movs	r3, #0
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <prvCheckForValidListAndQueue+0x74>)
 800444c:	4a11      	ldr	r2, [pc, #68]	; (8004494 <prvCheckForValidListAndQueue+0x78>)
 800444e:	2110      	movs	r1, #16
 8004450:	200a      	movs	r0, #10
 8004452:	f7fe f881 	bl	8002558 <xQueueGenericCreateStatic>
 8004456:	4603      	mov	r3, r0
 8004458:	4a08      	ldr	r2, [pc, #32]	; (800447c <prvCheckForValidListAndQueue+0x60>)
 800445a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <prvCheckForValidListAndQueue+0x60>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <prvCheckForValidListAndQueue+0x60>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	490b      	ldr	r1, [pc, #44]	; (8004498 <prvCheckForValidListAndQueue+0x7c>)
 800446a:	4618      	mov	r0, r3
 800446c:	f7fe fcb6 	bl	8002ddc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004470:	f000 f958 	bl	8004724 <vPortExitCritical>
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000cb0 	.word	0x20000cb0
 8004480:	20000c80 	.word	0x20000c80
 8004484:	20000c94 	.word	0x20000c94
 8004488:	20000ca8 	.word	0x20000ca8
 800448c:	20000cac 	.word	0x20000cac
 8004490:	20000d5c 	.word	0x20000d5c
 8004494:	20000cbc 	.word	0x20000cbc
 8004498:	08004d90 	.word	0x08004d90

0800449c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b04      	subs	r3, #4
 80044ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3b04      	subs	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <pxPortInitialiseStack+0x64>)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b14      	subs	r3, #20
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3b04      	subs	r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f06f 0202 	mvn.w	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3b20      	subs	r3, #32
 80044f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	08004505 	.word	0x08004505

08004504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <prvTaskExitError+0x5c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d00c      	beq.n	8004532 <prvTaskExitError+0x2e>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	b672      	cpsid	i
 800451e:	f383 8811 	msr	BASEPRI, r3
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	f3bf 8f4f 	dsb	sy
 800452a:	b662      	cpsie	i
 800452c:	60fb      	str	r3, [r7, #12]
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <prvTaskExitError+0x2c>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	b672      	cpsid	i
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	b662      	cpsie	i
 8004546:	60bb      	str	r3, [r7, #8]
}
 8004548:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800454a:	bf00      	nop
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0fc      	beq.n	800454c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	2000000c 	.word	0x2000000c
	...

08004570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <pxCurrentTCBConst2>)
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	6808      	ldr	r0, [r1, #0]
 8004576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	f380 8809 	msr	PSP, r0
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f380 8811 	msr	BASEPRI, r0
 800458a:	4770      	bx	lr
 800458c:	f3af 8000 	nop.w

08004590 <pxCurrentTCBConst2>:
 8004590:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop

08004598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004598:	4808      	ldr	r0, [pc, #32]	; (80045bc <prvPortStartFirstTask+0x24>)
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	6800      	ldr	r0, [r0, #0]
 800459e:	f380 8808 	msr	MSP, r0
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f380 8814 	msr	CONTROL, r0
 80045aa:	b662      	cpsie	i
 80045ac:	b661      	cpsie	f
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	df00      	svc	0
 80045b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045ba:	bf00      	nop
 80045bc:	e000ed08 	.word	0xe000ed08

080045c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045c6:	4b37      	ldr	r3, [pc, #220]	; (80046a4 <xPortStartScheduler+0xe4>)
 80045c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <xPortStartScheduler+0xe8>)
 80045ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045ee:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <xPortStartScheduler+0xec>)
 80045f0:	2207      	movs	r2, #7
 80045f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045f4:	e009      	b.n	800460a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80045f6:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <xPortStartScheduler+0xec>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	4a2b      	ldr	r2, [pc, #172]	; (80046ac <xPortStartScheduler+0xec>)
 80045fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d0ef      	beq.n	80045f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004616:	4b25      	ldr	r3, [pc, #148]	; (80046ac <xPortStartScheduler+0xec>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1c3 0307 	rsb	r3, r3, #7
 800461e:	2b04      	cmp	r3, #4
 8004620:	d00c      	beq.n	800463c <xPortStartScheduler+0x7c>
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	b672      	cpsid	i
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	b662      	cpsie	i
 8004636:	60bb      	str	r3, [r7, #8]
}
 8004638:	bf00      	nop
 800463a:	e7fe      	b.n	800463a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <xPortStartScheduler+0xec>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	4a1a      	ldr	r2, [pc, #104]	; (80046ac <xPortStartScheduler+0xec>)
 8004644:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004646:	4b19      	ldr	r3, [pc, #100]	; (80046ac <xPortStartScheduler+0xec>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800464e:	4a17      	ldr	r2, [pc, #92]	; (80046ac <xPortStartScheduler+0xec>)
 8004650:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <xPortStartScheduler+0xf0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <xPortStartScheduler+0xf0>)
 8004660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004664:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <xPortStartScheduler+0xf0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a11      	ldr	r2, [pc, #68]	; (80046b0 <xPortStartScheduler+0xf0>)
 800466c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004670:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004672:	f000 f8dd 	bl	8004830 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004676:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <xPortStartScheduler+0xf4>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800467c:	f000 f8fc 	bl	8004878 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004680:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <xPortStartScheduler+0xf8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <xPortStartScheduler+0xf8>)
 8004686:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800468a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800468c:	f7ff ff84 	bl	8004598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004690:	f7ff f84a 	bl	8003728 <vTaskSwitchContext>
	prvTaskExitError();
 8004694:	f7ff ff36 	bl	8004504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000e400 	.word	0xe000e400
 80046a8:	20000dac 	.word	0x20000dac
 80046ac:	20000db0 	.word	0x20000db0
 80046b0:	e000ed20 	.word	0xe000ed20
 80046b4:	2000000c 	.word	0x2000000c
 80046b8:	e000ef34 	.word	0xe000ef34

080046bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	b672      	cpsid	i
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	b662      	cpsie	i
 80046d6:	607b      	str	r3, [r7, #4]
}
 80046d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <vPortEnterCritical+0x60>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	4a0e      	ldr	r2, [pc, #56]	; (800471c <vPortEnterCritical+0x60>)
 80046e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046e4:	4b0d      	ldr	r3, [pc, #52]	; (800471c <vPortEnterCritical+0x60>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d111      	bne.n	8004710 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <vPortEnterCritical+0x64>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <vPortEnterCritical+0x54>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	b672      	cpsid	i
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	b662      	cpsie	i
 800470a:	603b      	str	r3, [r7, #0]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vPortEnterCritical+0x52>
	}
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	2000000c 	.word	0x2000000c
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <vPortExitCritical+0x54>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <vPortExitCritical+0x28>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	b672      	cpsid	i
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	b662      	cpsie	i
 8004746:	607b      	str	r3, [r7, #4]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <vPortExitCritical+0x54>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3b01      	subs	r3, #1
 8004752:	4a09      	ldr	r2, [pc, #36]	; (8004778 <vPortExitCritical+0x54>)
 8004754:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <vPortExitCritical+0x54>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <vPortExitCritical+0x46>
 800475e:	2300      	movs	r3, #0
 8004760:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	f383 8811 	msr	BASEPRI, r3
}
 8004768:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	2000000c 	.word	0x2000000c
 800477c:	00000000 	.word	0x00000000

08004780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004780:	f3ef 8009 	mrs	r0, PSP
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <pxCurrentTCBConst>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f01e 0f10 	tst.w	lr, #16
 8004790:	bf08      	it	eq
 8004792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047a4:	b672      	cpsid	i
 80047a6:	f380 8811 	msr	BASEPRI, r0
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	b662      	cpsie	i
 80047b4:	f7fe ffb8 	bl	8003728 <vTaskSwitchContext>
 80047b8:	f04f 0000 	mov.w	r0, #0
 80047bc:	f380 8811 	msr	BASEPRI, r0
 80047c0:	bc09      	pop	{r0, r3}
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	6808      	ldr	r0, [r1, #0]
 80047c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	f01e 0f10 	tst.w	lr, #16
 80047ce:	bf08      	it	eq
 80047d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047d4:	f380 8809 	msr	PSP, r0
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop

080047e0 <pxCurrentTCBConst>:
 80047e0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	b672      	cpsid	i
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	b662      	cpsie	i
 8004802:	607b      	str	r3, [r7, #4]
}
 8004804:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004806:	f7fe fed3 	bl	80035b0 <xTaskIncrementTick>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <xPortSysTickHandler+0x44>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f383 8811 	msr	BASEPRI, r3
}
 8004822:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	e000ed04 	.word	0xe000ed04

08004830 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <vPortSetupTimerInterrupt+0x34>)
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <vPortSetupTimerInterrupt+0x38>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <vPortSetupTimerInterrupt+0x3c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <vPortSetupTimerInterrupt+0x40>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	4a09      	ldr	r2, [pc, #36]	; (8004874 <vPortSetupTimerInterrupt+0x44>)
 800484e:	3b01      	subs	r3, #1
 8004850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004852:	4b04      	ldr	r3, [pc, #16]	; (8004864 <vPortSetupTimerInterrupt+0x34>)
 8004854:	2207      	movs	r2, #7
 8004856:	601a      	str	r2, [r3, #0]
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	e000e010 	.word	0xe000e010
 8004868:	e000e018 	.word	0xe000e018
 800486c:	20000000 	.word	0x20000000
 8004870:	10624dd3 	.word	0x10624dd3
 8004874:	e000e014 	.word	0xe000e014

08004878 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004878:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004888 <vPortEnableVFP+0x10>
 800487c:	6801      	ldr	r1, [r0, #0]
 800487e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004882:	6001      	str	r1, [r0, #0]
 8004884:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004886:	bf00      	nop
 8004888:	e000ed88 	.word	0xe000ed88

0800488c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004892:	f3ef 8305 	mrs	r3, IPSR
 8004896:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b0f      	cmp	r3, #15
 800489c:	d916      	bls.n	80048cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800489e:	4a19      	ldr	r2, [pc, #100]	; (8004904 <vPortValidateInterruptPriority+0x78>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048a8:	4b17      	ldr	r3, [pc, #92]	; (8004908 <vPortValidateInterruptPriority+0x7c>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	7afa      	ldrb	r2, [r7, #11]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d20c      	bcs.n	80048cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	b672      	cpsid	i
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	b662      	cpsie	i
 80048c6:	607b      	str	r3, [r7, #4]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <vPortValidateInterruptPriority+0x80>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <vPortValidateInterruptPriority+0x84>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d90c      	bls.n	80048f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	b672      	cpsid	i
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	b662      	cpsie	i
 80048f0:	603b      	str	r3, [r7, #0]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <vPortValidateInterruptPriority+0x68>
	}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	e000e3f0 	.word	0xe000e3f0
 8004908:	20000dac 	.word	0x20000dac
 800490c:	e000ed0c 	.word	0xe000ed0c
 8004910:	20000db0 	.word	0x20000db0

08004914 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800491c:	2300      	movs	r3, #0
 800491e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004920:	f7fe fd88 	bl	8003434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004924:	4b5b      	ldr	r3, [pc, #364]	; (8004a94 <pvPortMalloc+0x180>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800492c:	f000 f91a 	bl	8004b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004930:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <pvPortMalloc+0x184>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4013      	ands	r3, r2
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 8092 	bne.w	8004a62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01f      	beq.n	8004984 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004944:	2208      	movs	r2, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4413      	add	r3, r2
 800494a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f023 0307 	bic.w	r3, r3, #7
 800495c:	3308      	adds	r3, #8
 800495e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00c      	beq.n	8004984 <pvPortMalloc+0x70>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	b672      	cpsid	i
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	b662      	cpsie	i
 800497e:	617b      	str	r3, [r7, #20]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d06b      	beq.n	8004a62 <pvPortMalloc+0x14e>
 800498a:	4b44      	ldr	r3, [pc, #272]	; (8004a9c <pvPortMalloc+0x188>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d866      	bhi.n	8004a62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004994:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <pvPortMalloc+0x18c>)
 8004996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004998:	4b41      	ldr	r3, [pc, #260]	; (8004aa0 <pvPortMalloc+0x18c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800499e:	e004      	b.n	80049aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d903      	bls.n	80049bc <pvPortMalloc+0xa8>
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f1      	bne.n	80049a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049bc:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <pvPortMalloc+0x180>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d04d      	beq.n	8004a62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2208      	movs	r2, #8
 80049cc:	4413      	add	r3, r2
 80049ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	1ad2      	subs	r2, r2, r3
 80049e0:	2308      	movs	r3, #8
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d921      	bls.n	8004a2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00c      	beq.n	8004a14 <pvPortMalloc+0x100>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	b672      	cpsid	i
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	b662      	cpsie	i
 8004a0e:	613b      	str	r3, [r7, #16]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad2      	subs	r2, r2, r3
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a26:	69b8      	ldr	r0, [r7, #24]
 8004a28:	f000 f8fe 	bl	8004c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <pvPortMalloc+0x188>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <pvPortMalloc+0x188>)
 8004a38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a3a:	4b18      	ldr	r3, [pc, #96]	; (8004a9c <pvPortMalloc+0x188>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <pvPortMalloc+0x190>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d203      	bcs.n	8004a4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <pvPortMalloc+0x188>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <pvPortMalloc+0x190>)
 8004a4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <pvPortMalloc+0x184>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a62:	f7fe fcf5 	bl	8003450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <pvPortMalloc+0x176>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	b672      	cpsid	i
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	b662      	cpsie	i
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <pvPortMalloc+0x174>
	return pvReturn;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3728      	adds	r7, #40	; 0x28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	200049bc 	.word	0x200049bc
 8004a98:	200049c8 	.word	0x200049c8
 8004a9c:	200049c0 	.word	0x200049c0
 8004aa0:	200049b4 	.word	0x200049b4
 8004aa4:	200049c4 	.word	0x200049c4

08004aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d04c      	beq.n	8004b54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004aba:	2308      	movs	r3, #8
 8004abc:	425b      	negs	r3, r3
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <vPortFree+0xb4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10c      	bne.n	8004af0 <vPortFree+0x48>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	b672      	cpsid	i
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	b662      	cpsie	i
 8004aea:	60fb      	str	r3, [r7, #12]
}
 8004aec:	bf00      	nop
 8004aee:	e7fe      	b.n	8004aee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <vPortFree+0x6a>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	b672      	cpsid	i
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	b662      	cpsie	i
 8004b0c:	60bb      	str	r3, [r7, #8]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <vPortFree+0xb4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d019      	beq.n	8004b54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d115      	bne.n	8004b54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <vPortFree+0xb4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	401a      	ands	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b38:	f7fe fc7c 	bl	8003434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <vPortFree+0xb8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	4a06      	ldr	r2, [pc, #24]	; (8004b60 <vPortFree+0xb8>)
 8004b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b4a:	6938      	ldr	r0, [r7, #16]
 8004b4c:	f000 f86c 	bl	8004c28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b50:	f7fe fc7e 	bl	8003450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b54:	bf00      	nop
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200049c8 	.word	0x200049c8
 8004b60:	200049c0 	.word	0x200049c0

08004b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <prvHeapInit+0xac>)
 8004b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3307      	adds	r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <prvHeapInit+0xac>)
 8004b94:	4413      	add	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <prvHeapInit+0xb0>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <prvHeapInit+0xb0>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <prvHeapInit+0xb4>)
 8004bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <prvHeapInit+0xb4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <prvHeapInit+0xb4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <prvHeapInit+0xb4>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <prvHeapInit+0xb8>)
 8004bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <prvHeapInit+0xbc>)
 8004bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <prvHeapInit+0xc0>)
 8004bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c02:	601a      	str	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20000db4 	.word	0x20000db4
 8004c14:	200049b4 	.word	0x200049b4
 8004c18:	200049bc 	.word	0x200049bc
 8004c1c:	200049c4 	.word	0x200049c4
 8004c20:	200049c0 	.word	0x200049c0
 8004c24:	200049c8 	.word	0x200049c8

08004c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c30:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <prvInsertBlockIntoFreeList+0xac>)
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e002      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x14>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d8f7      	bhi.n	8004c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4413      	add	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d108      	bne.n	8004c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	441a      	add	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	441a      	add	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d118      	bne.n	8004cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d00d      	beq.n	8004ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	441a      	add	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e008      	b.n	8004cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e003      	b.n	8004cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d002      	beq.n	8004cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	200049b4 	.word	0x200049b4
 8004cd8:	200049bc 	.word	0x200049bc

08004cdc <memset>:
 8004cdc:	4402      	add	r2, r0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <__libc_init_array>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4d0d      	ldr	r5, [pc, #52]	; (8004d24 <__libc_init_array+0x38>)
 8004cf0:	4c0d      	ldr	r4, [pc, #52]	; (8004d28 <__libc_init_array+0x3c>)
 8004cf2:	1b64      	subs	r4, r4, r5
 8004cf4:	10a4      	asrs	r4, r4, #2
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	42a6      	cmp	r6, r4
 8004cfa:	d109      	bne.n	8004d10 <__libc_init_array+0x24>
 8004cfc:	4d0b      	ldr	r5, [pc, #44]	; (8004d2c <__libc_init_array+0x40>)
 8004cfe:	4c0c      	ldr	r4, [pc, #48]	; (8004d30 <__libc_init_array+0x44>)
 8004d00:	f000 f826 	bl	8004d50 <_init>
 8004d04:	1b64      	subs	r4, r4, r5
 8004d06:	10a4      	asrs	r4, r4, #2
 8004d08:	2600      	movs	r6, #0
 8004d0a:	42a6      	cmp	r6, r4
 8004d0c:	d105      	bne.n	8004d1a <__libc_init_array+0x2e>
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
 8004d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d14:	4798      	blx	r3
 8004d16:	3601      	adds	r6, #1
 8004d18:	e7ee      	b.n	8004cf8 <__libc_init_array+0xc>
 8004d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1e:	4798      	blx	r3
 8004d20:	3601      	adds	r6, #1
 8004d22:	e7f2      	b.n	8004d0a <__libc_init_array+0x1e>
 8004d24:	08004df8 	.word	0x08004df8
 8004d28:	08004df8 	.word	0x08004df8
 8004d2c:	08004df8 	.word	0x08004df8
 8004d30:	08004dfc 	.word	0x08004dfc

08004d34 <memcpy>:
 8004d34:	440a      	add	r2, r1
 8004d36:	4291      	cmp	r1, r2
 8004d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d3c:	d100      	bne.n	8004d40 <memcpy+0xc>
 8004d3e:	4770      	bx	lr
 8004d40:	b510      	push	{r4, lr}
 8004d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d4a:	4291      	cmp	r1, r2
 8004d4c:	d1f9      	bne.n	8004d42 <memcpy+0xe>
 8004d4e:	bd10      	pop	{r4, pc}

08004d50 <_init>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr

08004d5c <_fini>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr
