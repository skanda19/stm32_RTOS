
Cooperative Scheduling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004140  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043bc  080043bc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c4  080043c4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080043cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000005c  08004428  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004428  00020340  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1e8  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bff  00000000  00000000  0002e2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  0002feb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009cb  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a33  00000000  00000000  000314fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f70e  00000000  00000000  00058f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb40a  00000000  00000000  0006863c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039c4  00000000  00000000  00163a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016740c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004328 	.word	0x08004328

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004328 	.word	0x08004328

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt callback
  * @param  htim: Timer handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005fc:	d104      	bne.n	8000608 <HAL_TIM_PeriodElapsedCallback+0x1c>
    global_counter++; // Increment global counter every 1 ms
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3301      	adds	r3, #1
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000606:	6013      	str	r3, [r2, #0]
  }
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	20000198 	.word	0x20000198

08000618 <ToggleLEDTask>:
  * @brief  Toggle LED task - runs every 500 ms
  * @param  None
  * @retval None
  */
void ToggleLEDTask(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  if(global_counter - last_led_toggle_time >= LED_TOGGLE_INTERVAL) {
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <ToggleLEDTask+0x2c>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <ToggleLEDTask+0x30>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800062a:	d308      	bcc.n	800063e <ToggleLEDTask+0x26>
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800062c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <ToggleLEDTask+0x34>)
 8000632:	f000 feb0 	bl	8001396 <HAL_GPIO_TogglePin>
    last_led_toggle_time = global_counter;
 8000636:	4b03      	ldr	r3, [pc, #12]	; (8000644 <ToggleLEDTask+0x2c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a03      	ldr	r2, [pc, #12]	; (8000648 <ToggleLEDTask+0x30>)
 800063c:	6013      	str	r3, [r2, #0]
  }
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000198 	.word	0x20000198
 8000648:	200001a0 	.word	0x200001a0
 800064c:	40020400 	.word	0x40020400

08000650 <ReadButtonTask>:
  * @brief  Read button task - detects button presses
  * @param  None
  * @retval None
  */
void ReadButtonTask(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  // Check button state (detect button press on rising edge)
  uint8_t current_button_state = HAL_GPIO_ReadPin(user_Button_GPIO_Port, user_Button_Pin);
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <ReadButtonTask+0x54>)
 800065c:	f000 fe6a 	bl	8001334 <HAL_GPIO_ReadPin>
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]

  // Detect button press (rising edge)
  if(current_button_state == GPIO_PIN_SET && last_button_state == GPIO_PIN_RESET) {
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d108      	bne.n	800067c <ReadButtonTask+0x2c>
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <ReadButtonTask+0x58>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d104      	bne.n	800067c <ReadButtonTask+0x2c>
    button_press_count++;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <ReadButtonTask+0x5c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <ReadButtonTask+0x5c>)
 800067a:	6013      	str	r3, [r2, #0]
  }
  last_button_state = current_button_state;
 800067c:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <ReadButtonTask+0x58>)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	7013      	strb	r3, [r2, #0]

  // Check if 3000 ms have passed
  if(global_counter - last_button_read_time >= BUTTON_READ_INTERVAL) {
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <ReadButtonTask+0x60>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <ReadButtonTask+0x64>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000690:	4293      	cmp	r3, r2
 8000692:	d903      	bls.n	800069c <ReadButtonTask+0x4c>
    last_button_read_time = global_counter;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <ReadButtonTask+0x60>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <ReadButtonTask+0x64>)
 800069a:	6013      	str	r3, [r2, #0]
    // Reset count is handled in UART task
  }
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40020800 	.word	0x40020800
 80006a8:	200001ac 	.word	0x200001ac
 80006ac:	2000019c 	.word	0x2000019c
 80006b0:	20000198 	.word	0x20000198
 80006b4:	200001a4 	.word	0x200001a4

080006b8 <UARTTransmitTask>:
  * @brief  UART transmit task - reports button presses every 1000 ms
  * @param  None
  * @retval None
  */
void UARTTransmitTask(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  if(global_counter - last_uart_send_time >= UART_TRANSMIT_INTERVAL) {
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <UARTTransmitTask+0x5c>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <UARTTransmitTask+0x60>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006ca:	d320      	bcc.n	800070e <UARTTransmitTask+0x56>
    // Format UART message with button press count
    sprintf(uart_buffer, "Button pressed %lu times in the last 3000 ms\r\n", button_press_count);
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <UARTTransmitTask+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4913      	ldr	r1, [pc, #76]	; (8000720 <UARTTransmitTask+0x68>)
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <UARTTransmitTask+0x6c>)
 80006d6:	f003 f983 	bl	80039e0 <siprintf>

    // Transmit the message
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 80006da:	4812      	ldr	r0, [pc, #72]	; (8000724 <UARTTransmitTask+0x6c>)
 80006dc:	f7ff fdb0 	bl	8000240 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	490f      	ldr	r1, [pc, #60]	; (8000724 <UARTTransmitTask+0x6c>)
 80006e8:	480f      	ldr	r0, [pc, #60]	; (8000728 <UARTTransmitTask+0x70>)
 80006ea:	f002 fc6f 	bl	8002fcc <HAL_UART_Transmit>

    last_uart_send_time = global_counter;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <UARTTransmitTask+0x5c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <UARTTransmitTask+0x60>)
 80006f4:	6013      	str	r3, [r2, #0]

    // Reset button press count if the button read cycle has completed
    if(global_counter - last_button_read_time >= BUTTON_READ_INTERVAL) {
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <UARTTransmitTask+0x5c>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <UARTTransmitTask+0x74>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000704:	4293      	cmp	r3, r2
 8000706:	d902      	bls.n	800070e <UARTTransmitTask+0x56>
      button_press_count = 0;
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <UARTTransmitTask+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
    }
  }
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000198 	.word	0x20000198
 8000718:	200001a8 	.word	0x200001a8
 800071c:	2000019c 	.word	0x2000019c
 8000720:	08004340 	.word	0x08004340
 8000724:	200001b0 	.word	0x200001b0
 8000728:	20000110 	.word	0x20000110
 800072c:	200001a4 	.word	0x200001a4

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fb0f 	bl	8000d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f828 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f94e 	bl	80009dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000740:	f000 f91c 	bl	800097c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000744:	f000 f87e 	bl	8000844 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000748:	f000 f8ca 	bl	80008e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start timer with interrupt
  HAL_TIM_Base_Start_IT(&htim2);
 800074c:	480a      	ldr	r0, [pc, #40]	; (8000778 <main+0x48>)
 800074e:	f001 ff91 	bl	8002674 <HAL_TIM_Base_Start_IT>

  // Initialize the last task execution times
  last_led_toggle_time = global_counter;
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <main+0x4c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <main+0x50>)
 8000758:	6013      	str	r3, [r2, #0]
  last_button_read_time = global_counter;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <main+0x4c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a09      	ldr	r2, [pc, #36]	; (8000784 <main+0x54>)
 8000760:	6013      	str	r3, [r2, #0]
  last_uart_send_time = global_counter;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <main+0x4c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a08      	ldr	r2, [pc, #32]	; (8000788 <main+0x58>)
 8000768:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // Execute tasks
    ToggleLEDTask();    // Check if it's time to toggle LED
 800076a:	f7ff ff55 	bl	8000618 <ToggleLEDTask>
    ReadButtonTask();   // Check button state
 800076e:	f7ff ff6f 	bl	8000650 <ReadButtonTask>
    UARTTransmitTask(); // Check if it's time to send UART message
 8000772:	f7ff ffa1 	bl	80006b8 <UARTTransmitTask>
    ToggleLEDTask();    // Check if it's time to toggle LED
 8000776:	e7f8      	b.n	800076a <main+0x3a>
 8000778:	20000078 	.word	0x20000078
 800077c:	20000198 	.word	0x20000198
 8000780:	200001a0 	.word	0x200001a0
 8000784:	200001a4 	.word	0x200001a4
 8000788:	200001a8 	.word	0x200001a8

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 f940 	bl	8003a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <SystemClock_Config+0xb0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <SystemClock_Config+0xb0>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SystemClock_Config+0xb0>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <SystemClock_Config+0xb4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <SystemClock_Config+0xb4>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <SystemClock_Config+0xb4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ec:	2310      	movs	r3, #16
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 fde7 	bl	80013cc <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000804:	f000 f946 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f001 f880 	bl	8001928 <HAL_RCC_ClockConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800082e:	f000 f931 	bl	8000a94 <Error_Handler>
  }
}
 8000832:	bf00      	nop
 8000834:	3750      	adds	r7, #80	; 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_TIM2_Init+0x98>)
 8000864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;  // Para un reloj de 16 MHz para obtener 1 kHz
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_TIM2_Init+0x98>)
 800086c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_TIM2_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1-1;         // Período de 1 ms
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_TIM2_Init+0x98>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_TIM2_Init+0x98>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_TIM2_Init+0x98>)
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800088a:	4814      	ldr	r0, [pc, #80]	; (80008dc <MX_TIM2_Init+0x98>)
 800088c:	f001 fe9a 	bl	80025c4 <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000896:	f000 f8fd 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	4619      	mov	r1, r3
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_TIM2_Init+0x98>)
 80008a8:	f002 f864 	bl	8002974 <HAL_TIM_ConfigClockSource>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008b2:	f000 f8ef 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_TIM2_Init+0x98>)
 80008c4:	f002 fa88 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008ce:	f000 f8e1 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000078 	.word	0x20000078

080008e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_TIM3_Init+0x94>)
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <MX_TIM3_Init+0x98>)
 8000902:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_TIM3_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_TIM3_Init+0x94>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_TIM3_Init+0x94>)
 8000912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000916:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_TIM3_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_TIM3_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_TIM3_Init+0x94>)
 8000926:	f001 fe4d 	bl	80025c4 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000930:	f000 f8b0 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4619      	mov	r1, r3
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <MX_TIM3_Init+0x94>)
 8000942:	f002 f817 	bl	8002974 <HAL_TIM_ConfigClockSource>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800094c:	f000 f8a2 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_TIM3_Init+0x94>)
 800095e:	f002 fa3b 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000968:	f000 f894 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	200000c4 	.word	0x200000c4
 8000978:	40000400 	.word	0x40000400

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <MX_USART3_UART_Init+0x5c>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_USART3_UART_Init+0x58>)
 80009c0:	f002 fab6 	bl	8002f30 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f863 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000110 	.word	0x20000110
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_GPIO_Init+0xac>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <MX_GPIO_Init+0xac>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a18      	ldr	r2, [pc, #96]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_GPIO_Init+0xac>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a40:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_GPIO_Init+0xb0>)
 8000a42:	f000 fc8f 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_Button_Pin */
  GPIO_InitStruct.Pin = user_Button_Pin;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_Button_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_GPIO_Init+0xb4>)
 8000a5c:	f000 fabe 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000a60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_GPIO_Init+0xb0>)
 8000a7a:	f000 faaf 	bl	8000fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40020800 	.word	0x40020800

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af8:	d10c      	bne.n	8000b14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_TIM_Base_MspInit+0x5c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <HAL_TIM_Base_MspInit+0x5c>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_TIM_Base_MspInit+0x5c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b12:	e010      	b.n	8000b36 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <HAL_TIM_Base_MspInit+0x60>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d10b      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_TIM_Base_MspInit+0x5c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_TIM_Base_MspInit+0x5c>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_TIM_Base_MspInit+0x5c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40000400 	.word	0x40000400

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0ae      	sub	sp, #184	; 0xb8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2290      	movs	r2, #144	; 0x90
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 ff57 	bl	8003a20 <memset>
  if(huart->Instance==USART3)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <HAL_UART_MspInit+0xb4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d13c      	bne.n	8000bf6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f8f2 	bl	8001d74 <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b96:	f7ff ff7d 	bl	8000a94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <HAL_UART_MspInit+0xb8>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0xb8>)
 8000ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_UART_MspInit+0xb8>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_UART_MspInit+0xb8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <HAL_UART_MspInit+0xb8>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_UART_MspInit+0xb8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000be4:	2307      	movs	r3, #7
 8000be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_UART_MspInit+0xbc>)
 8000bf2:	f000 f9f3 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	37b8      	adds	r7, #184	; 0xb8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40004800 	.word	0x40004800
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020c00 	.word	0x40020c00

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c58:	f000 f8ba 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <TIM2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <TIM2_IRQHandler+0x10>)
 8000c66:	f001 fd7d 	bl	8002764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000078 	.word	0x20000078

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f002 fec4 	bl	8003a30 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20080000 	.word	0x20080000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	200001f0 	.word	0x200001f0
 8000cdc:	20000340 	.word	0x20000340

08000ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d08:	f7ff ffea 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	; (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f002 fe83 	bl	8003a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fcfb 	bl	8000730 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d48:	080043cc 	.word	0x080043cc
  ldr r2, =_sbss
 8000d4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d50:	20000340 	.word	0x20000340

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>

08000d56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f000 f90a 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 f805 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d66:	f7ff fe9b 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f917 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f8ed 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200001f4 	.word	0x200001f4

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200001f4 	.word	0x200001f4

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <__NVIC_SetPriorityGrouping+0x40>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x40>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00
 8000e54:	05fa0000 	.word	0x05fa0000

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5c 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	e175      	b.n	80012e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	429a      	cmp	r2, r3
 8001016:	f040 8164 	bne.w	80012e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_GPIO_Init+0x56>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d130      	bne.n	8001094 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001068:	2201      	movs	r2, #1
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 0201 	and.w	r2, r3, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b03      	cmp	r3, #3
 800109e:	d017      	beq.n	80010d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d123      	bne.n	8001124 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	08da      	lsrs	r2, r3, #3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3208      	adds	r2, #8
 80010e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	220f      	movs	r2, #15
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	08da      	lsrs	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3208      	adds	r2, #8
 800111e:	69b9      	ldr	r1, [r7, #24]
 8001120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0203 	and.w	r2, r3, #3
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80be 	beq.w	80012e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b66      	ldr	r3, [pc, #408]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a65      	ldr	r2, [pc, #404]	; (8001300 <HAL_GPIO_Init+0x324>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b63      	ldr	r3, [pc, #396]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800117e:	4a61      	ldr	r2, [pc, #388]	; (8001304 <HAL_GPIO_Init+0x328>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a58      	ldr	r2, [pc, #352]	; (8001308 <HAL_GPIO_Init+0x32c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d037      	beq.n	800121a <HAL_GPIO_Init+0x23e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a57      	ldr	r2, [pc, #348]	; (800130c <HAL_GPIO_Init+0x330>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d031      	beq.n	8001216 <HAL_GPIO_Init+0x23a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a56      	ldr	r2, [pc, #344]	; (8001310 <HAL_GPIO_Init+0x334>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d02b      	beq.n	8001212 <HAL_GPIO_Init+0x236>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <HAL_GPIO_Init+0x338>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d025      	beq.n	800120e <HAL_GPIO_Init+0x232>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a54      	ldr	r2, [pc, #336]	; (8001318 <HAL_GPIO_Init+0x33c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x22e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a53      	ldr	r2, [pc, #332]	; (800131c <HAL_GPIO_Init+0x340>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x22a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a52      	ldr	r2, [pc, #328]	; (8001320 <HAL_GPIO_Init+0x344>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x226>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <HAL_GPIO_Init+0x348>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x222>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_GPIO_Init+0x34c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x21e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x350>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011f2:	2309      	movs	r3, #9
 80011f4:	e012      	b.n	800121c <HAL_GPIO_Init+0x240>
 80011f6:	230a      	movs	r3, #10
 80011f8:	e010      	b.n	800121c <HAL_GPIO_Init+0x240>
 80011fa:	2308      	movs	r3, #8
 80011fc:	e00e      	b.n	800121c <HAL_GPIO_Init+0x240>
 80011fe:	2307      	movs	r3, #7
 8001200:	e00c      	b.n	800121c <HAL_GPIO_Init+0x240>
 8001202:	2306      	movs	r3, #6
 8001204:	e00a      	b.n	800121c <HAL_GPIO_Init+0x240>
 8001206:	2305      	movs	r3, #5
 8001208:	e008      	b.n	800121c <HAL_GPIO_Init+0x240>
 800120a:	2304      	movs	r3, #4
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x240>
 800120e:	2303      	movs	r3, #3
 8001210:	e004      	b.n	800121c <HAL_GPIO_Init+0x240>
 8001212:	2302      	movs	r3, #2
 8001214:	e002      	b.n	800121c <HAL_GPIO_Init+0x240>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_GPIO_Init+0x240>
 800121a:	2300      	movs	r3, #0
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	f002 0203 	and.w	r2, r2, #3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4093      	lsls	r3, r2
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800122c:	4935      	ldr	r1, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x328>)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <HAL_GPIO_Init+0x354>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125e:	4a34      	ldr	r2, [pc, #208]	; (8001330 <HAL_GPIO_Init+0x354>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <HAL_GPIO_Init+0x354>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001288:	4a29      	ldr	r2, [pc, #164]	; (8001330 <HAL_GPIO_Init+0x354>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_GPIO_Init+0x354>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b2:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <HAL_GPIO_Init+0x354>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_GPIO_Init+0x354>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_GPIO_Init+0x354>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	f67f ae86 	bls.w	8000ffc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800
 8001324:	40021c00 	.word	0x40021c00
 8001328:	40022000 	.word	0x40022000
 800132c:	40022400 	.word	0x40022400
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a8:	887a      	ldrh	r2, [r7, #2]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	041a      	lsls	r2, r3, #16
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	400b      	ands	r3, r1
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e29b      	b.n	800191a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8087 	beq.w	80014fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f0:	4b96      	ldr	r3, [pc, #600]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d00c      	beq.n	8001416 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fc:	4b93      	ldr	r3, [pc, #588]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d112      	bne.n	800142e <HAL_RCC_OscConfig+0x62>
 8001408:	4b90      	ldr	r3, [pc, #576]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001414:	d10b      	bne.n	800142e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	4b8d      	ldr	r3, [pc, #564]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d06c      	beq.n	80014fc <HAL_RCC_OscConfig+0x130>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d168      	bne.n	80014fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e275      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x7a>
 8001438:	4b84      	ldr	r3, [pc, #528]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a83      	ldr	r2, [pc, #524]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800143e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e02e      	b.n	80014a4 <HAL_RCC_OscConfig+0xd8>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x9c>
 800144e:	4b7f      	ldr	r3, [pc, #508]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a7e      	ldr	r2, [pc, #504]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b7c      	ldr	r3, [pc, #496]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a7b      	ldr	r2, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0xd8>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0xc0>
 8001472:	4b76      	ldr	r3, [pc, #472]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a75      	ldr	r2, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b73      	ldr	r3, [pc, #460]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a72      	ldr	r2, [pc, #456]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0xd8>
 800148c:	4b6f      	ldr	r3, [pc, #444]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a6e      	ldr	r2, [pc, #440]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b6c      	ldr	r3, [pc, #432]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a6b      	ldr	r2, [pc, #428]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fca4 	bl	8000df8 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fca0 	bl	8000df8 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e229      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b61      	ldr	r3, [pc, #388]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0xe8>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc90 	bl	8000df8 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fc8c 	bl	8000df8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e215      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b57      	ldr	r3, [pc, #348]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x110>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d069      	beq.n	80015de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800150a:	4b50      	ldr	r3, [pc, #320]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b4d      	ldr	r3, [pc, #308]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d11c      	bne.n	800155c <HAL_RCC_OscConfig+0x190>
 8001522:	4b4a      	ldr	r3, [pc, #296]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x17a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1e9      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	493d      	ldr	r1, [pc, #244]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	e040      	b.n	80015de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d023      	beq.n	80015ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a38      	ldr	r2, [pc, #224]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fc42 	bl	8000df8 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001578:	f7ff fc3e 	bl	8000df8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1c7      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4929      	ldr	r1, [pc, #164]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
 80015aa:	e018      	b.n	80015de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a26      	ldr	r2, [pc, #152]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc1e 	bl	8000df8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc1a 	bl	8000df8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1a3      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d038      	beq.n	800165c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d019      	beq.n	8001626 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f2:	4b16      	ldr	r3, [pc, #88]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80015f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f6:	4a15      	ldr	r2, [pc, #84]	; (800164c <HAL_RCC_OscConfig+0x280>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbfb 	bl	8000df8 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001606:	f7ff fbf7 	bl	8000df8 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e180      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800161a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x23a>
 8001624:	e01a      	b.n	800165c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_OscConfig+0x280>)
 8001628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_RCC_OscConfig+0x280>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001632:	f7ff fbe1 	bl	8000df8 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff fbdd 	bl	8000df8 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d903      	bls.n	8001650 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e166      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
 800164c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	4b92      	ldr	r3, [pc, #584]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ee      	bne.n	800163a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80a4 	beq.w	80017b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166a:	4b8c      	ldr	r3, [pc, #560]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10d      	bne.n	8001692 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	4b89      	ldr	r3, [pc, #548]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a88      	ldr	r2, [pc, #544]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b86      	ldr	r3, [pc, #536]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001692:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <HAL_RCC_OscConfig+0x4d4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d118      	bne.n	80016d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800169e:	4b80      	ldr	r3, [pc, #512]	; (80018a0 <HAL_RCC_OscConfig+0x4d4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7f      	ldr	r2, [pc, #508]	; (80018a0 <HAL_RCC_OscConfig+0x4d4>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fba5 	bl	8000df8 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fba1 	bl	8000df8 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b64      	cmp	r3, #100	; 0x64
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e12a      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <HAL_RCC_OscConfig+0x4d4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x31a>
 80016d8:	4b70      	ldr	r3, [pc, #448]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	4a6f      	ldr	r2, [pc, #444]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6713      	str	r3, [r2, #112]	; 0x70
 80016e4:	e02d      	b.n	8001742 <HAL_RCC_OscConfig+0x376>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x33c>
 80016ee:	4b6b      	ldr	r3, [pc, #428]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	4a6a      	ldr	r2, [pc, #424]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6713      	str	r3, [r2, #112]	; 0x70
 80016fa:	4b68      	ldr	r3, [pc, #416]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	4a67      	ldr	r2, [pc, #412]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	6713      	str	r3, [r2, #112]	; 0x70
 8001706:	e01c      	b.n	8001742 <HAL_RCC_OscConfig+0x376>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d10c      	bne.n	800172a <HAL_RCC_OscConfig+0x35e>
 8001710:	4b62      	ldr	r3, [pc, #392]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a61      	ldr	r2, [pc, #388]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
 800171c:	4b5f      	ldr	r3, [pc, #380]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a5e      	ldr	r2, [pc, #376]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
 8001728:	e00b      	b.n	8001742 <HAL_RCC_OscConfig+0x376>
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172e:	4a5b      	ldr	r2, [pc, #364]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	; 0x70
 8001736:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d015      	beq.n	8001776 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff fb55 	bl	8000df8 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff fb51 	bl	8000df8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e0d8      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ee      	beq.n	8001752 <HAL_RCC_OscConfig+0x386>
 8001774:	e014      	b.n	80017a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001776:	f7ff fb3f 	bl	8000df8 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff fb3b 	bl	8000df8 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0c2      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001794:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a3c      	ldr	r2, [pc, #240]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80017ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80ae 	beq.w	8001918 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d06d      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d14b      	bne.n	8001868 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a31      	ldr	r2, [pc, #196]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017dc:	f7ff fb0c 	bl	8000df8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fb08 	bl	8000df8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e091      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	019b      	lsls	r3, r3, #6
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	071b      	lsls	r3, r3, #28
 800182e:	491b      	ldr	r1, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff fada 	bl	8000df8 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff fad6 	bl	8000df8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e05f      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x47c>
 8001866:	e057      	b.n	8001918 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 800186e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fac0 	bl	8000df8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fabc 	bl	8000df8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e045      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_RCC_OscConfig+0x4d0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x4b0>
 800189a:	e03d      	b.n	8001918 <HAL_RCC_OscConfig+0x54c>
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_RCC_OscConfig+0x558>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d030      	beq.n	8001914 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d129      	bne.n	8001914 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d122      	bne.n	8001914 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018dc:	4293      	cmp	r3, r2
 80018de:	d119      	bne.n	8001914 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d10f      	bne.n	8001914 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0d0      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 020f 	bic.w	r2, r3, #15
 8001956:	4965      	ldr	r1, [pc, #404]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001992:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	494d      	ldr	r1, [pc, #308]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d040      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e073      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4936      	ldr	r1, [pc, #216]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1c:	f7ff f9ec 	bl	8000df8 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff f9e8 	bl	8000df8 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e053      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d210      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 020f 	bic.w	r2, r3, #15
 8001a62:	4922      	ldr	r1, [pc, #136]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4916      	ldr	r1, [pc, #88]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x1cc>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1d4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f948 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00
 8001af0:	40023800 	.word	0x40023800
 8001af4:	08004370 	.word	0x08004370
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b094      	sub	sp, #80	; 0x50
 8001b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b10:	2300      	movs	r3, #0
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b18:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d00d      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x40>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	f200 80e1 	bhi.w	8001cec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x34>
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b32:	e0db      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b73      	ldr	r3, [pc, #460]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b38:	e0db      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b3a:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b3e:	e0d8      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b40:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b48:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d063      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b56:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	099b      	lsrs	r3, r3, #6
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b72:	4622      	mov	r2, r4
 8001b74:	462b      	mov	r3, r5
 8001b76:	f04f 0000 	mov.w	r0, #0
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	0159      	lsls	r1, r3, #5
 8001b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b84:	0150      	lsls	r0, r2, #5
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	1a51      	subs	r1, r2, r1
 8001b8e:	6139      	str	r1, [r7, #16]
 8001b90:	4629      	mov	r1, r5
 8001b92:	eb63 0301 	sbc.w	r3, r3, r1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ba4:	4659      	mov	r1, fp
 8001ba6:	018b      	lsls	r3, r1, #6
 8001ba8:	4651      	mov	r1, sl
 8001baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bae:	4651      	mov	r1, sl
 8001bb0:	018a      	lsls	r2, r1, #6
 8001bb2:	4651      	mov	r1, sl
 8001bb4:	ebb2 0801 	subs.w	r8, r2, r1
 8001bb8:	4659      	mov	r1, fp
 8001bba:	eb63 0901 	sbc.w	r9, r3, r1
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bd2:	4690      	mov	r8, r2
 8001bd4:	4699      	mov	r9, r3
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	eb18 0303 	adds.w	r3, r8, r3
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	462b      	mov	r3, r5
 8001be0:	eb49 0303 	adc.w	r3, r9, r3
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	024b      	lsls	r3, r1, #9
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	024a      	lsls	r2, r1, #9
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c06:	2200      	movs	r2, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c10:	f7fe fb6e 	bl	80002f0 <__aeabi_uldivmod>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4613      	mov	r3, r2
 8001c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c1c:	e058      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	099b      	lsrs	r3, r3, #6
 8001c24:	2200      	movs	r2, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	4611      	mov	r1, r2
 8001c2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c2e:	623b      	str	r3, [r7, #32]
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c38:	4642      	mov	r2, r8
 8001c3a:	464b      	mov	r3, r9
 8001c3c:	f04f 0000 	mov.w	r0, #0
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	0159      	lsls	r1, r3, #5
 8001c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4a:	0150      	lsls	r0, r2, #5
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4641      	mov	r1, r8
 8001c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c56:	4649      	mov	r1, r9
 8001c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c70:	ebb2 040a 	subs.w	r4, r2, sl
 8001c74:	eb63 050b 	sbc.w	r5, r3, fp
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	00eb      	lsls	r3, r5, #3
 8001c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c86:	00e2      	lsls	r2, r4, #3
 8001c88:	4614      	mov	r4, r2
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	4643      	mov	r3, r8
 8001c8e:	18e3      	adds	r3, r4, r3
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	464b      	mov	r3, r9
 8001c94:	eb45 0303 	adc.w	r3, r5, r3
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	028b      	lsls	r3, r1, #10
 8001caa:	4621      	mov	r1, r4
 8001cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	028a      	lsls	r2, r1, #10
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	61fa      	str	r2, [r7, #28]
 8001cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc4:	f7fe fb14 	bl	80002f0 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cea:	e002      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3750      	adds	r7, #80	; 0x50
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	00f42400 	.word	0x00f42400
 8001d08:	007a1200 	.word	0x007a1200

08001d0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d10:	4b03      	ldr	r3, [pc, #12]	; (8001d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000

08001d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d28:	f7ff fff0 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0a9b      	lsrs	r3, r3, #10
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	08004380 	.word	0x08004380

08001d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d50:	f7ff ffdc 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0b5b      	lsrs	r3, r3, #13
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4903      	ldr	r1, [pc, #12]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	08004380 	.word	0x08004380

08001d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d012      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d9c:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	4a68      	ldr	r2, [pc, #416]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001da6:	6093      	str	r3, [r2, #8]
 8001da8:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	4964      	ldr	r1, [pc, #400]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d017      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	4959      	ldr	r1, [pc, #356]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dec:	d101      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d017      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e0a:	4b4e      	ldr	r3, [pc, #312]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	494a      	ldr	r1, [pc, #296]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e28:	d101      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 808b 	beq.w	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	4a39      	ldr	r2, [pc, #228]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6413      	str	r3, [r2, #64]	; 0x40
 8001e64:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e70:	4b35      	ldr	r3, [pc, #212]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a34      	ldr	r2, [pc, #208]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e7c:	f7fe ffbc 	bl	8000df8 <HAL_GetTick>
 8001e80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e84:	f7fe ffb8 	bl	8000df8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e38f      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eaa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d035      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d02e      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eda:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ee2:	4a18      	ldr	r2, [pc, #96]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ee8:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d114      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7fe ff80 	bl	8000df8 <HAL_GetTick>
 8001ef8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7fe ff7c 	bl	8000df8 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e351      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0ee      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f2a:	d111      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	4901      	ldr	r1, [pc, #4]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
 8001f42:	e00b      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	0ffffcff 	.word	0x0ffffcff
 8001f50:	4bac      	ldr	r3, [pc, #688]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4aab      	ldr	r2, [pc, #684]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f5a:	6093      	str	r3, [r2, #8]
 8001f5c:	4ba9      	ldr	r3, [pc, #676]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f68:	49a6      	ldr	r1, [pc, #664]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d010      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f7a:	4ba2      	ldr	r3, [pc, #648]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f80:	4aa0      	ldr	r2, [pc, #640]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f8a:	4b9e      	ldr	r3, [pc, #632]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	499b      	ldr	r1, [pc, #620]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fa8:	4b96      	ldr	r3, [pc, #600]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb6:	4993      	ldr	r1, [pc, #588]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00a      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fca:	4b8e      	ldr	r3, [pc, #568]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fd8:	498a      	ldr	r1, [pc, #552]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fec:	4b85      	ldr	r3, [pc, #532]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ffa:	4982      	ldr	r1, [pc, #520]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800200e:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4979      	ldr	r1, [pc, #484]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002030:	4b74      	ldr	r3, [pc, #464]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f023 0203 	bic.w	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4971      	ldr	r1, [pc, #452]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002052:	4b6c      	ldr	r3, [pc, #432]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f023 020c 	bic.w	r2, r3, #12
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002060:	4968      	ldr	r1, [pc, #416]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002074:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	4960      	ldr	r1, [pc, #384]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002096:	4b5b      	ldr	r3, [pc, #364]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a4:	4957      	ldr	r1, [pc, #348]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020b8:	4b52      	ldr	r3, [pc, #328]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c6:	494f      	ldr	r1, [pc, #316]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80020da:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	4946      	ldr	r1, [pc, #280]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	493e      	ldr	r1, [pc, #248]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212c:	4935      	ldr	r1, [pc, #212]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800214e:	492d      	ldr	r1, [pc, #180]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d011      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002170:	4924      	ldr	r1, [pc, #144]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800217c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b0:	4914      	ldr	r1, [pc, #80]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00b      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d4:	490b      	ldr	r1, [pc, #44]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00f      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f8:	4902      	ldr	r1, [pc, #8]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002200:	e002      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002214:	4b8a      	ldr	r3, [pc, #552]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800221a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	4986      	ldr	r1, [pc, #536]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002238:	4b81      	ldr	r3, [pc, #516]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800223e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002248:	497d      	ldr	r1, [pc, #500]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d006      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80d6 	beq.w	8002410 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002264:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a75      	ldr	r2, [pc, #468]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800226e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002270:	f7fe fdc2 	bl	8000df8 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002276:	e008      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002278:	f7fe fdbe 	bl	8000df8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e195      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1f0      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d021      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11d      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022aa:	4b65      	ldr	r3, [pc, #404]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022b8:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022be:	0e1b      	lsrs	r3, r3, #24
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	019a      	lsls	r2, r3, #6
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	071b      	lsls	r3, r3, #28
 80022de:	4958      	ldr	r1, [pc, #352]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002304:	2b00      	cmp	r3, #0
 8002306:	d02e      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002310:	d129      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002312:	4b4b      	ldr	r3, [pc, #300]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002320:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002326:	0f1b      	lsrs	r3, r3, #28
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	019a      	lsls	r2, r3, #6
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	061b      	lsls	r3, r3, #24
 8002340:	431a      	orrs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	071b      	lsls	r3, r3, #28
 8002346:	493e      	ldr	r1, [pc, #248]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800234e:	4b3c      	ldr	r3, [pc, #240]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002354:	f023 021f 	bic.w	r2, r3, #31
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	3b01      	subs	r3, #1
 800235e:	4938      	ldr	r1, [pc, #224]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01d      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002372:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002378:	0e1b      	lsrs	r3, r3, #24
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002380:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002386:	0f1b      	lsrs	r3, r3, #28
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	019a      	lsls	r2, r3, #6
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	071b      	lsls	r3, r3, #28
 80023a6:	4926      	ldr	r1, [pc, #152]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d011      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	019a      	lsls	r2, r3, #6
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	071b      	lsls	r3, r3, #28
 80023d6:	491a      	ldr	r1, [pc, #104]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023de:	4b18      	ldr	r3, [pc, #96]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a17      	ldr	r2, [pc, #92]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ea:	f7fe fd05 	bl	8000df8 <HAL_GetTick>
 80023ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023f2:	f7fe fd01 	bl	8000df8 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0d8      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	2b01      	cmp	r3, #1
 8002414:	f040 80ce 	bne.w	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800241e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fce8 	bl	8000df8 <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800242a:	e00b      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800242c:	f7fe fce4 	bl	8000df8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d904      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0bb      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002444:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800244c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002450:	d0ec      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800246e:	2b00      	cmp	r3, #0
 8002470:	d02e      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d12a      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002488:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	0f1b      	lsrs	r3, r3, #28
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	019a      	lsls	r2, r3, #6
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	061b      	lsls	r3, r3, #24
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	071b      	lsls	r3, r3, #28
 80024ae:	4944      	ldr	r1, [pc, #272]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024b6:	4b42      	ldr	r3, [pc, #264]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	3b01      	subs	r3, #1
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	493d      	ldr	r1, [pc, #244]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d022      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e4:	d11d      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	0e1b      	lsrs	r3, r3, #24
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	0f1b      	lsrs	r3, r3, #28
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	019a      	lsls	r2, r3, #6
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431a      	orrs	r2, r3
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	431a      	orrs	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	071b      	lsls	r3, r3, #28
 800251a:	4929      	ldr	r1, [pc, #164]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d028      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	0e1b      	lsrs	r3, r3, #24
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	019a      	lsls	r2, r3, #6
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	041b      	lsls	r3, r3, #16
 8002554:	431a      	orrs	r2, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	061b      	lsls	r3, r3, #24
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	071b      	lsls	r3, r3, #28
 8002562:	4917      	ldr	r1, [pc, #92]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800256c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	4911      	ldr	r1, [pc, #68]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800258c:	f7fe fc34 	bl	8000df8 <HAL_GetTick>
 8002590:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002594:	f7fe fc30 	bl	8000df8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e007      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b2:	d1ef      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3720      	adds	r7, #32
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800

080025c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e049      	b.n	800266a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fe fa7c 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f000 faa8 	bl	8002b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d001      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e054      	b.n	8002736 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <HAL_TIM_Base_Start_IT+0xd0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d022      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x80>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b6:	d01d      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x80>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a22      	ldr	r2, [pc, #136]	; (8002748 <HAL_TIM_Base_Start_IT+0xd4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d018      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x80>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a21      	ldr	r2, [pc, #132]	; (800274c <HAL_TIM_Base_Start_IT+0xd8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d013      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x80>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <HAL_TIM_Base_Start_IT+0xdc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00e      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x80>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_TIM_Base_Start_IT+0xe0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x80>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_TIM_Base_Start_IT+0xe4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_Base_Start_IT+0x80>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1b      	ldr	r2, [pc, #108]	; (800275c <HAL_TIM_Base_Start_IT+0xe8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d115      	bne.n	8002720 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_TIM_Base_Start_IT+0xec>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b06      	cmp	r3, #6
 8002704:	d015      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0xbe>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d011      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271e:	e008      	b.n	8002732 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e000      	b.n	8002734 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002732:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40010000 	.word	0x40010000
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800
 8002750:	40000c00 	.word	0x40000c00
 8002754:	40010400 	.word	0x40010400
 8002758:	40014000 	.word	0x40014000
 800275c:	40001800 	.word	0x40001800
 8002760:	00010007 	.word	0x00010007

08002764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d020      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0202 	mvn.w	r2, #2
 8002798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9b4 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f9a6 	bl	8002b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f9b7 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d020      	beq.n	8002814 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0204 	mvn.w	r2, #4
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f98e 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f980 	bl	8002b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f991 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d020      	beq.n	8002860 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01b      	beq.n	8002860 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0208 	mvn.w	r2, #8
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f968 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f95a 	bl	8002b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f96b 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	d020      	beq.n	80028ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0210 	mvn.w	r2, #16
 800287c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2208      	movs	r2, #8
 8002882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f942 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f934 	bl	8002b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f945 	bl	8002b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00c      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0201 	mvn.w	r2, #1
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd fe8e 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00c      	beq.n	80028fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80028f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fb05 	bl	8002f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00c      	beq.n	8002922 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800291a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fafd 	bl	8002f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00c      	beq.n	8002946 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800293e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8ff 	bl	8002b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00c      	beq.n	800296a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f06f 0220 	mvn.w	r2, #32
 8002962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fac5 	bl	8002ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIM_ConfigClockSource+0x1c>
 800298c:	2302      	movs	r3, #2
 800298e:	e0b4      	b.n	8002afa <HAL_TIM_ConfigClockSource+0x186>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_TIM_ConfigClockSource+0x190>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c8:	d03e      	beq.n	8002a48 <HAL_TIM_ConfigClockSource+0xd4>
 80029ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ce:	f200 8087 	bhi.w	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	f000 8086 	beq.w	8002ae6 <HAL_TIM_ConfigClockSource+0x172>
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	d87f      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b70      	cmp	r3, #112	; 0x70
 80029e2:	d01a      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0xa6>
 80029e4:	2b70      	cmp	r3, #112	; 0x70
 80029e6:	d87b      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d050      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x11a>
 80029ec:	2b60      	cmp	r3, #96	; 0x60
 80029ee:	d877      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b50      	cmp	r3, #80	; 0x50
 80029f2:	d03c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0xfa>
 80029f4:	2b50      	cmp	r3, #80	; 0x50
 80029f6:	d873      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d058      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x13a>
 80029fc:	2b40      	cmp	r3, #64	; 0x40
 80029fe:	d86f      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b30      	cmp	r3, #48	; 0x30
 8002a02:	d064      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15a>
 8002a04:	2b30      	cmp	r3, #48	; 0x30
 8002a06:	d86b      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d060      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15a>
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d867      	bhi.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05c      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15a>
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d05a      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x15a>
 8002a18:	e062      	b.n	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a2a:	f000 f9b5 	bl	8002d98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	609a      	str	r2, [r3, #8]
      break;
 8002a46:	e04f      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a58:	f000 f99e 	bl	8002d98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a6a:	609a      	str	r2, [r3, #8]
      break;
 8002a6c:	e03c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f000 f912 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2150      	movs	r1, #80	; 0x50
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f96b 	bl	8002d62 <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e02c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 f931 	bl	8002d02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2160      	movs	r1, #96	; 0x60
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f95b 	bl	8002d62 <TIM_ITRx_SetConfig>
      break;
 8002aac:	e01c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 f8f2 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2140      	movs	r1, #64	; 0x40
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f94b 	bl	8002d62 <TIM_ITRx_SetConfig>
      break;
 8002acc:	e00c      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f000 f942 	bl	8002d62 <TIM_ITRx_SetConfig>
      break;
 8002ade:	e003      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	e000      	b.n	8002ae8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	fffeff88 	.word	0xfffeff88

08002b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a43      	ldr	r2, [pc, #268]	; (8002c78 <TIM_Base_SetConfig+0x120>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b76:	d00f      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a40      	ldr	r2, [pc, #256]	; (8002c7c <TIM_Base_SetConfig+0x124>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3f      	ldr	r2, [pc, #252]	; (8002c80 <TIM_Base_SetConfig+0x128>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3e      	ldr	r2, [pc, #248]	; (8002c84 <TIM_Base_SetConfig+0x12c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3d      	ldr	r2, [pc, #244]	; (8002c88 <TIM_Base_SetConfig+0x130>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d108      	bne.n	8002baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a32      	ldr	r2, [pc, #200]	; (8002c78 <TIM_Base_SetConfig+0x120>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02b      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb8:	d027      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <TIM_Base_SetConfig+0x124>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d023      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2e      	ldr	r2, [pc, #184]	; (8002c80 <TIM_Base_SetConfig+0x128>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d01f      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <TIM_Base_SetConfig+0x12c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01b      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	; (8002c88 <TIM_Base_SetConfig+0x130>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d017      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2b      	ldr	r2, [pc, #172]	; (8002c8c <TIM_Base_SetConfig+0x134>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2a      	ldr	r2, [pc, #168]	; (8002c90 <TIM_Base_SetConfig+0x138>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00f      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a29      	ldr	r2, [pc, #164]	; (8002c94 <TIM_Base_SetConfig+0x13c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00b      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a28      	ldr	r2, [pc, #160]	; (8002c98 <TIM_Base_SetConfig+0x140>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <TIM_Base_SetConfig+0x144>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <TIM_Base_SetConfig+0x148>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d108      	bne.n	8002c1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <TIM_Base_SetConfig+0x120>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_Base_SetConfig+0xf2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <TIM_Base_SetConfig+0x130>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d103      	bne.n	8002c52 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f043 0204 	orr.w	r2, r3, #4
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	601a      	str	r2, [r3, #0]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800
 8002c84:	40000c00 	.word	0x40000c00
 8002c88:	40010400 	.word	0x40010400
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40014400 	.word	0x40014400
 8002c94:	40014800 	.word	0x40014800
 8002c98:	40001800 	.word	0x40001800
 8002c9c:	40001c00 	.word	0x40001c00
 8002ca0:	40002000 	.word	0x40002000

08002ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f023 0201 	bic.w	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 030a 	bic.w	r3, r3, #10
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b087      	sub	sp, #28
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f023 0210 	bic.w	r2, r3, #16
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	031b      	lsls	r3, r3, #12
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b085      	sub	sp, #20
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f043 0307 	orr.w	r3, r3, #7
 8002d84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	609a      	str	r2, [r3, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	609a      	str	r2, [r3, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e06d      	b.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a2f      	ldr	r2, [pc, #188]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d108      	bne.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d022      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e62:	d01d      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a15      	ldr	r2, [pc, #84]	; (8002edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a16      	ldr	r2, [pc, #88]	; (8002eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10c      	bne.n	8002eba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40010400 	.word	0x40010400
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40014000 	.word	0x40014000
 8002ef0:	40001800 	.word	0x40001800

08002ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e040      	b.n	8002fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fdfa 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fb16 	bl	80035a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8af 	bl	80030e0 <UART_SetConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e01b      	b.n	8002fc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fb95 	bl	80036ec <UART_CheckIdleState>
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d177      	bne.n	80030d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Transmit+0x24>
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e070      	b.n	80030d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2221      	movs	r2, #33	; 0x21
 8003000:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fd fef9 	bl	8000df8 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	88fa      	ldrh	r2, [r7, #6]
 8003014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Transmit+0x68>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800303c:	e02f      	b.n	800309e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fbf7 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e03b      	b.n	80030d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	3302      	adds	r3, #2
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e007      	b.n	800308c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	781a      	ldrb	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3301      	adds	r3, #1
 800308a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1c9      	bne.n	800303e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fbc1 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e005      	b.n	80030d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2220      	movs	r2, #32
 80030ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4ba6      	ldr	r3, [pc, #664]	; (80033a4 <UART_SetConfig+0x2c4>)
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	6979      	ldr	r1, [r7, #20]
 8003114:	430b      	orrs	r3, r1
 8003116:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	430a      	orrs	r2, r1
 8003150:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a94      	ldr	r2, [pc, #592]	; (80033a8 <UART_SetConfig+0x2c8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d120      	bne.n	800319e <UART_SetConfig+0xbe>
 800315c:	4b93      	ldr	r3, [pc, #588]	; (80033ac <UART_SetConfig+0x2cc>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b03      	cmp	r3, #3
 8003168:	d816      	bhi.n	8003198 <UART_SetConfig+0xb8>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <UART_SetConfig+0x90>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003181 	.word	0x08003181
 8003174:	0800318d 	.word	0x0800318d
 8003178:	08003187 	.word	0x08003187
 800317c:	08003193 	.word	0x08003193
 8003180:	2301      	movs	r3, #1
 8003182:	77fb      	strb	r3, [r7, #31]
 8003184:	e150      	b.n	8003428 <UART_SetConfig+0x348>
 8003186:	2302      	movs	r3, #2
 8003188:	77fb      	strb	r3, [r7, #31]
 800318a:	e14d      	b.n	8003428 <UART_SetConfig+0x348>
 800318c:	2304      	movs	r3, #4
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e14a      	b.n	8003428 <UART_SetConfig+0x348>
 8003192:	2308      	movs	r3, #8
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e147      	b.n	8003428 <UART_SetConfig+0x348>
 8003198:	2310      	movs	r3, #16
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e144      	b.n	8003428 <UART_SetConfig+0x348>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a83      	ldr	r2, [pc, #524]	; (80033b0 <UART_SetConfig+0x2d0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d132      	bne.n	800320e <UART_SetConfig+0x12e>
 80031a8:	4b80      	ldr	r3, [pc, #512]	; (80033ac <UART_SetConfig+0x2cc>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d828      	bhi.n	8003208 <UART_SetConfig+0x128>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <UART_SetConfig+0xdc>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031f1 	.word	0x080031f1
 80031c0:	08003209 	.word	0x08003209
 80031c4:	08003209 	.word	0x08003209
 80031c8:	08003209 	.word	0x08003209
 80031cc:	080031fd 	.word	0x080031fd
 80031d0:	08003209 	.word	0x08003209
 80031d4:	08003209 	.word	0x08003209
 80031d8:	08003209 	.word	0x08003209
 80031dc:	080031f7 	.word	0x080031f7
 80031e0:	08003209 	.word	0x08003209
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003209 	.word	0x08003209
 80031ec:	08003203 	.word	0x08003203
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e118      	b.n	8003428 <UART_SetConfig+0x348>
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e115      	b.n	8003428 <UART_SetConfig+0x348>
 80031fc:	2304      	movs	r3, #4
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e112      	b.n	8003428 <UART_SetConfig+0x348>
 8003202:	2308      	movs	r3, #8
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e10f      	b.n	8003428 <UART_SetConfig+0x348>
 8003208:	2310      	movs	r3, #16
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e10c      	b.n	8003428 <UART_SetConfig+0x348>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a68      	ldr	r2, [pc, #416]	; (80033b4 <UART_SetConfig+0x2d4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d120      	bne.n	800325a <UART_SetConfig+0x17a>
 8003218:	4b64      	ldr	r3, [pc, #400]	; (80033ac <UART_SetConfig+0x2cc>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003222:	2b30      	cmp	r3, #48	; 0x30
 8003224:	d013      	beq.n	800324e <UART_SetConfig+0x16e>
 8003226:	2b30      	cmp	r3, #48	; 0x30
 8003228:	d814      	bhi.n	8003254 <UART_SetConfig+0x174>
 800322a:	2b20      	cmp	r3, #32
 800322c:	d009      	beq.n	8003242 <UART_SetConfig+0x162>
 800322e:	2b20      	cmp	r3, #32
 8003230:	d810      	bhi.n	8003254 <UART_SetConfig+0x174>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <UART_SetConfig+0x15c>
 8003236:	2b10      	cmp	r3, #16
 8003238:	d006      	beq.n	8003248 <UART_SetConfig+0x168>
 800323a:	e00b      	b.n	8003254 <UART_SetConfig+0x174>
 800323c:	2300      	movs	r3, #0
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e0f2      	b.n	8003428 <UART_SetConfig+0x348>
 8003242:	2302      	movs	r3, #2
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e0ef      	b.n	8003428 <UART_SetConfig+0x348>
 8003248:	2304      	movs	r3, #4
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e0ec      	b.n	8003428 <UART_SetConfig+0x348>
 800324e:	2308      	movs	r3, #8
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e0e9      	b.n	8003428 <UART_SetConfig+0x348>
 8003254:	2310      	movs	r3, #16
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e0e6      	b.n	8003428 <UART_SetConfig+0x348>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a56      	ldr	r2, [pc, #344]	; (80033b8 <UART_SetConfig+0x2d8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d120      	bne.n	80032a6 <UART_SetConfig+0x1c6>
 8003264:	4b51      	ldr	r3, [pc, #324]	; (80033ac <UART_SetConfig+0x2cc>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800326e:	2bc0      	cmp	r3, #192	; 0xc0
 8003270:	d013      	beq.n	800329a <UART_SetConfig+0x1ba>
 8003272:	2bc0      	cmp	r3, #192	; 0xc0
 8003274:	d814      	bhi.n	80032a0 <UART_SetConfig+0x1c0>
 8003276:	2b80      	cmp	r3, #128	; 0x80
 8003278:	d009      	beq.n	800328e <UART_SetConfig+0x1ae>
 800327a:	2b80      	cmp	r3, #128	; 0x80
 800327c:	d810      	bhi.n	80032a0 <UART_SetConfig+0x1c0>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <UART_SetConfig+0x1a8>
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d006      	beq.n	8003294 <UART_SetConfig+0x1b4>
 8003286:	e00b      	b.n	80032a0 <UART_SetConfig+0x1c0>
 8003288:	2300      	movs	r3, #0
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e0cc      	b.n	8003428 <UART_SetConfig+0x348>
 800328e:	2302      	movs	r3, #2
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e0c9      	b.n	8003428 <UART_SetConfig+0x348>
 8003294:	2304      	movs	r3, #4
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e0c6      	b.n	8003428 <UART_SetConfig+0x348>
 800329a:	2308      	movs	r3, #8
 800329c:	77fb      	strb	r3, [r7, #31]
 800329e:	e0c3      	b.n	8003428 <UART_SetConfig+0x348>
 80032a0:	2310      	movs	r3, #16
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e0c0      	b.n	8003428 <UART_SetConfig+0x348>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a44      	ldr	r2, [pc, #272]	; (80033bc <UART_SetConfig+0x2dc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d125      	bne.n	80032fc <UART_SetConfig+0x21c>
 80032b0:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <UART_SetConfig+0x2cc>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032be:	d017      	beq.n	80032f0 <UART_SetConfig+0x210>
 80032c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032c4:	d817      	bhi.n	80032f6 <UART_SetConfig+0x216>
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ca:	d00b      	beq.n	80032e4 <UART_SetConfig+0x204>
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d0:	d811      	bhi.n	80032f6 <UART_SetConfig+0x216>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <UART_SetConfig+0x1fe>
 80032d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032da:	d006      	beq.n	80032ea <UART_SetConfig+0x20a>
 80032dc:	e00b      	b.n	80032f6 <UART_SetConfig+0x216>
 80032de:	2300      	movs	r3, #0
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e0a1      	b.n	8003428 <UART_SetConfig+0x348>
 80032e4:	2302      	movs	r3, #2
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e09e      	b.n	8003428 <UART_SetConfig+0x348>
 80032ea:	2304      	movs	r3, #4
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e09b      	b.n	8003428 <UART_SetConfig+0x348>
 80032f0:	2308      	movs	r3, #8
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e098      	b.n	8003428 <UART_SetConfig+0x348>
 80032f6:	2310      	movs	r3, #16
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e095      	b.n	8003428 <UART_SetConfig+0x348>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <UART_SetConfig+0x2e0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d125      	bne.n	8003352 <UART_SetConfig+0x272>
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <UART_SetConfig+0x2cc>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003310:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003314:	d017      	beq.n	8003346 <UART_SetConfig+0x266>
 8003316:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800331a:	d817      	bhi.n	800334c <UART_SetConfig+0x26c>
 800331c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003320:	d00b      	beq.n	800333a <UART_SetConfig+0x25a>
 8003322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003326:	d811      	bhi.n	800334c <UART_SetConfig+0x26c>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <UART_SetConfig+0x254>
 800332c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003330:	d006      	beq.n	8003340 <UART_SetConfig+0x260>
 8003332:	e00b      	b.n	800334c <UART_SetConfig+0x26c>
 8003334:	2301      	movs	r3, #1
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e076      	b.n	8003428 <UART_SetConfig+0x348>
 800333a:	2302      	movs	r3, #2
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e073      	b.n	8003428 <UART_SetConfig+0x348>
 8003340:	2304      	movs	r3, #4
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e070      	b.n	8003428 <UART_SetConfig+0x348>
 8003346:	2308      	movs	r3, #8
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	e06d      	b.n	8003428 <UART_SetConfig+0x348>
 800334c:	2310      	movs	r3, #16
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e06a      	b.n	8003428 <UART_SetConfig+0x348>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <UART_SetConfig+0x2e4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d138      	bne.n	80033ce <UART_SetConfig+0x2ee>
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <UART_SetConfig+0x2cc>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003366:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800336a:	d017      	beq.n	800339c <UART_SetConfig+0x2bc>
 800336c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003370:	d82a      	bhi.n	80033c8 <UART_SetConfig+0x2e8>
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003376:	d00b      	beq.n	8003390 <UART_SetConfig+0x2b0>
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337c:	d824      	bhi.n	80033c8 <UART_SetConfig+0x2e8>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <UART_SetConfig+0x2aa>
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003386:	d006      	beq.n	8003396 <UART_SetConfig+0x2b6>
 8003388:	e01e      	b.n	80033c8 <UART_SetConfig+0x2e8>
 800338a:	2300      	movs	r3, #0
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e04b      	b.n	8003428 <UART_SetConfig+0x348>
 8003390:	2302      	movs	r3, #2
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e048      	b.n	8003428 <UART_SetConfig+0x348>
 8003396:	2304      	movs	r3, #4
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e045      	b.n	8003428 <UART_SetConfig+0x348>
 800339c:	2308      	movs	r3, #8
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e042      	b.n	8003428 <UART_SetConfig+0x348>
 80033a2:	bf00      	nop
 80033a4:	efff69f3 	.word	0xefff69f3
 80033a8:	40011000 	.word	0x40011000
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40004400 	.word	0x40004400
 80033b4:	40004800 	.word	0x40004800
 80033b8:	40004c00 	.word	0x40004c00
 80033bc:	40005000 	.word	0x40005000
 80033c0:	40011400 	.word	0x40011400
 80033c4:	40007800 	.word	0x40007800
 80033c8:	2310      	movs	r3, #16
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e02c      	b.n	8003428 <UART_SetConfig+0x348>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a72      	ldr	r2, [pc, #456]	; (800359c <UART_SetConfig+0x4bc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d125      	bne.n	8003424 <UART_SetConfig+0x344>
 80033d8:	4b71      	ldr	r3, [pc, #452]	; (80035a0 <UART_SetConfig+0x4c0>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033e6:	d017      	beq.n	8003418 <UART_SetConfig+0x338>
 80033e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033ec:	d817      	bhi.n	800341e <UART_SetConfig+0x33e>
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f2:	d00b      	beq.n	800340c <UART_SetConfig+0x32c>
 80033f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f8:	d811      	bhi.n	800341e <UART_SetConfig+0x33e>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <UART_SetConfig+0x326>
 80033fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003402:	d006      	beq.n	8003412 <UART_SetConfig+0x332>
 8003404:	e00b      	b.n	800341e <UART_SetConfig+0x33e>
 8003406:	2300      	movs	r3, #0
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e00d      	b.n	8003428 <UART_SetConfig+0x348>
 800340c:	2302      	movs	r3, #2
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e00a      	b.n	8003428 <UART_SetConfig+0x348>
 8003412:	2304      	movs	r3, #4
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e007      	b.n	8003428 <UART_SetConfig+0x348>
 8003418:	2308      	movs	r3, #8
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e004      	b.n	8003428 <UART_SetConfig+0x348>
 800341e:	2310      	movs	r3, #16
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e001      	b.n	8003428 <UART_SetConfig+0x348>
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003430:	d15b      	bne.n	80034ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d828      	bhi.n	800348a <UART_SetConfig+0x3aa>
 8003438:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <UART_SetConfig+0x360>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003475 	.word	0x08003475
 800344c:	0800348b 	.word	0x0800348b
 8003450:	0800347b 	.word	0x0800347b
 8003454:	0800348b 	.word	0x0800348b
 8003458:	0800348b 	.word	0x0800348b
 800345c:	0800348b 	.word	0x0800348b
 8003460:	08003483 	.word	0x08003483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe fc5e 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 8003468:	61b8      	str	r0, [r7, #24]
        break;
 800346a:	e013      	b.n	8003494 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800346c:	f7fe fc6e 	bl	8001d4c <HAL_RCC_GetPCLK2Freq>
 8003470:	61b8      	str	r0, [r7, #24]
        break;
 8003472:	e00f      	b.n	8003494 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <UART_SetConfig+0x4c4>)
 8003476:	61bb      	str	r3, [r7, #24]
        break;
 8003478:	e00c      	b.n	8003494 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347a:	f7fe fb41 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 800347e:	61b8      	str	r0, [r7, #24]
        break;
 8003480:	e008      	b.n	8003494 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003486:	61bb      	str	r3, [r7, #24]
        break;
 8003488:	e004      	b.n	8003494 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	77bb      	strb	r3, [r7, #30]
        break;
 8003492:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d074      	beq.n	8003584 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	005a      	lsls	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d916      	bls.n	80034e4 <UART_SetConfig+0x404>
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034bc:	d212      	bcs.n	80034e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f023 030f 	bic.w	r3, r3, #15
 80034c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f003 0307 	and.w	r3, r3, #7
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	89fb      	ldrh	r3, [r7, #14]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	89fa      	ldrh	r2, [r7, #14]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	e04f      	b.n	8003584 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	77bb      	strb	r3, [r7, #30]
 80034e8:	e04c      	b.n	8003584 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d828      	bhi.n	8003542 <UART_SetConfig+0x462>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <UART_SetConfig+0x418>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	08003525 	.word	0x08003525
 8003500:	0800352d 	.word	0x0800352d
 8003504:	08003543 	.word	0x08003543
 8003508:	08003533 	.word	0x08003533
 800350c:	08003543 	.word	0x08003543
 8003510:	08003543 	.word	0x08003543
 8003514:	08003543 	.word	0x08003543
 8003518:	0800353b 	.word	0x0800353b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7fe fc02 	bl	8001d24 <HAL_RCC_GetPCLK1Freq>
 8003520:	61b8      	str	r0, [r7, #24]
        break;
 8003522:	e013      	b.n	800354c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7fe fc12 	bl	8001d4c <HAL_RCC_GetPCLK2Freq>
 8003528:	61b8      	str	r0, [r7, #24]
        break;
 800352a:	e00f      	b.n	800354c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800352c:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <UART_SetConfig+0x4c4>)
 800352e:	61bb      	str	r3, [r7, #24]
        break;
 8003530:	e00c      	b.n	800354c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003532:	f7fe fae5 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8003536:	61b8      	str	r0, [r7, #24]
        break;
 8003538:	e008      	b.n	800354c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	61bb      	str	r3, [r7, #24]
        break;
 8003540:	e004      	b.n	800354c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	77bb      	strb	r3, [r7, #30]
        break;
 800354a:	bf00      	nop
    }

    if (pclk != 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d018      	beq.n	8003584 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	085a      	lsrs	r2, r3, #1
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	441a      	add	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b0f      	cmp	r3, #15
 800356a:	d909      	bls.n	8003580 <UART_SetConfig+0x4a0>
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003572:	d205      	bcs.n	8003580 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60da      	str	r2, [r3, #12]
 800357e:	e001      	b.n	8003584 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003590:	7fbb      	ldrb	r3, [r7, #30]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40007c00 	.word	0x40007c00
 80035a0:	40023800 	.word	0x40023800
 80035a4:	00f42400 	.word	0x00f42400

080035a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01a      	beq.n	80036be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a6:	d10a      	bne.n	80036be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b098      	sub	sp, #96	; 0x60
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036fc:	f7fd fb7c 	bl	8000df8 <HAL_GetTick>
 8003700:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d12e      	bne.n	800376e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003718:	2200      	movs	r2, #0
 800371a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f88c 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d021      	beq.n	800376e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800373e:	653b      	str	r3, [r7, #80]	; 0x50
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003748:	647b      	str	r3, [r7, #68]	; 0x44
 800374a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800374e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e6      	bne.n	800372a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e062      	b.n	8003834 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d149      	bne.n	8003810 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003784:	2200      	movs	r2, #0
 8003786:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f856 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d03c      	beq.n	8003810 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	623b      	str	r3, [r7, #32]
   return(result);
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
 80037b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e6      	bne.n	8003796 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3308      	adds	r3, #8
 80037e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	617b      	str	r3, [r7, #20]
   return(result);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e5      	bne.n	80037c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e011      	b.n	8003834 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3758      	adds	r7, #88	; 0x58
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384c:	e04f      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d04b      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fd facf 	bl	8000df8 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <UART_WaitOnFlagUntilTimeout+0x30>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e04e      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d037      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d034      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d031      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b08      	cmp	r3, #8
 8003896:	d110      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2208      	movs	r2, #8
 800389e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f838 	bl	8003916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2208      	movs	r2, #8
 80038aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e029      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	d111      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f81e 	bl	8003916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00f      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4013      	ands	r3, r2
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	429a      	cmp	r2, r3
 800390a:	d0a0      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003916:	b480      	push	{r7}
 8003918:	b095      	sub	sp, #84	; 0x54
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393c:	643b      	str	r3, [r7, #64]	; 0x40
 800393e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e6      	bne.n	800391e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	64bb      	str	r3, [r7, #72]	; 0x48
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3308      	adds	r3, #8
 800396e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e5      	bne.n	8003950 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003988:	2b01      	cmp	r3, #1
 800398a:	d118      	bne.n	80039be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	60bb      	str	r3, [r7, #8]
   return(result);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f023 0310 	bic.w	r3, r3, #16
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6979      	ldr	r1, [r7, #20]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	613b      	str	r3, [r7, #16]
   return(result);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e6      	bne.n	800398c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80039d2:	bf00      	nop
 80039d4:	3754      	adds	r7, #84	; 0x54
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <siprintf>:
 80039e0:	b40e      	push	{r1, r2, r3}
 80039e2:	b500      	push	{lr}
 80039e4:	b09c      	sub	sp, #112	; 0x70
 80039e6:	ab1d      	add	r3, sp, #116	; 0x74
 80039e8:	9002      	str	r0, [sp, #8]
 80039ea:	9006      	str	r0, [sp, #24]
 80039ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039f0:	4809      	ldr	r0, [pc, #36]	; (8003a18 <siprintf+0x38>)
 80039f2:	9107      	str	r1, [sp, #28]
 80039f4:	9104      	str	r1, [sp, #16]
 80039f6:	4909      	ldr	r1, [pc, #36]	; (8003a1c <siprintf+0x3c>)
 80039f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039fc:	9105      	str	r1, [sp, #20]
 80039fe:	6800      	ldr	r0, [r0, #0]
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	a902      	add	r1, sp, #8
 8003a04:	f000 f992 	bl	8003d2c <_svfiprintf_r>
 8003a08:	9b02      	ldr	r3, [sp, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	b01c      	add	sp, #112	; 0x70
 8003a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a14:	b003      	add	sp, #12
 8003a16:	4770      	bx	lr
 8003a18:	20000058 	.word	0x20000058
 8003a1c:	ffff0208 	.word	0xffff0208

08003a20 <memset>:
 8003a20:	4402      	add	r2, r0
 8003a22:	4603      	mov	r3, r0
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d100      	bne.n	8003a2a <memset+0xa>
 8003a28:	4770      	bx	lr
 8003a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a2e:	e7f9      	b.n	8003a24 <memset+0x4>

08003a30 <__errno>:
 8003a30:	4b01      	ldr	r3, [pc, #4]	; (8003a38 <__errno+0x8>)
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	20000058 	.word	0x20000058

08003a3c <__libc_init_array>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	4d0d      	ldr	r5, [pc, #52]	; (8003a74 <__libc_init_array+0x38>)
 8003a40:	4c0d      	ldr	r4, [pc, #52]	; (8003a78 <__libc_init_array+0x3c>)
 8003a42:	1b64      	subs	r4, r4, r5
 8003a44:	10a4      	asrs	r4, r4, #2
 8003a46:	2600      	movs	r6, #0
 8003a48:	42a6      	cmp	r6, r4
 8003a4a:	d109      	bne.n	8003a60 <__libc_init_array+0x24>
 8003a4c:	4d0b      	ldr	r5, [pc, #44]	; (8003a7c <__libc_init_array+0x40>)
 8003a4e:	4c0c      	ldr	r4, [pc, #48]	; (8003a80 <__libc_init_array+0x44>)
 8003a50:	f000 fc6a 	bl	8004328 <_init>
 8003a54:	1b64      	subs	r4, r4, r5
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	2600      	movs	r6, #0
 8003a5a:	42a6      	cmp	r6, r4
 8003a5c:	d105      	bne.n	8003a6a <__libc_init_array+0x2e>
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a64:	4798      	blx	r3
 8003a66:	3601      	adds	r6, #1
 8003a68:	e7ee      	b.n	8003a48 <__libc_init_array+0xc>
 8003a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a6e:	4798      	blx	r3
 8003a70:	3601      	adds	r6, #1
 8003a72:	e7f2      	b.n	8003a5a <__libc_init_array+0x1e>
 8003a74:	080043c4 	.word	0x080043c4
 8003a78:	080043c4 	.word	0x080043c4
 8003a7c:	080043c4 	.word	0x080043c4
 8003a80:	080043c8 	.word	0x080043c8

08003a84 <__retarget_lock_acquire_recursive>:
 8003a84:	4770      	bx	lr

08003a86 <__retarget_lock_release_recursive>:
 8003a86:	4770      	bx	lr

08003a88 <_free_r>:
 8003a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a8a:	2900      	cmp	r1, #0
 8003a8c:	d044      	beq.n	8003b18 <_free_r+0x90>
 8003a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a92:	9001      	str	r0, [sp, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f1a1 0404 	sub.w	r4, r1, #4
 8003a9a:	bfb8      	it	lt
 8003a9c:	18e4      	addlt	r4, r4, r3
 8003a9e:	f000 f8df 	bl	8003c60 <__malloc_lock>
 8003aa2:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <_free_r+0x94>)
 8003aa4:	9801      	ldr	r0, [sp, #4]
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	b933      	cbnz	r3, 8003ab8 <_free_r+0x30>
 8003aaa:	6063      	str	r3, [r4, #4]
 8003aac:	6014      	str	r4, [r2, #0]
 8003aae:	b003      	add	sp, #12
 8003ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ab4:	f000 b8da 	b.w	8003c6c <__malloc_unlock>
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	d908      	bls.n	8003ace <_free_r+0x46>
 8003abc:	6825      	ldr	r5, [r4, #0]
 8003abe:	1961      	adds	r1, r4, r5
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	bf01      	itttt	eq
 8003ac4:	6819      	ldreq	r1, [r3, #0]
 8003ac6:	685b      	ldreq	r3, [r3, #4]
 8003ac8:	1949      	addeq	r1, r1, r5
 8003aca:	6021      	streq	r1, [r4, #0]
 8003acc:	e7ed      	b.n	8003aaa <_free_r+0x22>
 8003ace:	461a      	mov	r2, r3
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	b10b      	cbz	r3, 8003ad8 <_free_r+0x50>
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	d9fa      	bls.n	8003ace <_free_r+0x46>
 8003ad8:	6811      	ldr	r1, [r2, #0]
 8003ada:	1855      	adds	r5, r2, r1
 8003adc:	42a5      	cmp	r5, r4
 8003ade:	d10b      	bne.n	8003af8 <_free_r+0x70>
 8003ae0:	6824      	ldr	r4, [r4, #0]
 8003ae2:	4421      	add	r1, r4
 8003ae4:	1854      	adds	r4, r2, r1
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	6011      	str	r1, [r2, #0]
 8003aea:	d1e0      	bne.n	8003aae <_free_r+0x26>
 8003aec:	681c      	ldr	r4, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	6053      	str	r3, [r2, #4]
 8003af2:	440c      	add	r4, r1
 8003af4:	6014      	str	r4, [r2, #0]
 8003af6:	e7da      	b.n	8003aae <_free_r+0x26>
 8003af8:	d902      	bls.n	8003b00 <_free_r+0x78>
 8003afa:	230c      	movs	r3, #12
 8003afc:	6003      	str	r3, [r0, #0]
 8003afe:	e7d6      	b.n	8003aae <_free_r+0x26>
 8003b00:	6825      	ldr	r5, [r4, #0]
 8003b02:	1961      	adds	r1, r4, r5
 8003b04:	428b      	cmp	r3, r1
 8003b06:	bf04      	itt	eq
 8003b08:	6819      	ldreq	r1, [r3, #0]
 8003b0a:	685b      	ldreq	r3, [r3, #4]
 8003b0c:	6063      	str	r3, [r4, #4]
 8003b0e:	bf04      	itt	eq
 8003b10:	1949      	addeq	r1, r1, r5
 8003b12:	6021      	streq	r1, [r4, #0]
 8003b14:	6054      	str	r4, [r2, #4]
 8003b16:	e7ca      	b.n	8003aae <_free_r+0x26>
 8003b18:	b003      	add	sp, #12
 8003b1a:	bd30      	pop	{r4, r5, pc}
 8003b1c:	20000338 	.word	0x20000338

08003b20 <sbrk_aligned>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	4e0e      	ldr	r6, [pc, #56]	; (8003b5c <sbrk_aligned+0x3c>)
 8003b24:	460c      	mov	r4, r1
 8003b26:	6831      	ldr	r1, [r6, #0]
 8003b28:	4605      	mov	r5, r0
 8003b2a:	b911      	cbnz	r1, 8003b32 <sbrk_aligned+0x12>
 8003b2c:	f000 fba6 	bl	800427c <_sbrk_r>
 8003b30:	6030      	str	r0, [r6, #0]
 8003b32:	4621      	mov	r1, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	f000 fba1 	bl	800427c <_sbrk_r>
 8003b3a:	1c43      	adds	r3, r0, #1
 8003b3c:	d00a      	beq.n	8003b54 <sbrk_aligned+0x34>
 8003b3e:	1cc4      	adds	r4, r0, #3
 8003b40:	f024 0403 	bic.w	r4, r4, #3
 8003b44:	42a0      	cmp	r0, r4
 8003b46:	d007      	beq.n	8003b58 <sbrk_aligned+0x38>
 8003b48:	1a21      	subs	r1, r4, r0
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f000 fb96 	bl	800427c <_sbrk_r>
 8003b50:	3001      	adds	r0, #1
 8003b52:	d101      	bne.n	8003b58 <sbrk_aligned+0x38>
 8003b54:	f04f 34ff 	mov.w	r4, #4294967295
 8003b58:	4620      	mov	r0, r4
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	2000033c 	.word	0x2000033c

08003b60 <_malloc_r>:
 8003b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b64:	1ccd      	adds	r5, r1, #3
 8003b66:	f025 0503 	bic.w	r5, r5, #3
 8003b6a:	3508      	adds	r5, #8
 8003b6c:	2d0c      	cmp	r5, #12
 8003b6e:	bf38      	it	cc
 8003b70:	250c      	movcc	r5, #12
 8003b72:	2d00      	cmp	r5, #0
 8003b74:	4607      	mov	r7, r0
 8003b76:	db01      	blt.n	8003b7c <_malloc_r+0x1c>
 8003b78:	42a9      	cmp	r1, r5
 8003b7a:	d905      	bls.n	8003b88 <_malloc_r+0x28>
 8003b7c:	230c      	movs	r3, #12
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	2600      	movs	r6, #0
 8003b82:	4630      	mov	r0, r6
 8003b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003c5c <_malloc_r+0xfc>
 8003b8c:	f000 f868 	bl	8003c60 <__malloc_lock>
 8003b90:	f8d8 3000 	ldr.w	r3, [r8]
 8003b94:	461c      	mov	r4, r3
 8003b96:	bb5c      	cbnz	r4, 8003bf0 <_malloc_r+0x90>
 8003b98:	4629      	mov	r1, r5
 8003b9a:	4638      	mov	r0, r7
 8003b9c:	f7ff ffc0 	bl	8003b20 <sbrk_aligned>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	d155      	bne.n	8003c52 <_malloc_r+0xf2>
 8003ba6:	f8d8 4000 	ldr.w	r4, [r8]
 8003baa:	4626      	mov	r6, r4
 8003bac:	2e00      	cmp	r6, #0
 8003bae:	d145      	bne.n	8003c3c <_malloc_r+0xdc>
 8003bb0:	2c00      	cmp	r4, #0
 8003bb2:	d048      	beq.n	8003c46 <_malloc_r+0xe6>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4638      	mov	r0, r7
 8003bba:	eb04 0903 	add.w	r9, r4, r3
 8003bbe:	f000 fb5d 	bl	800427c <_sbrk_r>
 8003bc2:	4581      	cmp	r9, r0
 8003bc4:	d13f      	bne.n	8003c46 <_malloc_r+0xe6>
 8003bc6:	6821      	ldr	r1, [r4, #0]
 8003bc8:	1a6d      	subs	r5, r5, r1
 8003bca:	4629      	mov	r1, r5
 8003bcc:	4638      	mov	r0, r7
 8003bce:	f7ff ffa7 	bl	8003b20 <sbrk_aligned>
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	d037      	beq.n	8003c46 <_malloc_r+0xe6>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	442b      	add	r3, r5
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d038      	beq.n	8003c56 <_malloc_r+0xf6>
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	42a2      	cmp	r2, r4
 8003be8:	d12b      	bne.n	8003c42 <_malloc_r+0xe2>
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	e00f      	b.n	8003c10 <_malloc_r+0xb0>
 8003bf0:	6822      	ldr	r2, [r4, #0]
 8003bf2:	1b52      	subs	r2, r2, r5
 8003bf4:	d41f      	bmi.n	8003c36 <_malloc_r+0xd6>
 8003bf6:	2a0b      	cmp	r2, #11
 8003bf8:	d917      	bls.n	8003c2a <_malloc_r+0xca>
 8003bfa:	1961      	adds	r1, r4, r5
 8003bfc:	42a3      	cmp	r3, r4
 8003bfe:	6025      	str	r5, [r4, #0]
 8003c00:	bf18      	it	ne
 8003c02:	6059      	strne	r1, [r3, #4]
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	bf08      	it	eq
 8003c08:	f8c8 1000 	streq.w	r1, [r8]
 8003c0c:	5162      	str	r2, [r4, r5]
 8003c0e:	604b      	str	r3, [r1, #4]
 8003c10:	4638      	mov	r0, r7
 8003c12:	f104 060b 	add.w	r6, r4, #11
 8003c16:	f000 f829 	bl	8003c6c <__malloc_unlock>
 8003c1a:	f026 0607 	bic.w	r6, r6, #7
 8003c1e:	1d23      	adds	r3, r4, #4
 8003c20:	1af2      	subs	r2, r6, r3
 8003c22:	d0ae      	beq.n	8003b82 <_malloc_r+0x22>
 8003c24:	1b9b      	subs	r3, r3, r6
 8003c26:	50a3      	str	r3, [r4, r2]
 8003c28:	e7ab      	b.n	8003b82 <_malloc_r+0x22>
 8003c2a:	42a3      	cmp	r3, r4
 8003c2c:	6862      	ldr	r2, [r4, #4]
 8003c2e:	d1dd      	bne.n	8003bec <_malloc_r+0x8c>
 8003c30:	f8c8 2000 	str.w	r2, [r8]
 8003c34:	e7ec      	b.n	8003c10 <_malloc_r+0xb0>
 8003c36:	4623      	mov	r3, r4
 8003c38:	6864      	ldr	r4, [r4, #4]
 8003c3a:	e7ac      	b.n	8003b96 <_malloc_r+0x36>
 8003c3c:	4634      	mov	r4, r6
 8003c3e:	6876      	ldr	r6, [r6, #4]
 8003c40:	e7b4      	b.n	8003bac <_malloc_r+0x4c>
 8003c42:	4613      	mov	r3, r2
 8003c44:	e7cc      	b.n	8003be0 <_malloc_r+0x80>
 8003c46:	230c      	movs	r3, #12
 8003c48:	603b      	str	r3, [r7, #0]
 8003c4a:	4638      	mov	r0, r7
 8003c4c:	f000 f80e 	bl	8003c6c <__malloc_unlock>
 8003c50:	e797      	b.n	8003b82 <_malloc_r+0x22>
 8003c52:	6025      	str	r5, [r4, #0]
 8003c54:	e7dc      	b.n	8003c10 <_malloc_r+0xb0>
 8003c56:	605b      	str	r3, [r3, #4]
 8003c58:	deff      	udf	#255	; 0xff
 8003c5a:	bf00      	nop
 8003c5c:	20000338 	.word	0x20000338

08003c60 <__malloc_lock>:
 8003c60:	4801      	ldr	r0, [pc, #4]	; (8003c68 <__malloc_lock+0x8>)
 8003c62:	f7ff bf0f 	b.w	8003a84 <__retarget_lock_acquire_recursive>
 8003c66:	bf00      	nop
 8003c68:	20000334 	.word	0x20000334

08003c6c <__malloc_unlock>:
 8003c6c:	4801      	ldr	r0, [pc, #4]	; (8003c74 <__malloc_unlock+0x8>)
 8003c6e:	f7ff bf0a 	b.w	8003a86 <__retarget_lock_release_recursive>
 8003c72:	bf00      	nop
 8003c74:	20000334 	.word	0x20000334

08003c78 <__ssputs_r>:
 8003c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7c:	688e      	ldr	r6, [r1, #8]
 8003c7e:	461f      	mov	r7, r3
 8003c80:	42be      	cmp	r6, r7
 8003c82:	680b      	ldr	r3, [r1, #0]
 8003c84:	4682      	mov	sl, r0
 8003c86:	460c      	mov	r4, r1
 8003c88:	4690      	mov	r8, r2
 8003c8a:	d82c      	bhi.n	8003ce6 <__ssputs_r+0x6e>
 8003c8c:	898a      	ldrh	r2, [r1, #12]
 8003c8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c92:	d026      	beq.n	8003ce2 <__ssputs_r+0x6a>
 8003c94:	6965      	ldr	r5, [r4, #20]
 8003c96:	6909      	ldr	r1, [r1, #16]
 8003c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c9c:	eba3 0901 	sub.w	r9, r3, r1
 8003ca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ca4:	1c7b      	adds	r3, r7, #1
 8003ca6:	444b      	add	r3, r9
 8003ca8:	106d      	asrs	r5, r5, #1
 8003caa:	429d      	cmp	r5, r3
 8003cac:	bf38      	it	cc
 8003cae:	461d      	movcc	r5, r3
 8003cb0:	0553      	lsls	r3, r2, #21
 8003cb2:	d527      	bpl.n	8003d04 <__ssputs_r+0x8c>
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	f7ff ff53 	bl	8003b60 <_malloc_r>
 8003cba:	4606      	mov	r6, r0
 8003cbc:	b360      	cbz	r0, 8003d18 <__ssputs_r+0xa0>
 8003cbe:	6921      	ldr	r1, [r4, #16]
 8003cc0:	464a      	mov	r2, r9
 8003cc2:	f000 faeb 	bl	800429c <memcpy>
 8003cc6:	89a3      	ldrh	r3, [r4, #12]
 8003cc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd0:	81a3      	strh	r3, [r4, #12]
 8003cd2:	6126      	str	r6, [r4, #16]
 8003cd4:	6165      	str	r5, [r4, #20]
 8003cd6:	444e      	add	r6, r9
 8003cd8:	eba5 0509 	sub.w	r5, r5, r9
 8003cdc:	6026      	str	r6, [r4, #0]
 8003cde:	60a5      	str	r5, [r4, #8]
 8003ce0:	463e      	mov	r6, r7
 8003ce2:	42be      	cmp	r6, r7
 8003ce4:	d900      	bls.n	8003ce8 <__ssputs_r+0x70>
 8003ce6:	463e      	mov	r6, r7
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	4632      	mov	r2, r6
 8003cec:	4641      	mov	r1, r8
 8003cee:	f000 faab 	bl	8004248 <memmove>
 8003cf2:	68a3      	ldr	r3, [r4, #8]
 8003cf4:	1b9b      	subs	r3, r3, r6
 8003cf6:	60a3      	str	r3, [r4, #8]
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	4433      	add	r3, r6
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	2000      	movs	r0, #0
 8003d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d04:	462a      	mov	r2, r5
 8003d06:	f000 fad7 	bl	80042b8 <_realloc_r>
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d1e0      	bne.n	8003cd2 <__ssputs_r+0x5a>
 8003d10:	6921      	ldr	r1, [r4, #16]
 8003d12:	4650      	mov	r0, sl
 8003d14:	f7ff feb8 	bl	8003a88 <_free_r>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	f8ca 3000 	str.w	r3, [sl]
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d24:	81a3      	strh	r3, [r4, #12]
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2a:	e7e9      	b.n	8003d00 <__ssputs_r+0x88>

08003d2c <_svfiprintf_r>:
 8003d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d30:	4698      	mov	r8, r3
 8003d32:	898b      	ldrh	r3, [r1, #12]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	b09d      	sub	sp, #116	; 0x74
 8003d38:	4607      	mov	r7, r0
 8003d3a:	460d      	mov	r5, r1
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	d50e      	bpl.n	8003d5e <_svfiprintf_r+0x32>
 8003d40:	690b      	ldr	r3, [r1, #16]
 8003d42:	b963      	cbnz	r3, 8003d5e <_svfiprintf_r+0x32>
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	f7ff ff0b 	bl	8003b60 <_malloc_r>
 8003d4a:	6028      	str	r0, [r5, #0]
 8003d4c:	6128      	str	r0, [r5, #16]
 8003d4e:	b920      	cbnz	r0, 8003d5a <_svfiprintf_r+0x2e>
 8003d50:	230c      	movs	r3, #12
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295
 8003d58:	e0d0      	b.n	8003efc <_svfiprintf_r+0x1d0>
 8003d5a:	2340      	movs	r3, #64	; 0x40
 8003d5c:	616b      	str	r3, [r5, #20]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9309      	str	r3, [sp, #36]	; 0x24
 8003d62:	2320      	movs	r3, #32
 8003d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d6c:	2330      	movs	r3, #48	; 0x30
 8003d6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f14 <_svfiprintf_r+0x1e8>
 8003d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d76:	f04f 0901 	mov.w	r9, #1
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	469a      	mov	sl, r3
 8003d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d82:	b10a      	cbz	r2, 8003d88 <_svfiprintf_r+0x5c>
 8003d84:	2a25      	cmp	r2, #37	; 0x25
 8003d86:	d1f9      	bne.n	8003d7c <_svfiprintf_r+0x50>
 8003d88:	ebba 0b04 	subs.w	fp, sl, r4
 8003d8c:	d00b      	beq.n	8003da6 <_svfiprintf_r+0x7a>
 8003d8e:	465b      	mov	r3, fp
 8003d90:	4622      	mov	r2, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	4638      	mov	r0, r7
 8003d96:	f7ff ff6f 	bl	8003c78 <__ssputs_r>
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	f000 80a9 	beq.w	8003ef2 <_svfiprintf_r+0x1c6>
 8003da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003da2:	445a      	add	r2, fp
 8003da4:	9209      	str	r2, [sp, #36]	; 0x24
 8003da6:	f89a 3000 	ldrb.w	r3, [sl]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80a1 	beq.w	8003ef2 <_svfiprintf_r+0x1c6>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dba:	f10a 0a01 	add.w	sl, sl, #1
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	9307      	str	r3, [sp, #28]
 8003dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8003dc8:	4654      	mov	r4, sl
 8003dca:	2205      	movs	r2, #5
 8003dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd0:	4850      	ldr	r0, [pc, #320]	; (8003f14 <_svfiprintf_r+0x1e8>)
 8003dd2:	f7fc fa3d 	bl	8000250 <memchr>
 8003dd6:	9a04      	ldr	r2, [sp, #16]
 8003dd8:	b9d8      	cbnz	r0, 8003e12 <_svfiprintf_r+0xe6>
 8003dda:	06d0      	lsls	r0, r2, #27
 8003ddc:	bf44      	itt	mi
 8003dde:	2320      	movmi	r3, #32
 8003de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003de4:	0711      	lsls	r1, r2, #28
 8003de6:	bf44      	itt	mi
 8003de8:	232b      	movmi	r3, #43	; 0x2b
 8003dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dee:	f89a 3000 	ldrb.w	r3, [sl]
 8003df2:	2b2a      	cmp	r3, #42	; 0x2a
 8003df4:	d015      	beq.n	8003e22 <_svfiprintf_r+0xf6>
 8003df6:	9a07      	ldr	r2, [sp, #28]
 8003df8:	4654      	mov	r4, sl
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f04f 0c0a 	mov.w	ip, #10
 8003e00:	4621      	mov	r1, r4
 8003e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e06:	3b30      	subs	r3, #48	; 0x30
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d94d      	bls.n	8003ea8 <_svfiprintf_r+0x17c>
 8003e0c:	b1b0      	cbz	r0, 8003e3c <_svfiprintf_r+0x110>
 8003e0e:	9207      	str	r2, [sp, #28]
 8003e10:	e014      	b.n	8003e3c <_svfiprintf_r+0x110>
 8003e12:	eba0 0308 	sub.w	r3, r0, r8
 8003e16:	fa09 f303 	lsl.w	r3, r9, r3
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	46a2      	mov	sl, r4
 8003e20:	e7d2      	b.n	8003dc8 <_svfiprintf_r+0x9c>
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	1d19      	adds	r1, r3, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	9103      	str	r1, [sp, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bfbb      	ittet	lt
 8003e2e:	425b      	neglt	r3, r3
 8003e30:	f042 0202 	orrlt.w	r2, r2, #2
 8003e34:	9307      	strge	r3, [sp, #28]
 8003e36:	9307      	strlt	r3, [sp, #28]
 8003e38:	bfb8      	it	lt
 8003e3a:	9204      	strlt	r2, [sp, #16]
 8003e3c:	7823      	ldrb	r3, [r4, #0]
 8003e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e40:	d10c      	bne.n	8003e5c <_svfiprintf_r+0x130>
 8003e42:	7863      	ldrb	r3, [r4, #1]
 8003e44:	2b2a      	cmp	r3, #42	; 0x2a
 8003e46:	d134      	bne.n	8003eb2 <_svfiprintf_r+0x186>
 8003e48:	9b03      	ldr	r3, [sp, #12]
 8003e4a:	1d1a      	adds	r2, r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	9203      	str	r2, [sp, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bfb8      	it	lt
 8003e54:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e58:	3402      	adds	r4, #2
 8003e5a:	9305      	str	r3, [sp, #20]
 8003e5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003f24 <_svfiprintf_r+0x1f8>
 8003e60:	7821      	ldrb	r1, [r4, #0]
 8003e62:	2203      	movs	r2, #3
 8003e64:	4650      	mov	r0, sl
 8003e66:	f7fc f9f3 	bl	8000250 <memchr>
 8003e6a:	b138      	cbz	r0, 8003e7c <_svfiprintf_r+0x150>
 8003e6c:	9b04      	ldr	r3, [sp, #16]
 8003e6e:	eba0 000a 	sub.w	r0, r0, sl
 8003e72:	2240      	movs	r2, #64	; 0x40
 8003e74:	4082      	lsls	r2, r0
 8003e76:	4313      	orrs	r3, r2
 8003e78:	3401      	adds	r4, #1
 8003e7a:	9304      	str	r3, [sp, #16]
 8003e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e80:	4825      	ldr	r0, [pc, #148]	; (8003f18 <_svfiprintf_r+0x1ec>)
 8003e82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e86:	2206      	movs	r2, #6
 8003e88:	f7fc f9e2 	bl	8000250 <memchr>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d038      	beq.n	8003f02 <_svfiprintf_r+0x1d6>
 8003e90:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <_svfiprintf_r+0x1f0>)
 8003e92:	bb1b      	cbnz	r3, 8003edc <_svfiprintf_r+0x1b0>
 8003e94:	9b03      	ldr	r3, [sp, #12]
 8003e96:	3307      	adds	r3, #7
 8003e98:	f023 0307 	bic.w	r3, r3, #7
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	9303      	str	r3, [sp, #12]
 8003ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea2:	4433      	add	r3, r6
 8003ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ea6:	e768      	b.n	8003d7a <_svfiprintf_r+0x4e>
 8003ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eac:	460c      	mov	r4, r1
 8003eae:	2001      	movs	r0, #1
 8003eb0:	e7a6      	b.n	8003e00 <_svfiprintf_r+0xd4>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	3401      	adds	r4, #1
 8003eb6:	9305      	str	r3, [sp, #20]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f04f 0c0a 	mov.w	ip, #10
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec4:	3a30      	subs	r2, #48	; 0x30
 8003ec6:	2a09      	cmp	r2, #9
 8003ec8:	d903      	bls.n	8003ed2 <_svfiprintf_r+0x1a6>
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0c6      	beq.n	8003e5c <_svfiprintf_r+0x130>
 8003ece:	9105      	str	r1, [sp, #20]
 8003ed0:	e7c4      	b.n	8003e5c <_svfiprintf_r+0x130>
 8003ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e7f0      	b.n	8003ebe <_svfiprintf_r+0x192>
 8003edc:	ab03      	add	r3, sp, #12
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <_svfiprintf_r+0x1f4>)
 8003ee4:	a904      	add	r1, sp, #16
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	f3af 8000 	nop.w
 8003eec:	1c42      	adds	r2, r0, #1
 8003eee:	4606      	mov	r6, r0
 8003ef0:	d1d6      	bne.n	8003ea0 <_svfiprintf_r+0x174>
 8003ef2:	89ab      	ldrh	r3, [r5, #12]
 8003ef4:	065b      	lsls	r3, r3, #25
 8003ef6:	f53f af2d 	bmi.w	8003d54 <_svfiprintf_r+0x28>
 8003efa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003efc:	b01d      	add	sp, #116	; 0x74
 8003efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f02:	ab03      	add	r3, sp, #12
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	462a      	mov	r2, r5
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <_svfiprintf_r+0x1f4>)
 8003f0a:	a904      	add	r1, sp, #16
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	f000 f879 	bl	8004004 <_printf_i>
 8003f12:	e7eb      	b.n	8003eec <_svfiprintf_r+0x1c0>
 8003f14:	08004388 	.word	0x08004388
 8003f18:	08004392 	.word	0x08004392
 8003f1c:	00000000 	.word	0x00000000
 8003f20:	08003c79 	.word	0x08003c79
 8003f24:	0800438e 	.word	0x0800438e

08003f28 <_printf_common>:
 8003f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	4699      	mov	r9, r3
 8003f30:	688a      	ldr	r2, [r1, #8]
 8003f32:	690b      	ldr	r3, [r1, #16]
 8003f34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bfb8      	it	lt
 8003f3c:	4613      	movlt	r3, r2
 8003f3e:	6033      	str	r3, [r6, #0]
 8003f40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f44:	4607      	mov	r7, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	b10a      	cbz	r2, 8003f4e <_printf_common+0x26>
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	6033      	str	r3, [r6, #0]
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	0699      	lsls	r1, r3, #26
 8003f52:	bf42      	ittt	mi
 8003f54:	6833      	ldrmi	r3, [r6, #0]
 8003f56:	3302      	addmi	r3, #2
 8003f58:	6033      	strmi	r3, [r6, #0]
 8003f5a:	6825      	ldr	r5, [r4, #0]
 8003f5c:	f015 0506 	ands.w	r5, r5, #6
 8003f60:	d106      	bne.n	8003f70 <_printf_common+0x48>
 8003f62:	f104 0a19 	add.w	sl, r4, #25
 8003f66:	68e3      	ldr	r3, [r4, #12]
 8003f68:	6832      	ldr	r2, [r6, #0]
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	42ab      	cmp	r3, r5
 8003f6e:	dc26      	bgt.n	8003fbe <_printf_common+0x96>
 8003f70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f74:	1e13      	subs	r3, r2, #0
 8003f76:	6822      	ldr	r2, [r4, #0]
 8003f78:	bf18      	it	ne
 8003f7a:	2301      	movne	r3, #1
 8003f7c:	0692      	lsls	r2, r2, #26
 8003f7e:	d42b      	bmi.n	8003fd8 <_printf_common+0xb0>
 8003f80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f84:	4649      	mov	r1, r9
 8003f86:	4638      	mov	r0, r7
 8003f88:	47c0      	blx	r8
 8003f8a:	3001      	adds	r0, #1
 8003f8c:	d01e      	beq.n	8003fcc <_printf_common+0xa4>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	6922      	ldr	r2, [r4, #16]
 8003f92:	f003 0306 	and.w	r3, r3, #6
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	bf02      	ittt	eq
 8003f9a:	68e5      	ldreq	r5, [r4, #12]
 8003f9c:	6833      	ldreq	r3, [r6, #0]
 8003f9e:	1aed      	subeq	r5, r5, r3
 8003fa0:	68a3      	ldr	r3, [r4, #8]
 8003fa2:	bf0c      	ite	eq
 8003fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fa8:	2500      	movne	r5, #0
 8003faa:	4293      	cmp	r3, r2
 8003fac:	bfc4      	itt	gt
 8003fae:	1a9b      	subgt	r3, r3, r2
 8003fb0:	18ed      	addgt	r5, r5, r3
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	341a      	adds	r4, #26
 8003fb6:	42b5      	cmp	r5, r6
 8003fb8:	d11a      	bne.n	8003ff0 <_printf_common+0xc8>
 8003fba:	2000      	movs	r0, #0
 8003fbc:	e008      	b.n	8003fd0 <_printf_common+0xa8>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4652      	mov	r2, sl
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	47c0      	blx	r8
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d103      	bne.n	8003fd4 <_printf_common+0xac>
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd4:	3501      	adds	r5, #1
 8003fd6:	e7c6      	b.n	8003f66 <_printf_common+0x3e>
 8003fd8:	18e1      	adds	r1, r4, r3
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	2030      	movs	r0, #48	; 0x30
 8003fde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fe2:	4422      	add	r2, r4
 8003fe4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fe8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fec:	3302      	adds	r3, #2
 8003fee:	e7c7      	b.n	8003f80 <_printf_common+0x58>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	4649      	mov	r1, r9
 8003ff6:	4638      	mov	r0, r7
 8003ff8:	47c0      	blx	r8
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	d0e6      	beq.n	8003fcc <_printf_common+0xa4>
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7d9      	b.n	8003fb6 <_printf_common+0x8e>
	...

08004004 <_printf_i>:
 8004004:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004008:	7e0f      	ldrb	r7, [r1, #24]
 800400a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800400c:	2f78      	cmp	r7, #120	; 0x78
 800400e:	4691      	mov	r9, r2
 8004010:	4680      	mov	r8, r0
 8004012:	460c      	mov	r4, r1
 8004014:	469a      	mov	sl, r3
 8004016:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800401a:	d807      	bhi.n	800402c <_printf_i+0x28>
 800401c:	2f62      	cmp	r7, #98	; 0x62
 800401e:	d80a      	bhi.n	8004036 <_printf_i+0x32>
 8004020:	2f00      	cmp	r7, #0
 8004022:	f000 80d4 	beq.w	80041ce <_printf_i+0x1ca>
 8004026:	2f58      	cmp	r7, #88	; 0x58
 8004028:	f000 80c0 	beq.w	80041ac <_printf_i+0x1a8>
 800402c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004030:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004034:	e03a      	b.n	80040ac <_printf_i+0xa8>
 8004036:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800403a:	2b15      	cmp	r3, #21
 800403c:	d8f6      	bhi.n	800402c <_printf_i+0x28>
 800403e:	a101      	add	r1, pc, #4	; (adr r1, 8004044 <_printf_i+0x40>)
 8004040:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004044:	0800409d 	.word	0x0800409d
 8004048:	080040b1 	.word	0x080040b1
 800404c:	0800402d 	.word	0x0800402d
 8004050:	0800402d 	.word	0x0800402d
 8004054:	0800402d 	.word	0x0800402d
 8004058:	0800402d 	.word	0x0800402d
 800405c:	080040b1 	.word	0x080040b1
 8004060:	0800402d 	.word	0x0800402d
 8004064:	0800402d 	.word	0x0800402d
 8004068:	0800402d 	.word	0x0800402d
 800406c:	0800402d 	.word	0x0800402d
 8004070:	080041b5 	.word	0x080041b5
 8004074:	080040dd 	.word	0x080040dd
 8004078:	0800416f 	.word	0x0800416f
 800407c:	0800402d 	.word	0x0800402d
 8004080:	0800402d 	.word	0x0800402d
 8004084:	080041d7 	.word	0x080041d7
 8004088:	0800402d 	.word	0x0800402d
 800408c:	080040dd 	.word	0x080040dd
 8004090:	0800402d 	.word	0x0800402d
 8004094:	0800402d 	.word	0x0800402d
 8004098:	08004177 	.word	0x08004177
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	602a      	str	r2, [r5, #0]
 80040a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040ac:	2301      	movs	r3, #1
 80040ae:	e09f      	b.n	80041f0 <_printf_i+0x1ec>
 80040b0:	6820      	ldr	r0, [r4, #0]
 80040b2:	682b      	ldr	r3, [r5, #0]
 80040b4:	0607      	lsls	r7, r0, #24
 80040b6:	f103 0104 	add.w	r1, r3, #4
 80040ba:	6029      	str	r1, [r5, #0]
 80040bc:	d501      	bpl.n	80040c2 <_printf_i+0xbe>
 80040be:	681e      	ldr	r6, [r3, #0]
 80040c0:	e003      	b.n	80040ca <_printf_i+0xc6>
 80040c2:	0646      	lsls	r6, r0, #25
 80040c4:	d5fb      	bpl.n	80040be <_printf_i+0xba>
 80040c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80040ca:	2e00      	cmp	r6, #0
 80040cc:	da03      	bge.n	80040d6 <_printf_i+0xd2>
 80040ce:	232d      	movs	r3, #45	; 0x2d
 80040d0:	4276      	negs	r6, r6
 80040d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d6:	485a      	ldr	r0, [pc, #360]	; (8004240 <_printf_i+0x23c>)
 80040d8:	230a      	movs	r3, #10
 80040da:	e012      	b.n	8004102 <_printf_i+0xfe>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	6820      	ldr	r0, [r4, #0]
 80040e0:	1d19      	adds	r1, r3, #4
 80040e2:	6029      	str	r1, [r5, #0]
 80040e4:	0605      	lsls	r5, r0, #24
 80040e6:	d501      	bpl.n	80040ec <_printf_i+0xe8>
 80040e8:	681e      	ldr	r6, [r3, #0]
 80040ea:	e002      	b.n	80040f2 <_printf_i+0xee>
 80040ec:	0641      	lsls	r1, r0, #25
 80040ee:	d5fb      	bpl.n	80040e8 <_printf_i+0xe4>
 80040f0:	881e      	ldrh	r6, [r3, #0]
 80040f2:	4853      	ldr	r0, [pc, #332]	; (8004240 <_printf_i+0x23c>)
 80040f4:	2f6f      	cmp	r7, #111	; 0x6f
 80040f6:	bf0c      	ite	eq
 80040f8:	2308      	moveq	r3, #8
 80040fa:	230a      	movne	r3, #10
 80040fc:	2100      	movs	r1, #0
 80040fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004102:	6865      	ldr	r5, [r4, #4]
 8004104:	60a5      	str	r5, [r4, #8]
 8004106:	2d00      	cmp	r5, #0
 8004108:	bfa2      	ittt	ge
 800410a:	6821      	ldrge	r1, [r4, #0]
 800410c:	f021 0104 	bicge.w	r1, r1, #4
 8004110:	6021      	strge	r1, [r4, #0]
 8004112:	b90e      	cbnz	r6, 8004118 <_printf_i+0x114>
 8004114:	2d00      	cmp	r5, #0
 8004116:	d04b      	beq.n	80041b0 <_printf_i+0x1ac>
 8004118:	4615      	mov	r5, r2
 800411a:	fbb6 f1f3 	udiv	r1, r6, r3
 800411e:	fb03 6711 	mls	r7, r3, r1, r6
 8004122:	5dc7      	ldrb	r7, [r0, r7]
 8004124:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004128:	4637      	mov	r7, r6
 800412a:	42bb      	cmp	r3, r7
 800412c:	460e      	mov	r6, r1
 800412e:	d9f4      	bls.n	800411a <_printf_i+0x116>
 8004130:	2b08      	cmp	r3, #8
 8004132:	d10b      	bne.n	800414c <_printf_i+0x148>
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	07de      	lsls	r6, r3, #31
 8004138:	d508      	bpl.n	800414c <_printf_i+0x148>
 800413a:	6923      	ldr	r3, [r4, #16]
 800413c:	6861      	ldr	r1, [r4, #4]
 800413e:	4299      	cmp	r1, r3
 8004140:	bfde      	ittt	le
 8004142:	2330      	movle	r3, #48	; 0x30
 8004144:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004148:	f105 35ff 	addle.w	r5, r5, #4294967295
 800414c:	1b52      	subs	r2, r2, r5
 800414e:	6122      	str	r2, [r4, #16]
 8004150:	f8cd a000 	str.w	sl, [sp]
 8004154:	464b      	mov	r3, r9
 8004156:	aa03      	add	r2, sp, #12
 8004158:	4621      	mov	r1, r4
 800415a:	4640      	mov	r0, r8
 800415c:	f7ff fee4 	bl	8003f28 <_printf_common>
 8004160:	3001      	adds	r0, #1
 8004162:	d14a      	bne.n	80041fa <_printf_i+0x1f6>
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	b004      	add	sp, #16
 800416a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	f043 0320 	orr.w	r3, r3, #32
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	4833      	ldr	r0, [pc, #204]	; (8004244 <_printf_i+0x240>)
 8004178:	2778      	movs	r7, #120	; 0x78
 800417a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	6829      	ldr	r1, [r5, #0]
 8004182:	061f      	lsls	r7, r3, #24
 8004184:	f851 6b04 	ldr.w	r6, [r1], #4
 8004188:	d402      	bmi.n	8004190 <_printf_i+0x18c>
 800418a:	065f      	lsls	r7, r3, #25
 800418c:	bf48      	it	mi
 800418e:	b2b6      	uxthmi	r6, r6
 8004190:	07df      	lsls	r7, r3, #31
 8004192:	bf48      	it	mi
 8004194:	f043 0320 	orrmi.w	r3, r3, #32
 8004198:	6029      	str	r1, [r5, #0]
 800419a:	bf48      	it	mi
 800419c:	6023      	strmi	r3, [r4, #0]
 800419e:	b91e      	cbnz	r6, 80041a8 <_printf_i+0x1a4>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	f023 0320 	bic.w	r3, r3, #32
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	2310      	movs	r3, #16
 80041aa:	e7a7      	b.n	80040fc <_printf_i+0xf8>
 80041ac:	4824      	ldr	r0, [pc, #144]	; (8004240 <_printf_i+0x23c>)
 80041ae:	e7e4      	b.n	800417a <_printf_i+0x176>
 80041b0:	4615      	mov	r5, r2
 80041b2:	e7bd      	b.n	8004130 <_printf_i+0x12c>
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	6826      	ldr	r6, [r4, #0]
 80041b8:	6961      	ldr	r1, [r4, #20]
 80041ba:	1d18      	adds	r0, r3, #4
 80041bc:	6028      	str	r0, [r5, #0]
 80041be:	0635      	lsls	r5, r6, #24
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	d501      	bpl.n	80041c8 <_printf_i+0x1c4>
 80041c4:	6019      	str	r1, [r3, #0]
 80041c6:	e002      	b.n	80041ce <_printf_i+0x1ca>
 80041c8:	0670      	lsls	r0, r6, #25
 80041ca:	d5fb      	bpl.n	80041c4 <_printf_i+0x1c0>
 80041cc:	8019      	strh	r1, [r3, #0]
 80041ce:	2300      	movs	r3, #0
 80041d0:	6123      	str	r3, [r4, #16]
 80041d2:	4615      	mov	r5, r2
 80041d4:	e7bc      	b.n	8004150 <_printf_i+0x14c>
 80041d6:	682b      	ldr	r3, [r5, #0]
 80041d8:	1d1a      	adds	r2, r3, #4
 80041da:	602a      	str	r2, [r5, #0]
 80041dc:	681d      	ldr	r5, [r3, #0]
 80041de:	6862      	ldr	r2, [r4, #4]
 80041e0:	2100      	movs	r1, #0
 80041e2:	4628      	mov	r0, r5
 80041e4:	f7fc f834 	bl	8000250 <memchr>
 80041e8:	b108      	cbz	r0, 80041ee <_printf_i+0x1ea>
 80041ea:	1b40      	subs	r0, r0, r5
 80041ec:	6060      	str	r0, [r4, #4]
 80041ee:	6863      	ldr	r3, [r4, #4]
 80041f0:	6123      	str	r3, [r4, #16]
 80041f2:	2300      	movs	r3, #0
 80041f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f8:	e7aa      	b.n	8004150 <_printf_i+0x14c>
 80041fa:	6923      	ldr	r3, [r4, #16]
 80041fc:	462a      	mov	r2, r5
 80041fe:	4649      	mov	r1, r9
 8004200:	4640      	mov	r0, r8
 8004202:	47d0      	blx	sl
 8004204:	3001      	adds	r0, #1
 8004206:	d0ad      	beq.n	8004164 <_printf_i+0x160>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	079b      	lsls	r3, r3, #30
 800420c:	d413      	bmi.n	8004236 <_printf_i+0x232>
 800420e:	68e0      	ldr	r0, [r4, #12]
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	4298      	cmp	r0, r3
 8004214:	bfb8      	it	lt
 8004216:	4618      	movlt	r0, r3
 8004218:	e7a6      	b.n	8004168 <_printf_i+0x164>
 800421a:	2301      	movs	r3, #1
 800421c:	4632      	mov	r2, r6
 800421e:	4649      	mov	r1, r9
 8004220:	4640      	mov	r0, r8
 8004222:	47d0      	blx	sl
 8004224:	3001      	adds	r0, #1
 8004226:	d09d      	beq.n	8004164 <_printf_i+0x160>
 8004228:	3501      	adds	r5, #1
 800422a:	68e3      	ldr	r3, [r4, #12]
 800422c:	9903      	ldr	r1, [sp, #12]
 800422e:	1a5b      	subs	r3, r3, r1
 8004230:	42ab      	cmp	r3, r5
 8004232:	dcf2      	bgt.n	800421a <_printf_i+0x216>
 8004234:	e7eb      	b.n	800420e <_printf_i+0x20a>
 8004236:	2500      	movs	r5, #0
 8004238:	f104 0619 	add.w	r6, r4, #25
 800423c:	e7f5      	b.n	800422a <_printf_i+0x226>
 800423e:	bf00      	nop
 8004240:	08004399 	.word	0x08004399
 8004244:	080043aa 	.word	0x080043aa

08004248 <memmove>:
 8004248:	4288      	cmp	r0, r1
 800424a:	b510      	push	{r4, lr}
 800424c:	eb01 0402 	add.w	r4, r1, r2
 8004250:	d902      	bls.n	8004258 <memmove+0x10>
 8004252:	4284      	cmp	r4, r0
 8004254:	4623      	mov	r3, r4
 8004256:	d807      	bhi.n	8004268 <memmove+0x20>
 8004258:	1e43      	subs	r3, r0, #1
 800425a:	42a1      	cmp	r1, r4
 800425c:	d008      	beq.n	8004270 <memmove+0x28>
 800425e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004266:	e7f8      	b.n	800425a <memmove+0x12>
 8004268:	4402      	add	r2, r0
 800426a:	4601      	mov	r1, r0
 800426c:	428a      	cmp	r2, r1
 800426e:	d100      	bne.n	8004272 <memmove+0x2a>
 8004270:	bd10      	pop	{r4, pc}
 8004272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800427a:	e7f7      	b.n	800426c <memmove+0x24>

0800427c <_sbrk_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4d06      	ldr	r5, [pc, #24]	; (8004298 <_sbrk_r+0x1c>)
 8004280:	2300      	movs	r3, #0
 8004282:	4604      	mov	r4, r0
 8004284:	4608      	mov	r0, r1
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	f7fc fcf4 	bl	8000c74 <_sbrk>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d102      	bne.n	8004296 <_sbrk_r+0x1a>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	b103      	cbz	r3, 8004296 <_sbrk_r+0x1a>
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	bd38      	pop	{r3, r4, r5, pc}
 8004298:	20000330 	.word	0x20000330

0800429c <memcpy>:
 800429c:	440a      	add	r2, r1
 800429e:	4291      	cmp	r1, r2
 80042a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80042a4:	d100      	bne.n	80042a8 <memcpy+0xc>
 80042a6:	4770      	bx	lr
 80042a8:	b510      	push	{r4, lr}
 80042aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042b2:	4291      	cmp	r1, r2
 80042b4:	d1f9      	bne.n	80042aa <memcpy+0xe>
 80042b6:	bd10      	pop	{r4, pc}

080042b8 <_realloc_r>:
 80042b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042bc:	4680      	mov	r8, r0
 80042be:	4614      	mov	r4, r2
 80042c0:	460e      	mov	r6, r1
 80042c2:	b921      	cbnz	r1, 80042ce <_realloc_r+0x16>
 80042c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042c8:	4611      	mov	r1, r2
 80042ca:	f7ff bc49 	b.w	8003b60 <_malloc_r>
 80042ce:	b92a      	cbnz	r2, 80042dc <_realloc_r+0x24>
 80042d0:	f7ff fbda 	bl	8003a88 <_free_r>
 80042d4:	4625      	mov	r5, r4
 80042d6:	4628      	mov	r0, r5
 80042d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042dc:	f000 f81b 	bl	8004316 <_malloc_usable_size_r>
 80042e0:	4284      	cmp	r4, r0
 80042e2:	4607      	mov	r7, r0
 80042e4:	d802      	bhi.n	80042ec <_realloc_r+0x34>
 80042e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042ea:	d812      	bhi.n	8004312 <_realloc_r+0x5a>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4640      	mov	r0, r8
 80042f0:	f7ff fc36 	bl	8003b60 <_malloc_r>
 80042f4:	4605      	mov	r5, r0
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d0ed      	beq.n	80042d6 <_realloc_r+0x1e>
 80042fa:	42bc      	cmp	r4, r7
 80042fc:	4622      	mov	r2, r4
 80042fe:	4631      	mov	r1, r6
 8004300:	bf28      	it	cs
 8004302:	463a      	movcs	r2, r7
 8004304:	f7ff ffca 	bl	800429c <memcpy>
 8004308:	4631      	mov	r1, r6
 800430a:	4640      	mov	r0, r8
 800430c:	f7ff fbbc 	bl	8003a88 <_free_r>
 8004310:	e7e1      	b.n	80042d6 <_realloc_r+0x1e>
 8004312:	4635      	mov	r5, r6
 8004314:	e7df      	b.n	80042d6 <_realloc_r+0x1e>

08004316 <_malloc_usable_size_r>:
 8004316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431a:	1f18      	subs	r0, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	bfbc      	itt	lt
 8004320:	580b      	ldrlt	r3, [r1, r0]
 8004322:	18c0      	addlt	r0, r0, r3
 8004324:	4770      	bx	lr
	...

08004328 <_init>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr

08004334 <_fini>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	bf00      	nop
 8004338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433a:	bc08      	pop	{r3}
 800433c:	469e      	mov	lr, r3
 800433e:	4770      	bx	lr
