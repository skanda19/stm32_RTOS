
uart_delta_encoding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08007d4c  08007d4c  00017d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007eb0  08007eb0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007eb0  08007eb0  00017eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007eb8  08007eb8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007eb8  08007eb8  00017eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ebc  08007ebc  00017ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  20000060  08007f20  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bc4  08007f20  00024bc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d25  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ddc  00000000  00000000  00033df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00036bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7f  00000000  00000000  00037ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000377d  00000000  00000000  0003863f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f4b  00000000  00000000  0003bdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb354  00000000  00000000  0004ed07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041e4  00000000  00000000  0014a05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0014e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d34 	.word	0x08007d34

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08007d34 	.word	0x08007d34

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <HAL_UART_RxCpltCallback>:
/**
 * @brief Callback de recepción UART completa (ISR)
 * REQUISITO: Solo copia datos y libera semáforo, NO hace delta encoding
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <HAL_UART_RxCpltCallback+0x34>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d10c      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x2c>
	{
		// Marcar que hay datos listos
		data_ready = 1;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_UART_RxCpltCallback+0x38>)
 8000600:	2201      	movs	r2, #1
 8000602:	701a      	strb	r2, [r3, #0]

		// REQUISITO: Liberar semáforo binario para señalar tarea de procesamiento
		osSemaphoreRelease(binary_semaphore_01Handle);
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_UART_RxCpltCallback+0x3c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fdbd 	bl	8004188 <osSemaphoreRelease>

		// REQUISITO: Configurar UART para recibir próximos 8 bytes
		HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 8);
 800060e:	2208      	movs	r2, #8
 8000610:	4906      	ldr	r1, [pc, #24]	; (800062c <HAL_UART_RxCpltCallback+0x40>)
 8000612:	4807      	ldr	r0, [pc, #28]	; (8000630 <HAL_UART_RxCpltCallback+0x44>)
 8000614:	f002 f903 	bl	800281e <HAL_UART_Receive_IT>
	}
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40004800 	.word	0x40004800
 8000624:	20000128 	.word	0x20000128
 8000628:	2000010c 	.word	0x2000010c
 800062c:	20000110 	.word	0x20000110
 8000630:	2000007c 	.word	0x2000007c

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fb7d 	bl	8000d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f83a 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f8c4 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000644:	f000 f892 	bl	800076c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // REQUISITO: Iniciar recepción UART de 8 bytes
  HAL_UART_Receive_IT(&huart3, (uint8_t*)rx_buffer, 8);
 8000648:	2208      	movs	r2, #8
 800064a:	4910      	ldr	r1, [pc, #64]	; (800068c <main+0x58>)
 800064c:	4810      	ldr	r0, [pc, #64]	; (8000690 <main+0x5c>)
 800064e:	f002 f8e6 	bl	800281e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000652:	f003 fb87 	bl	8003d64 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binary_semaphore_01 */
  binary_semaphore_01Handle = osSemaphoreNew(1, 0, &binary_semaphore_01_attributes);
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <main+0x60>)
 8000658:	2100      	movs	r1, #0
 800065a:	2001      	movs	r0, #1
 800065c:	f003 fc92 	bl	8003f84 <osSemaphoreNew>
 8000660:	4603      	mov	r3, r0
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <main+0x64>)
 8000664:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <main+0x68>)
 8000668:	2100      	movs	r1, #0
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <main+0x6c>)
 800066c:	f003 fbe4 	bl	8003e38 <osThreadNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <main+0x70>)
 8000674:	6013      	str	r3, [r2, #0]

  /* creation of data_handler_Ta */
  data_handler_TaHandle = osThreadNew(data_handler_task, NULL, &data_handler_Ta_attributes);
 8000676:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <main+0x74>)
 8000678:	2100      	movs	r1, #0
 800067a:	480c      	ldr	r0, [pc, #48]	; (80006ac <main+0x78>)
 800067c:	f003 fbdc 	bl	8003e38 <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <main+0x7c>)
 8000684:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000686:	f003 fba1 	bl	8003dcc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068a:	e7fe      	b.n	800068a <main+0x56>
 800068c:	20000110 	.word	0x20000110
 8000690:	2000007c 	.word	0x2000007c
 8000694:	08007e54 	.word	0x08007e54
 8000698:	2000010c 	.word	0x2000010c
 800069c:	08007e0c 	.word	0x08007e0c
 80006a0:	08000849 	.word	0x08000849
 80006a4:	20000104 	.word	0x20000104
 80006a8:	08007e30 	.word	0x08007e30
 80006ac:	08000881 	.word	0x08000881
 80006b0:	20000108 	.word	0x20000108

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 feb2 	bl	800742c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xb0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xb0>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xb0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <SystemClock_Config+0xb4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <SystemClock_Config+0xb4>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <SystemClock_Config+0xb4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fee9 	bl	80014f8 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800072c:	f000 f9ce 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f001 f982 	bl	8001a54 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000756:	f000 f9b9 	bl	8000acc <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	; 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART3_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART3_UART_Init+0x58>)
 80007b0:	f001 ff5e 	bl	8002670 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f987 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000007c 	.word	0x2000007c
 80007c8:	40004800 	.word	0x40004800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_GPIO_Init+0x74>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_GPIO_Init+0x74>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_GPIO_Init+0x74>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_GPIO_Init+0x74>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <MX_GPIO_Init+0x74>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_GPIO_Init+0x74>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_GPIO_Init+0x78>)
 8000818:	f000 fe3a 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : blue_led_Pin */
  GPIO_InitStruct.Pin = LED_blue_Pin;
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_blue_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0x78>)
 8000834:	f000 fc80 	bl	8001138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020400 	.word	0x40020400

08000848 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t tick_2s = pdMS_TO_TICKS(2000);
 8000850:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000854:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LED_blue_GPIO_Port,LED_blue_Pin);
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <StartDefaultTask+0x2c>)
 800085a:	f000 fe32 	bl	80014c2 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart3, (uint8_t*)"not taken\r\n", sizeof("not taken\r\n")-1, 2000);
 800085e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000862:	220b      	movs	r2, #11
 8000864:	4904      	ldr	r1, [pc, #16]	; (8000878 <StartDefaultTask+0x30>)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <StartDefaultTask+0x34>)
 8000868:	f001 ff50 	bl	800270c <HAL_UART_Transmit>
    vTaskDelay(tick_2s);
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f004 ffcb 	bl	8005808 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_blue_GPIO_Port,LED_blue_Pin);
 8000872:	e7f0      	b.n	8000856 <StartDefaultTask+0xe>
 8000874:	40020400 	.word	0x40020400
 8000878:	08007d7c 	.word	0x08007d7c
 800087c:	2000007c 	.word	0x2000007c

08000880 <data_handler_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_data_handler_task */
void data_handler_task(void *argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0a2      	sub	sp, #136	; 0x88
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	char debug_msg[100];      // Buffer para mensajes de debug
  /* Infinite loop */
  for(;;)
  {
    // REQUISITO: Usar osSemaphoreAcquire con espera indefinida (sin busy waits)
	osStatus_t status = osSemaphoreAcquire(binary_semaphore_01Handle, osWaitForever);
 8000888:	4b80      	ldr	r3, [pc, #512]	; (8000a8c <data_handler_task+0x20c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fc13 	bl	80040bc <osSemaphoreAcquire>
 8000896:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80

	if (status == osOK && data_ready) {
 800089a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f2      	bne.n	8000888 <data_handler_task+0x8>
 80008a2:	4b7b      	ldr	r3, [pc, #492]	; (8000a90 <data_handler_task+0x210>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d0ed      	beq.n	8000888 <data_handler_task+0x8>
        data_ready = 0;  // Limpiar flag
 80008ac:	4b78      	ldr	r3, [pc, #480]	; (8000a90 <data_handler_task+0x210>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]

        HAL_UART_Transmit(&huart3, (uint8_t*)"Sem: Taken\r\n", sizeof("Sem: Taken\r\n")-1, 1000);
 80008b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b6:	220c      	movs	r2, #12
 80008b8:	4976      	ldr	r1, [pc, #472]	; (8000a94 <data_handler_task+0x214>)
 80008ba:	4877      	ldr	r0, [pc, #476]	; (8000a98 <data_handler_task+0x218>)
 80008bc:	f001 ff26 	bl	800270c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t*)"Delta Encoding\r\n", sizeof("Delta Encoding\r\n")-1, 1000);
 80008c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c4:	2210      	movs	r2, #16
 80008c6:	4975      	ldr	r1, [pc, #468]	; (8000a9c <data_handler_task+0x21c>)
 80008c8:	4873      	ldr	r0, [pc, #460]	; (8000a98 <data_handler_task+0x218>)
 80008ca:	f001 ff1f 	bl	800270c <HAL_UART_Transmit>

        for (i = 0; i < 8; i++) {
 80008ce:	2300      	movs	r3, #0
 80008d0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80008d4:	e00f      	b.n	80008f6 <data_handler_task+0x76>
            local_buffer[i] = rx_buffer[i];
 80008d6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80008da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80008de:	4970      	ldr	r1, [pc, #448]	; (8000aa0 <data_handler_task+0x220>)
 80008e0:	5c8a      	ldrb	r2, [r1, r2]
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	3388      	adds	r3, #136	; 0x88
 80008e6:	443b      	add	r3, r7
 80008e8:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (i = 0; i < 8; i++) {
 80008ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80008f0:	3301      	adds	r3, #1
 80008f2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80008f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80008fa:	2b07      	cmp	r3, #7
 80008fc:	d9eb      	bls.n	80008d6 <data_handler_task+0x56>
        }

        // Mostrar datos recibidos para debug
        HAL_UART_Transmit(&huart3, (uint8_t*)"Recibido: ", 10, 1000);
 80008fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000902:	220a      	movs	r2, #10
 8000904:	4967      	ldr	r1, [pc, #412]	; (8000aa4 <data_handler_task+0x224>)
 8000906:	4864      	ldr	r0, [pc, #400]	; (8000a98 <data_handler_task+0x218>)
 8000908:	f001 ff00 	bl	800270c <HAL_UART_Transmit>
        for (i = 0; i < 8; i++) {
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000912:	e019      	b.n	8000948 <data_handler_task+0xc8>
            sprintf(debug_msg, "%c", local_buffer[i]);
 8000914:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000918:	3388      	adds	r3, #136	; 0x88
 800091a:	443b      	add	r3, r7
 800091c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000920:	461a      	mov	r2, r3
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4960      	ldr	r1, [pc, #384]	; (8000aa8 <data_handler_task+0x228>)
 8000928:	4618      	mov	r0, r3
 800092a:	f006 fd5f 	bl	80073ec <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)debug_msg, 1, 1000);
 800092e:	f107 010c 	add.w	r1, r7, #12
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	2201      	movs	r2, #1
 8000938:	4857      	ldr	r0, [pc, #348]	; (8000a98 <data_handler_task+0x218>)
 800093a:	f001 fee7 	bl	800270c <HAL_UART_Transmit>
        for (i = 0; i < 8; i++) {
 800093e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000942:	3301      	adds	r3, #1
 8000944:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000948:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800094c:	2b07      	cmp	r3, #7
 800094e:	d9e1      	bls.n	8000914 <data_handler_task+0x94>
        }
        HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 1000);
 8000950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000954:	2202      	movs	r2, #2
 8000956:	4955      	ldr	r1, [pc, #340]	; (8000aac <data_handler_task+0x22c>)
 8000958:	484f      	ldr	r0, [pc, #316]	; (8000a98 <data_handler_task+0x218>)
 800095a:	f001 fed7 	bl	800270c <HAL_UART_Transmit>

        // REQUISITO: Delta encoding DEBE aplicarse en tarea diferida, NO en ISR
        // Primer byte se envía como está
        delta_values[0] = (int8_t)local_buffer[0];
 800095e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000962:	b25b      	sxtb	r3, r3
 8000964:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

        // Bytes subsecuentes son diferencias del anterior
        for (i = 1; i < 8; i++) {
 8000968:	2301      	movs	r3, #1
 800096a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800096e:	e01a      	b.n	80009a6 <data_handler_task+0x126>
            delta_values[i] = (int8_t)((int16_t)local_buffer[i] - (int16_t)local_buffer[i-1]);
 8000970:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000974:	3388      	adds	r3, #136	; 0x88
 8000976:	443b      	add	r3, r7
 8000978:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800097c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000980:	3b01      	subs	r3, #1
 8000982:	3388      	adds	r3, #136	; 0x88
 8000984:	443b      	add	r3, r7
 8000986:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	b2da      	uxtb	r2, r3
 800098e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000992:	b252      	sxtb	r2, r2
 8000994:	3388      	adds	r3, #136	; 0x88
 8000996:	443b      	add	r3, r7
 8000998:	f803 2c18 	strb.w	r2, [r3, #-24]
        for (i = 1; i < 8; i++) {
 800099c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80009a0:	3301      	adds	r3, #1
 80009a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80009a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80009aa:	2b07      	cmp	r3, #7
 80009ac:	d9e0      	bls.n	8000970 <data_handler_task+0xf0>
        }

        // Mostrar delta encoding para debug
        HAL_UART_Transmit(&huart3, (uint8_t*)"Delta: [", 8, 1000);
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	2208      	movs	r2, #8
 80009b4:	493e      	ldr	r1, [pc, #248]	; (8000ab0 <data_handler_task+0x230>)
 80009b6:	4838      	ldr	r0, [pc, #224]	; (8000a98 <data_handler_task+0x218>)
 80009b8:	f001 fea8 	bl	800270c <HAL_UART_Transmit>
        for (i = 0; i < 8; i++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80009c2:	e02a      	b.n	8000a1a <data_handler_task+0x19a>
            sprintf(debug_msg, "%d", (int)delta_values[i]);
 80009c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80009c8:	3388      	adds	r3, #136	; 0x88
 80009ca:	443b      	add	r3, r7
 80009cc:	f913 3c18 	ldrsb.w	r3, [r3, #-24]
 80009d0:	461a      	mov	r2, r3
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4937      	ldr	r1, [pc, #220]	; (8000ab4 <data_handler_task+0x234>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f006 fd07 	bl	80073ec <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t*)debug_msg, strlen(debug_msg), 1000);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fc2c 	bl	8000240 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f107 010c 	add.w	r1, r7, #12
 80009f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f4:	4828      	ldr	r0, [pc, #160]	; (8000a98 <data_handler_task+0x218>)
 80009f6:	f001 fe89 	bl	800270c <HAL_UART_Transmit>
            if (i < 7) {
 80009fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d806      	bhi.n	8000a10 <data_handler_task+0x190>
                HAL_UART_Transmit(&huart3, (uint8_t*)", ", 2, 1000);
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	2202      	movs	r2, #2
 8000a08:	492b      	ldr	r1, [pc, #172]	; (8000ab8 <data_handler_task+0x238>)
 8000a0a:	4823      	ldr	r0, [pc, #140]	; (8000a98 <data_handler_task+0x218>)
 8000a0c:	f001 fe7e 	bl	800270c <HAL_UART_Transmit>
        for (i = 0; i < 8; i++) {
 8000a10:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a14:	3301      	adds	r3, #1
 8000a16:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000a1a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	d9d0      	bls.n	80009c4 <data_handler_task+0x144>
            }
        }
        HAL_UART_Transmit(&huart3, (uint8_t*)"]\r\n", 3, 1000);
 8000a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a26:	2203      	movs	r2, #3
 8000a28:	4924      	ldr	r1, [pc, #144]	; (8000abc <data_handler_task+0x23c>)
 8000a2a:	481b      	ldr	r0, [pc, #108]	; (8000a98 <data_handler_task+0x218>)
 8000a2c:	f001 fe6e 	bl	800270c <HAL_UART_Transmit>

        // REQUISITO: Transmisión UART desde tarea diferida, no desde ISR
        // Convertir valores con signo a formato transmisible
        for (i = 0; i < 8; i++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000a36:	e00f      	b.n	8000a58 <data_handler_task+0x1d8>
            tx_buffer[i] = (uint8_t)delta_values[i];
 8000a38:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a3c:	3388      	adds	r3, #136	; 0x88
 8000a3e:	443b      	add	r3, r7
 8000a40:	f913 2c18 	ldrsb.w	r2, [r3, #-24]
 8000a44:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a48:	b2d1      	uxtb	r1, r2
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <data_handler_task+0x240>)
 8000a4c:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < 8; i++) {
 8000a4e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a52:	3301      	adds	r3, #1
 8000a54:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000a58:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d9eb      	bls.n	8000a38 <data_handler_task+0x1b8>
        }

        HAL_UART_Transmit(&huart3, (uint8_t*)"Enviando bytes: ", 16, 1000);
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	2210      	movs	r2, #16
 8000a66:	4917      	ldr	r1, [pc, #92]	; (8000ac4 <data_handler_task+0x244>)
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <data_handler_task+0x218>)
 8000a6a:	f001 fe4f 	bl	800270c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, tx_buffer, 8, 1000);
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	2208      	movs	r2, #8
 8000a74:	4912      	ldr	r1, [pc, #72]	; (8000ac0 <data_handler_task+0x240>)
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <data_handler_task+0x218>)
 8000a78:	f001 fe48 	bl	800270c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n\r\n", 4, 1000);
 8000a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a80:	2204      	movs	r2, #4
 8000a82:	4911      	ldr	r1, [pc, #68]	; (8000ac8 <data_handler_task+0x248>)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <data_handler_task+0x218>)
 8000a86:	f001 fe41 	bl	800270c <HAL_UART_Transmit>
  {
 8000a8a:	e6fd      	b.n	8000888 <data_handler_task+0x8>
 8000a8c:	2000010c 	.word	0x2000010c
 8000a90:	20000128 	.word	0x20000128
 8000a94:	08007d88 	.word	0x08007d88
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	08007d98 	.word	0x08007d98
 8000aa0:	20000110 	.word	0x20000110
 8000aa4:	08007dac 	.word	0x08007dac
 8000aa8:	08007db8 	.word	0x08007db8
 8000aac:	08007dbc 	.word	0x08007dbc
 8000ab0:	08007dc0 	.word	0x08007dc0
 8000ab4:	08007dcc 	.word	0x08007dcc
 8000ab8:	08007dd0 	.word	0x08007dd0
 8000abc:	08007dd4 	.word	0x08007dd4
 8000ac0:	20000118 	.word	0x20000118
 8000ac4:	08007dd8 	.word	0x08007dd8
 8000ac8:	08007dec 	.word	0x08007dec

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	210f      	movs	r1, #15
 8000b12:	f06f 0001 	mvn.w	r0, #1
 8000b16:	f000 fa46 	bl	8000fa6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b0ae      	sub	sp, #184	; 0xb8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2290      	movs	r2, #144	; 0x90
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f006 fc6f 	bl	800742c <memset>
  if(huart->Instance==USART3)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_UART_MspInit+0xc4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d144      	bne.n	8000be2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f95a 	bl	8001e20 <HAL_RCCEx_PeriphCLKConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff ffab 	bl	8000acc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <HAL_UART_MspInit+0xc8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ba6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000baa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <HAL_UART_MspInit+0xcc>)
 8000bce:	f000 fab3 	bl	8001138 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2105      	movs	r1, #5
 8000bd6:	2027      	movs	r0, #39	; 0x27
 8000bd8:	f000 f9e5 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bdc:	2027      	movs	r0, #39	; 0x27
 8000bde:	f000 f9fe 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	37b8      	adds	r7, #184	; 0xb8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004800 	.word	0x40004800
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020c00 	.word	0x40020c00

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f8c2 	bl	8000db0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c2c:	f005 fa80 	bl	8006130 <xTaskGetSchedulerState>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d001      	beq.n	8000c3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c36:	f006 f95f 	bl	8006ef8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <USART3_IRQHandler+0x10>)
 8000c46:	f001 fe2f 	bl	80028a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000007c 	.word	0x2000007c

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f006 fbda 	bl	800743c <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20080000 	.word	0x20080000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	2000012c 	.word	0x2000012c
 8000cbc:	20004bc8 	.word	0x20004bc8

08000cc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	; (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f006 fb99 	bl	8007448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fc8d 	bl	8000634 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d28:	08007ec0 	.word	0x08007ec0
  ldr r2, =_sbss
 8000d2c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d30:	20004bc4 	.word	0x20004bc4

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>

08000d36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 f928 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d40:	200f      	movs	r0, #15
 8000d42:	f000 f805 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d46:	f7ff fec7 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f943 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f90b 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000130 	.word	0x20000130

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000130 	.word	0x20000130

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <__NVIC_SetPriorityGrouping+0x40>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x40>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00
 8000e34:	05fa0000 	.word	0x05fa0000

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff feda 	bl	8000dd8 <HAL_GetTick>
 8001024:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d008      	beq.n	8001044 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e052      	b.n	80010ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0216 	bic.w	r2, r2, #22
 8001052:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001062:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	d103      	bne.n	8001074 <HAL_DMA_Abort+0x62>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0208 	bic.w	r2, r2, #8
 8001082:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001094:	e013      	b.n	80010be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001096:	f7ff fe9f 	bl	8000dd8 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d90c      	bls.n	80010be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e015      	b.n	80010ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e4      	bne.n	8001096 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	223f      	movs	r2, #63	; 0x3f
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d004      	beq.n	8001110 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e00c      	b.n	800112a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2205      	movs	r2, #5
 8001114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0201 	bic.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e175      	b.n	8001444 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8164 	bne.w	800143e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x56>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80be 	beq.w	800143e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <HAL_GPIO_Init+0x324>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	4a65      	ldr	r2, [pc, #404]	; (800145c <HAL_GPIO_Init+0x324>)
 80012c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012cc:	6453      	str	r3, [r2, #68]	; 0x44
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <HAL_GPIO_Init+0x324>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012da:	4a61      	ldr	r2, [pc, #388]	; (8001460 <HAL_GPIO_Init+0x328>)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a58      	ldr	r2, [pc, #352]	; (8001464 <HAL_GPIO_Init+0x32c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d037      	beq.n	8001376 <HAL_GPIO_Init+0x23e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a57      	ldr	r2, [pc, #348]	; (8001468 <HAL_GPIO_Init+0x330>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d031      	beq.n	8001372 <HAL_GPIO_Init+0x23a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a56      	ldr	r2, [pc, #344]	; (800146c <HAL_GPIO_Init+0x334>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d02b      	beq.n	800136e <HAL_GPIO_Init+0x236>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a55      	ldr	r2, [pc, #340]	; (8001470 <HAL_GPIO_Init+0x338>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d025      	beq.n	800136a <HAL_GPIO_Init+0x232>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a54      	ldr	r2, [pc, #336]	; (8001474 <HAL_GPIO_Init+0x33c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d01f      	beq.n	8001366 <HAL_GPIO_Init+0x22e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a53      	ldr	r2, [pc, #332]	; (8001478 <HAL_GPIO_Init+0x340>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d019      	beq.n	8001362 <HAL_GPIO_Init+0x22a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a52      	ldr	r2, [pc, #328]	; (800147c <HAL_GPIO_Init+0x344>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x226>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a51      	ldr	r2, [pc, #324]	; (8001480 <HAL_GPIO_Init+0x348>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d00d      	beq.n	800135a <HAL_GPIO_Init+0x222>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a50      	ldr	r2, [pc, #320]	; (8001484 <HAL_GPIO_Init+0x34c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d007      	beq.n	8001356 <HAL_GPIO_Init+0x21e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <HAL_GPIO_Init+0x350>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d101      	bne.n	8001352 <HAL_GPIO_Init+0x21a>
 800134e:	2309      	movs	r3, #9
 8001350:	e012      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001352:	230a      	movs	r3, #10
 8001354:	e010      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001356:	2308      	movs	r3, #8
 8001358:	e00e      	b.n	8001378 <HAL_GPIO_Init+0x240>
 800135a:	2307      	movs	r3, #7
 800135c:	e00c      	b.n	8001378 <HAL_GPIO_Init+0x240>
 800135e:	2306      	movs	r3, #6
 8001360:	e00a      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001362:	2305      	movs	r3, #5
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001366:	2304      	movs	r3, #4
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x240>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x240>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x240>
 8001376:	2300      	movs	r3, #0
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001388:	4935      	ldr	r1, [pc, #212]	; (8001460 <HAL_GPIO_Init+0x328>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001396:	4b3d      	ldr	r3, [pc, #244]	; (800148c <HAL_GPIO_Init+0x354>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ba:	4a34      	ldr	r2, [pc, #208]	; (800148c <HAL_GPIO_Init+0x354>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c0:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_GPIO_Init+0x354>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e4:	4a29      	ldr	r2, [pc, #164]	; (800148c <HAL_GPIO_Init+0x354>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_GPIO_Init+0x354>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140e:	4a1f      	ldr	r2, [pc, #124]	; (800148c <HAL_GPIO_Init+0x354>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_GPIO_Init+0x354>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <HAL_GPIO_Init+0x354>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f67f ae86 	bls.w	8001158 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40021400 	.word	0x40021400
 800147c:	40021800 	.word	0x40021800
 8001480:	40021c00 	.word	0x40021c00
 8001484:	40022000 	.word	0x40022000
 8001488:	40022400 	.word	0x40022400
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b085      	sub	sp, #20
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014d4:	887a      	ldrh	r2, [r7, #2]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	041a      	lsls	r2, r3, #16
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43d9      	mvns	r1, r3
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	400b      	ands	r3, r1
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	bf00      	nop
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e29b      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8087 	beq.w	800162a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800151c:	4b96      	ldr	r3, [pc, #600]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	d00c      	beq.n	8001542 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001528:	4b93      	ldr	r3, [pc, #588]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d112      	bne.n	800155a <HAL_RCC_OscConfig+0x62>
 8001534:	4b90      	ldr	r3, [pc, #576]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001540:	d10b      	bne.n	800155a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	4b8d      	ldr	r3, [pc, #564]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d06c      	beq.n	8001628 <HAL_RCC_OscConfig+0x130>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d168      	bne.n	8001628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e275      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x7a>
 8001564:	4b84      	ldr	r3, [pc, #528]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a83      	ldr	r2, [pc, #524]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 800156a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e02e      	b.n	80015d0 <HAL_RCC_OscConfig+0xd8>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x9c>
 800157a:	4b7f      	ldr	r3, [pc, #508]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7e      	ldr	r2, [pc, #504]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b7c      	ldr	r3, [pc, #496]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7b      	ldr	r2, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 800158c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01d      	b.n	80015d0 <HAL_RCC_OscConfig+0xd8>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0xc0>
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a75      	ldr	r2, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a72      	ldr	r2, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xd8>
 80015b8:	4b6f      	ldr	r3, [pc, #444]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a6e      	ldr	r2, [pc, #440]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6b      	ldr	r2, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fbfe 	bl	8000dd8 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fbfa 	bl	8000dd8 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e229      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b61      	ldr	r3, [pc, #388]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe8>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fbea 	bl	8000dd8 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fbe6 	bl	8000dd8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e215      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x110>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d069      	beq.n	800170a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001636:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001642:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x190>
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x17a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1e9      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	493d      	ldr	r1, [pc, #244]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e040      	b.n	800170a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d023      	beq.n	80016d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b39      	ldr	r3, [pc, #228]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a38      	ldr	r2, [pc, #224]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7ff fb9c 	bl	8000dd8 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a4:	f7ff fb98 	bl	8000dd8 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1c7      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b6:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4929      	ldr	r1, [pc, #164]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
 80016d6:	e018      	b.n	800170a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d8:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a26      	ldr	r2, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb78 	bl	8000dd8 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fb74 	bl	8000dd8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1a3      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d038      	beq.n	8001788 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d019      	beq.n	8001752 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172a:	f7ff fb55 	bl	8000dd8 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff fb51 	bl	8000dd8 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e180      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x23a>
 8001750:	e01a      	b.n	8001788 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_RCC_OscConfig+0x280>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fb3b 	bl	8000dd8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fb37 	bl	8000dd8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d903      	bls.n	800177c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e166      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
 8001778:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800177e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ee      	bne.n	8001766 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a4 	beq.w	80018de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001796:	4b8c      	ldr	r3, [pc, #560]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10d      	bne.n	80017be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	4b89      	ldr	r3, [pc, #548]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a88      	ldr	r2, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80017a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b86      	ldr	r3, [pc, #536]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ba:	2301      	movs	r3, #1
 80017bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017be:	4b83      	ldr	r3, [pc, #524]	; (80019cc <HAL_RCC_OscConfig+0x4d4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d118      	bne.n	80017fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017ca:	4b80      	ldr	r3, [pc, #512]	; (80019cc <HAL_RCC_OscConfig+0x4d4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7f      	ldr	r2, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x4d4>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d6:	f7ff faff 	bl	8000dd8 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7ff fafb 	bl	8000dd8 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b64      	cmp	r3, #100	; 0x64
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e12a      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f0:	4b76      	ldr	r3, [pc, #472]	; (80019cc <HAL_RCC_OscConfig+0x4d4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <HAL_RCC_OscConfig+0x31a>
 8001804:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001808:	4a6f      	ldr	r2, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	; 0x70
 8001810:	e02d      	b.n	800186e <HAL_RCC_OscConfig+0x376>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x33c>
 800181a:	4b6b      	ldr	r3, [pc, #428]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a6a      	ldr	r2, [pc, #424]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
 8001826:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a67      	ldr	r2, [pc, #412]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	e01c      	b.n	800186e <HAL_RCC_OscConfig+0x376>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d10c      	bne.n	8001856 <HAL_RCC_OscConfig+0x35e>
 800183c:	4b62      	ldr	r3, [pc, #392]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	4a61      	ldr	r2, [pc, #388]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6713      	str	r3, [r2, #112]	; 0x70
 8001848:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6713      	str	r3, [r2, #112]	; 0x70
 8001854:	e00b      	b.n	800186e <HAL_RCC_OscConfig+0x376>
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a5b      	ldr	r2, [pc, #364]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
 8001862:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a58      	ldr	r2, [pc, #352]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d015      	beq.n	80018a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff faaf 	bl	8000dd8 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff faab 	bl	8000dd8 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0d8      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0ee      	beq.n	800187e <HAL_RCC_OscConfig+0x386>
 80018a0:	e014      	b.n	80018cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa99 	bl	8000dd8 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	e00a      	b.n	80018c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018aa:	f7ff fa95 	bl	8000dd8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0c2      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ee      	bne.n	80018aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d105      	bne.n	80018de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a3c      	ldr	r2, [pc, #240]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80018d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80ae 	beq.w	8001a44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e8:	4b37      	ldr	r3, [pc, #220]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d06d      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d14b      	bne.n	8001994 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff fa66 	bl	8000dd8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff fa62 	bl	8000dd8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e091      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	3b01      	subs	r3, #1
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	071b      	lsls	r3, r3, #28
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a18      	ldr	r2, [pc, #96]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fa34 	bl	8000dd8 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff fa30 	bl	8000dd8 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e05f      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x47c>
 8001992:	e057      	b.n	8001a44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 800199a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800199e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff fa1a 	bl	8000dd8 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff fa16 	bl	8000dd8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e045      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ba:	4b03      	ldr	r3, [pc, #12]	; (80019c8 <HAL_RCC_OscConfig+0x4d0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4b0>
 80019c6:	e03d      	b.n	8001a44 <HAL_RCC_OscConfig+0x54c>
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019d0:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_RCC_OscConfig+0x558>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d030      	beq.n	8001a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d129      	bne.n	8001a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d122      	bne.n	8001a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d119      	bne.n	8001a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	085b      	lsrs	r3, r3, #1
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d10f      	bne.n	8001a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0d0      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d910      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 020f 	bic.w	r2, r3, #15
 8001a82:	4965      	ldr	r1, [pc, #404]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d040      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d115      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e073      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e06b      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	4936      	ldr	r1, [pc, #216]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f946 	bl	8000dd8 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b50:	f7ff f942 	bl	8000dd8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e053      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 020c 	and.w	r2, r3, #12
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1eb      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d210      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 020f 	bic.w	r2, r3, #15
 8001b8e:	4922      	ldr	r1, [pc, #136]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f821 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_ClockConfig+0x1c8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	; (8001c20 <HAL_RCC_ClockConfig+0x1cc>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_RCC_ClockConfig+0x1d0>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_ClockConfig+0x1d4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f8a2 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08007e64 	.word	0x08007e64
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c30:	b090      	sub	sp, #64	; 0x40
 8001c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
 8001c38:	2300      	movs	r3, #0
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d00d      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x40>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	f200 80a1 	bhi.w	8001d98 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5e:	e09b      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c64:	e09b      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c66:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c6a:	e098      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c76:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d028      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	2200      	movs	r2, #0
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c94:	2100      	movs	r1, #0
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c98:	fb03 f201 	mul.w	r2, r3, r1
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a43      	ldr	r2, [pc, #268]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca6:	fba0 1202 	umull	r1, r2, r0, r2
 8001caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cac:	460a      	mov	r2, r1
 8001cae:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cb2:	4413      	add	r3, r2
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	61fa      	str	r2, [r7, #28]
 8001cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cc6:	f7fe fb13 	bl	80002f0 <__aeabi_uldivmod>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4613      	mov	r3, r2
 8001cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cd2:	e053      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	2200      	movs	r2, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	617a      	str	r2, [r7, #20]
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ce6:	f04f 0b00 	mov.w	fp, #0
 8001cea:	4652      	mov	r2, sl
 8001cec:	465b      	mov	r3, fp
 8001cee:	f04f 0000 	mov.w	r0, #0
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	0159      	lsls	r1, r3, #5
 8001cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cfc:	0150      	lsls	r0, r2, #5
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	ebb2 080a 	subs.w	r8, r2, sl
 8001d06:	eb63 090b 	sbc.w	r9, r3, fp
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d1e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d22:	eb63 0509 	sbc.w	r5, r3, r9
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	00eb      	lsls	r3, r5, #3
 8001d30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d34:	00e2      	lsls	r2, r4, #3
 8001d36:	4614      	mov	r4, r2
 8001d38:	461d      	mov	r5, r3
 8001d3a:	eb14 030a 	adds.w	r3, r4, sl
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	eb45 030b 	adc.w	r3, r5, fp
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d52:	4629      	mov	r1, r5
 8001d54:	028b      	lsls	r3, r1, #10
 8001d56:	4621      	mov	r1, r4
 8001d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	028a      	lsls	r2, r1, #10
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d66:	2200      	movs	r2, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	60fa      	str	r2, [r7, #12]
 8001d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d70:	f7fe fabe 	bl	80002f0 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8001d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d96:	e002      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3740      	adds	r7, #64	; 0x40
 8001da4:	46bd      	mov	sp, r7
 8001da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	017d7840 	.word	0x017d7840

08001db8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	; (8001dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0a9b      	lsrs	r3, r3, #10
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4903      	ldr	r1, [pc, #12]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08007e74 	.word	0x08007e74

08001df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dfc:	f7ff ffdc 	bl	8001db8 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0b5b      	lsrs	r3, r3, #13
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08007e74 	.word	0x08007e74

08001e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e48:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	4a68      	ldr	r2, [pc, #416]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e52:	6093      	str	r3, [r2, #8]
 8001e54:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5c:	4964      	ldr	r1, [pc, #400]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d017      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	4959      	ldr	r1, [pc, #356]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e98:	d101      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d017      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb6:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ebc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	494a      	ldr	r1, [pc, #296]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed4:	d101      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 808b 	beq.w	800201a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a39      	ldr	r2, [pc, #228]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a34      	ldr	r2, [pc, #208]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f28:	f7fe ff56 	bl	8000dd8 <HAL_GetTick>
 8001f2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f30:	f7fe ff52 	bl	8000dd8 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e38f      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d035      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d02e      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f6c:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a1a      	ldr	r2, [pc, #104]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f8e:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d114      	bne.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa0:	f7fe ff1a 	bl	8000dd8 <HAL_GetTick>
 8001fa4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7fe ff16 	bl	8000dd8 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e351      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ee      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fd6:	d111      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	4901      	ldr	r1, [pc, #4]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
 8001fee:	e00b      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	0ffffcff 	.word	0x0ffffcff
 8001ffc:	4bac      	ldr	r3, [pc, #688]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4aab      	ldr	r2, [pc, #684]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002002:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002006:	6093      	str	r3, [r2, #8]
 8002008:	4ba9      	ldr	r3, [pc, #676]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	49a6      	ldr	r1, [pc, #664]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002016:	4313      	orrs	r3, r2
 8002018:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d010      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002026:	4ba2      	ldr	r3, [pc, #648]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800202c:	4aa0      	ldr	r2, [pc, #640]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800202e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002032:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002036:	4b9e      	ldr	r3, [pc, #632]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002038:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	499b      	ldr	r1, [pc, #620]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002054:	4b96      	ldr	r3, [pc, #600]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002062:	4993      	ldr	r1, [pc, #588]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002076:	4b8e      	ldr	r3, [pc, #568]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002084:	498a      	ldr	r1, [pc, #552]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002098:	4b85      	ldr	r3, [pc, #532]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a6:	4982      	ldr	r1, [pc, #520]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020ba:	4b7d      	ldr	r3, [pc, #500]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4979      	ldr	r1, [pc, #484]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020dc:	4b74      	ldr	r3, [pc, #464]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4971      	ldr	r1, [pc, #452]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020fe:	4b6c      	ldr	r3, [pc, #432]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f023 020c 	bic.w	r2, r3, #12
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	4968      	ldr	r1, [pc, #416]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002120:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4960      	ldr	r1, [pc, #384]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002142:	4b5b      	ldr	r3, [pc, #364]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002148:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002150:	4957      	ldr	r1, [pc, #348]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002164:	4b52      	ldr	r3, [pc, #328]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	494f      	ldr	r1, [pc, #316]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	4946      	ldr	r1, [pc, #280]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021a8:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b6:	493e      	ldr	r1, [pc, #248]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d8:	4935      	ldr	r1, [pc, #212]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021ec:	4b30      	ldr	r3, [pc, #192]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021fa:	492d      	ldr	r1, [pc, #180]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d011      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221c:	4924      	ldr	r1, [pc, #144]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800222c:	d101      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225c:	4914      	ldr	r1, [pc, #80]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002280:	490b      	ldr	r1, [pc, #44]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00f      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a4:	4902      	ldr	r1, [pc, #8]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022ac:	e002      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022c0:	4b8a      	ldr	r3, [pc, #552]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	4986      	ldr	r1, [pc, #536]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00b      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80022e4:	4b81      	ldr	r3, [pc, #516]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f4:	497d      	ldr	r1, [pc, #500]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d006      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80d6 	beq.w	80024bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002310:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a75      	ldr	r2, [pc, #468]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800231a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800231c:	f7fe fd5c 	bl	8000dd8 <HAL_GetTick>
 8002320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002324:	f7fe fd58 	bl	8000dd8 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	; 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e195      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d021      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002352:	2b00      	cmp	r3, #0
 8002354:	d11d      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002356:	4b65      	ldr	r3, [pc, #404]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800236a:	0e1b      	lsrs	r3, r3, #24
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	019a      	lsls	r2, r3, #6
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	431a      	orrs	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	061b      	lsls	r3, r3, #24
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	071b      	lsls	r3, r3, #28
 800238a:	4958      	ldr	r1, [pc, #352]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02e      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023bc:	d129      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023be:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d2:	0f1b      	lsrs	r3, r3, #28
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	019a      	lsls	r2, r3, #6
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	061b      	lsls	r3, r3, #24
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	071b      	lsls	r3, r3, #28
 80023f2:	493e      	ldr	r1, [pc, #248]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023fa:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002400:	f023 021f 	bic.w	r2, r3, #31
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	3b01      	subs	r3, #1
 800240a:	4938      	ldr	r1, [pc, #224]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d01d      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800241e:	4b33      	ldr	r3, [pc, #204]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002424:	0e1b      	lsrs	r3, r3, #24
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800242e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002432:	0f1b      	lsrs	r3, r3, #28
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	019a      	lsls	r2, r3, #6
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	061b      	lsls	r3, r3, #24
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	071b      	lsls	r3, r3, #28
 8002452:	4926      	ldr	r1, [pc, #152]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d011      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	019a      	lsls	r2, r3, #6
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	071b      	lsls	r3, r3, #28
 8002482:	491a      	ldr	r1, [pc, #104]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002490:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002496:	f7fe fc9f 	bl	8000dd8 <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800249e:	f7fe fc9b 	bl	8000dd8 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0d8      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	f040 80ce 	bne.w	8002660 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe fc82 	bl	8000dd8 <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024d6:	e00b      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024d8:	f7fe fc7e 	bl	8000dd8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d904      	bls.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0bb      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024f0:	4b5e      	ldr	r3, [pc, #376]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024fc:	d0ec      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800251a:	2b00      	cmp	r3, #0
 800251c:	d02e      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d12a      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002526:	4b51      	ldr	r3, [pc, #324]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002534:	4b4d      	ldr	r3, [pc, #308]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	0f1b      	lsrs	r3, r3, #28
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	019a      	lsls	r2, r3, #6
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	061b      	lsls	r3, r3, #24
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	071b      	lsls	r3, r3, #28
 800255a:	4944      	ldr	r1, [pc, #272]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002562:	4b42      	ldr	r3, [pc, #264]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002568:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	493d      	ldr	r1, [pc, #244]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d022      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800258c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002590:	d11d      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002592:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	0e1b      	lsrs	r3, r3, #24
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025a0:	4b32      	ldr	r3, [pc, #200]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	0f1b      	lsrs	r3, r3, #28
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	019a      	lsls	r2, r3, #6
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	431a      	orrs	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	071b      	lsls	r3, r3, #28
 80025c6:	4929      	ldr	r1, [pc, #164]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d028      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	0e1b      	lsrs	r3, r3, #24
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	0c1b      	lsrs	r3, r3, #16
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	019a      	lsls	r2, r3, #6
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	041b      	lsls	r3, r3, #16
 8002600:	431a      	orrs	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	061b      	lsls	r3, r3, #24
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	071b      	lsls	r3, r3, #28
 800260e:	4917      	ldr	r1, [pc, #92]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	4911      	ldr	r1, [pc, #68]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0e      	ldr	r2, [pc, #56]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7fe fbce 	bl	8000dd8 <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002640:	f7fe fbca 	bl	8000dd8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e007      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002652:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800265a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800265e:	d1ef      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e040      	b.n	8002704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fa48 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fe86 	bl	80033c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 fc1f 	bl	8002f00 <UART_SetConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e01b      	b.n	8002704 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 ff05 	bl	800350c <UART_CheckIdleState>
 8002702:	4603      	mov	r3, r0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	; 0x28
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002720:	2b20      	cmp	r3, #32
 8002722:	d177      	bne.n	8002814 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_Transmit+0x24>
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e070      	b.n	8002816 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2221      	movs	r2, #33	; 0x21
 8002740:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002742:	f7fe fb49 	bl	8000dd8 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d108      	bne.n	8002774 <HAL_UART_Transmit+0x68>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800277c:	e02f      	b.n	80027de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 ff67 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e03b      	b.n	8002816 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10b      	bne.n	80027bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	3302      	adds	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e007      	b.n	80027cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3301      	adds	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1c9      	bne.n	800277e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2140      	movs	r1, #64	; 0x40
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 ff31 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e005      	b.n	8002816 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b08a      	sub	sp, #40	; 0x28
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002832:	2b20      	cmp	r3, #32
 8002834:	d132      	bne.n	800289c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_UART_Receive_IT+0x24>
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e02b      	b.n	800289e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d018      	beq.n	800288c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	613b      	str	r3, [r7, #16]
   return(result);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	623b      	str	r3, [r7, #32]
 800287a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	69f9      	ldr	r1, [r7, #28]
 800287e:	6a3a      	ldr	r2, [r7, #32]
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	61bb      	str	r3, [r7, #24]
   return(result);
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e6      	bne.n	800285a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	461a      	mov	r2, r3
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 ff50 	bl	8003738 <UART_Start_Receive_IT>
 8002898:	4603      	mov	r3, r0
 800289a:	e000      	b.n	800289e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800289c:	2302      	movs	r3, #2
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0ba      	sub	sp, #232	; 0xe8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80028d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80028d6:	4013      	ands	r3, r2
 80028d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80028dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d115      	bne.n	8002910 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e8:	f003 0320 	and.w	r3, r3, #32
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00f      	beq.n	8002910 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 82c6 	beq.w	8002e92 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4798      	blx	r3
      }
      return;
 800290e:	e2c0      	b.n	8002e92 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8117 	beq.w	8002b48 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800291a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002926:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800292a:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <HAL_UART_IRQHandler+0x298>)
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 810a 	beq.w	8002b48 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d011      	beq.n	8002964 <HAL_UART_IRQHandler+0xbc>
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295a:	f043 0201 	orr.w	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d011      	beq.n	8002994 <HAL_UART_IRQHandler+0xec>
 8002970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00b      	beq.n	8002994 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2202      	movs	r2, #2
 8002982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d011      	beq.n	80029c4 <HAL_UART_IRQHandler+0x11c>
 80029a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2204      	movs	r2, #4
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ba:	f043 0202 	orr.w	r2, r3, #2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d017      	beq.n	8002a00 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2208      	movs	r2, #8
 80029ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f6:	f043 0208 	orr.w	r2, r3, #8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <HAL_UART_IRQHandler+0x18a>
 8002a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00c      	beq.n	8002a32 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 822c 	beq.w	8002e96 <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d005      	beq.n	8002a8a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d04f      	beq.n	8002b2a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 ff1a 	bl	80038c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d141      	bne.n	8002b22 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002aca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ad6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ae2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1d9      	bne.n	8002a9e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d013      	beq.n	8002b1a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af6:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_UART_IRQHandler+0x29c>)
 8002af8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe faf7 	bl	80010f2 <HAL_DMA_Abort_IT>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d017      	beq.n	8002b3a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b14:	4610      	mov	r0, r2
 8002b16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	e00f      	b.n	8002b3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f9d0 	bl	8002ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b20:	e00b      	b.n	8002b3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f9cc 	bl	8002ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b28:	e007      	b.n	8002b3a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9c8 	bl	8002ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002b38:	e1ad      	b.n	8002e96 <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3a:	bf00      	nop
    return;
 8002b3c:	e1ab      	b.n	8002e96 <HAL_UART_IRQHandler+0x5ee>
 8002b3e:	bf00      	nop
 8002b40:	04000120 	.word	0x04000120
 8002b44:	0800398d 	.word	0x0800398d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f040 8166 	bne.w	8002e1e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0310 	and.w	r3, r3, #16
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 815f 	beq.w	8002e1e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8158 	beq.w	8002e1e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2210      	movs	r2, #16
 8002b74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	f040 80d0 	bne.w	8002d26 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b92:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80ab 	beq.w	8002cf2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	f080 80a3 	bcs.w	8002cf2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc0:	f000 8086 	beq.w	8002cd0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bf2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bfe:	e841 2300 	strex	r3, r2, [r1]
 8002c02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1da      	bne.n	8002bc4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3308      	adds	r3, #8
 8002c14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e1      	bne.n	8002c0e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3308      	adds	r3, #8
 8002c50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3308      	adds	r3, #8
 8002c6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e3      	bne.n	8002c4a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c98:	e853 3f00 	ldrex	r3, [r3]
 8002c9c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca0:	f023 0310 	bic.w	r3, r3, #16
 8002ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cb4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e4      	bne.n	8002c90 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe f9a1 	bl	8001012 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8f2 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002cf0:	e0d3      	b.n	8002e9a <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	f040 80cc 	bne.w	8002e9a <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0c:	f040 80c5 	bne.w	8002e9a <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	665a      	str	r2, [r3, #100]	; 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8d8 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
      return;
 8002d24:	e0b9      	b.n	8002e9a <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 80ab 	beq.w	8002e9e <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8002d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80a6 	beq.w	8002e9e <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5a:	e853 3f00 	ldrex	r3, [r3]
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
 8002d76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d7c:	e841 2300 	strex	r3, r2, [r1]
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e4      	bne.n	8002d52 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	623b      	str	r3, [r7, #32]
   return(result);
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3308      	adds	r3, #8
 8002da8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dac:	633a      	str	r2, [r7, #48]	; 0x30
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002db4:	e841 2300 	strex	r3, r2, [r1]
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e3      	bne.n	8002d88 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f023 0310 	bic.w	r3, r3, #16
 8002de8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002df6:	61fb      	str	r3, [r7, #28]
 8002df8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	617b      	str	r3, [r7, #20]
   return(result);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e4      	bne.n	8002dd4 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f85c 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e1c:	e03f      	b.n	8002e9e <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00e      	beq.n	8002e48 <HAL_UART_IRQHandler+0x5a0>
 8002e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f853 	bl	8002eec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e46:	e02d      	b.n	8002ea4 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00e      	beq.n	8002e72 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01c      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4798      	blx	r3
    }
    return;
 8002e70:	e017      	b.n	8002ea2 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_UART_IRQHandler+0x5fc>
 8002e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fd90 	bl	80039b0 <UART_EndTransmit_IT>
    return;
 8002e90:	e008      	b.n	8002ea4 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002e92:	bf00      	nop
 8002e94:	e006      	b.n	8002ea4 <HAL_UART_IRQHandler+0x5fc>
    return;
 8002e96:	bf00      	nop
 8002e98:	e004      	b.n	8002ea4 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002e9a:	bf00      	nop
 8002e9c:	e002      	b.n	8002ea4 <HAL_UART_IRQHandler+0x5fc>
      return;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <HAL_UART_IRQHandler+0x5fc>
    return;
 8002ea2:	bf00      	nop
  }

}
 8002ea4:	37e8      	adds	r7, #232	; 0xe8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop

08002eac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4ba6      	ldr	r3, [pc, #664]	; (80031c4 <UART_SetConfig+0x2c4>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6979      	ldr	r1, [r7, #20]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a94      	ldr	r2, [pc, #592]	; (80031c8 <UART_SetConfig+0x2c8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d120      	bne.n	8002fbe <UART_SetConfig+0xbe>
 8002f7c:	4b93      	ldr	r3, [pc, #588]	; (80031cc <UART_SetConfig+0x2cc>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d816      	bhi.n	8002fb8 <UART_SetConfig+0xb8>
 8002f8a:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <UART_SetConfig+0x90>)
 8002f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f90:	08002fa1 	.word	0x08002fa1
 8002f94:	08002fad 	.word	0x08002fad
 8002f98:	08002fa7 	.word	0x08002fa7
 8002f9c:	08002fb3 	.word	0x08002fb3
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e150      	b.n	8003248 <UART_SetConfig+0x348>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e14d      	b.n	8003248 <UART_SetConfig+0x348>
 8002fac:	2304      	movs	r3, #4
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e14a      	b.n	8003248 <UART_SetConfig+0x348>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e147      	b.n	8003248 <UART_SetConfig+0x348>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e144      	b.n	8003248 <UART_SetConfig+0x348>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a83      	ldr	r2, [pc, #524]	; (80031d0 <UART_SetConfig+0x2d0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d132      	bne.n	800302e <UART_SetConfig+0x12e>
 8002fc8:	4b80      	ldr	r3, [pc, #512]	; (80031cc <UART_SetConfig+0x2cc>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d828      	bhi.n	8003028 <UART_SetConfig+0x128>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_SetConfig+0xdc>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	08003029 	.word	0x08003029
 8002fe4:	08003029 	.word	0x08003029
 8002fe8:	08003029 	.word	0x08003029
 8002fec:	0800301d 	.word	0x0800301d
 8002ff0:	08003029 	.word	0x08003029
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	08003029 	.word	0x08003029
 8002ffc:	08003017 	.word	0x08003017
 8003000:	08003029 	.word	0x08003029
 8003004:	08003029 	.word	0x08003029
 8003008:	08003029 	.word	0x08003029
 800300c:	08003023 	.word	0x08003023
 8003010:	2300      	movs	r3, #0
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e118      	b.n	8003248 <UART_SetConfig+0x348>
 8003016:	2302      	movs	r3, #2
 8003018:	77fb      	strb	r3, [r7, #31]
 800301a:	e115      	b.n	8003248 <UART_SetConfig+0x348>
 800301c:	2304      	movs	r3, #4
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e112      	b.n	8003248 <UART_SetConfig+0x348>
 8003022:	2308      	movs	r3, #8
 8003024:	77fb      	strb	r3, [r7, #31]
 8003026:	e10f      	b.n	8003248 <UART_SetConfig+0x348>
 8003028:	2310      	movs	r3, #16
 800302a:	77fb      	strb	r3, [r7, #31]
 800302c:	e10c      	b.n	8003248 <UART_SetConfig+0x348>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a68      	ldr	r2, [pc, #416]	; (80031d4 <UART_SetConfig+0x2d4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d120      	bne.n	800307a <UART_SetConfig+0x17a>
 8003038:	4b64      	ldr	r3, [pc, #400]	; (80031cc <UART_SetConfig+0x2cc>)
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003042:	2b30      	cmp	r3, #48	; 0x30
 8003044:	d013      	beq.n	800306e <UART_SetConfig+0x16e>
 8003046:	2b30      	cmp	r3, #48	; 0x30
 8003048:	d814      	bhi.n	8003074 <UART_SetConfig+0x174>
 800304a:	2b20      	cmp	r3, #32
 800304c:	d009      	beq.n	8003062 <UART_SetConfig+0x162>
 800304e:	2b20      	cmp	r3, #32
 8003050:	d810      	bhi.n	8003074 <UART_SetConfig+0x174>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <UART_SetConfig+0x15c>
 8003056:	2b10      	cmp	r3, #16
 8003058:	d006      	beq.n	8003068 <UART_SetConfig+0x168>
 800305a:	e00b      	b.n	8003074 <UART_SetConfig+0x174>
 800305c:	2300      	movs	r3, #0
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e0f2      	b.n	8003248 <UART_SetConfig+0x348>
 8003062:	2302      	movs	r3, #2
 8003064:	77fb      	strb	r3, [r7, #31]
 8003066:	e0ef      	b.n	8003248 <UART_SetConfig+0x348>
 8003068:	2304      	movs	r3, #4
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e0ec      	b.n	8003248 <UART_SetConfig+0x348>
 800306e:	2308      	movs	r3, #8
 8003070:	77fb      	strb	r3, [r7, #31]
 8003072:	e0e9      	b.n	8003248 <UART_SetConfig+0x348>
 8003074:	2310      	movs	r3, #16
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e0e6      	b.n	8003248 <UART_SetConfig+0x348>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a56      	ldr	r2, [pc, #344]	; (80031d8 <UART_SetConfig+0x2d8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d120      	bne.n	80030c6 <UART_SetConfig+0x1c6>
 8003084:	4b51      	ldr	r3, [pc, #324]	; (80031cc <UART_SetConfig+0x2cc>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800308e:	2bc0      	cmp	r3, #192	; 0xc0
 8003090:	d013      	beq.n	80030ba <UART_SetConfig+0x1ba>
 8003092:	2bc0      	cmp	r3, #192	; 0xc0
 8003094:	d814      	bhi.n	80030c0 <UART_SetConfig+0x1c0>
 8003096:	2b80      	cmp	r3, #128	; 0x80
 8003098:	d009      	beq.n	80030ae <UART_SetConfig+0x1ae>
 800309a:	2b80      	cmp	r3, #128	; 0x80
 800309c:	d810      	bhi.n	80030c0 <UART_SetConfig+0x1c0>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <UART_SetConfig+0x1a8>
 80030a2:	2b40      	cmp	r3, #64	; 0x40
 80030a4:	d006      	beq.n	80030b4 <UART_SetConfig+0x1b4>
 80030a6:	e00b      	b.n	80030c0 <UART_SetConfig+0x1c0>
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
 80030ac:	e0cc      	b.n	8003248 <UART_SetConfig+0x348>
 80030ae:	2302      	movs	r3, #2
 80030b0:	77fb      	strb	r3, [r7, #31]
 80030b2:	e0c9      	b.n	8003248 <UART_SetConfig+0x348>
 80030b4:	2304      	movs	r3, #4
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e0c6      	b.n	8003248 <UART_SetConfig+0x348>
 80030ba:	2308      	movs	r3, #8
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e0c3      	b.n	8003248 <UART_SetConfig+0x348>
 80030c0:	2310      	movs	r3, #16
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e0c0      	b.n	8003248 <UART_SetConfig+0x348>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a44      	ldr	r2, [pc, #272]	; (80031dc <UART_SetConfig+0x2dc>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d125      	bne.n	800311c <UART_SetConfig+0x21c>
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <UART_SetConfig+0x2cc>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030de:	d017      	beq.n	8003110 <UART_SetConfig+0x210>
 80030e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e4:	d817      	bhi.n	8003116 <UART_SetConfig+0x216>
 80030e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ea:	d00b      	beq.n	8003104 <UART_SetConfig+0x204>
 80030ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f0:	d811      	bhi.n	8003116 <UART_SetConfig+0x216>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <UART_SetConfig+0x1fe>
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fa:	d006      	beq.n	800310a <UART_SetConfig+0x20a>
 80030fc:	e00b      	b.n	8003116 <UART_SetConfig+0x216>
 80030fe:	2300      	movs	r3, #0
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e0a1      	b.n	8003248 <UART_SetConfig+0x348>
 8003104:	2302      	movs	r3, #2
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e09e      	b.n	8003248 <UART_SetConfig+0x348>
 800310a:	2304      	movs	r3, #4
 800310c:	77fb      	strb	r3, [r7, #31]
 800310e:	e09b      	b.n	8003248 <UART_SetConfig+0x348>
 8003110:	2308      	movs	r3, #8
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e098      	b.n	8003248 <UART_SetConfig+0x348>
 8003116:	2310      	movs	r3, #16
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e095      	b.n	8003248 <UART_SetConfig+0x348>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <UART_SetConfig+0x2e0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d125      	bne.n	8003172 <UART_SetConfig+0x272>
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <UART_SetConfig+0x2cc>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003134:	d017      	beq.n	8003166 <UART_SetConfig+0x266>
 8003136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800313a:	d817      	bhi.n	800316c <UART_SetConfig+0x26c>
 800313c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003140:	d00b      	beq.n	800315a <UART_SetConfig+0x25a>
 8003142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003146:	d811      	bhi.n	800316c <UART_SetConfig+0x26c>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <UART_SetConfig+0x254>
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003150:	d006      	beq.n	8003160 <UART_SetConfig+0x260>
 8003152:	e00b      	b.n	800316c <UART_SetConfig+0x26c>
 8003154:	2301      	movs	r3, #1
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e076      	b.n	8003248 <UART_SetConfig+0x348>
 800315a:	2302      	movs	r3, #2
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e073      	b.n	8003248 <UART_SetConfig+0x348>
 8003160:	2304      	movs	r3, #4
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e070      	b.n	8003248 <UART_SetConfig+0x348>
 8003166:	2308      	movs	r3, #8
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e06d      	b.n	8003248 <UART_SetConfig+0x348>
 800316c:	2310      	movs	r3, #16
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e06a      	b.n	8003248 <UART_SetConfig+0x348>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <UART_SetConfig+0x2e4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d138      	bne.n	80031ee <UART_SetConfig+0x2ee>
 800317c:	4b13      	ldr	r3, [pc, #76]	; (80031cc <UART_SetConfig+0x2cc>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003186:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800318a:	d017      	beq.n	80031bc <UART_SetConfig+0x2bc>
 800318c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003190:	d82a      	bhi.n	80031e8 <UART_SetConfig+0x2e8>
 8003192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003196:	d00b      	beq.n	80031b0 <UART_SetConfig+0x2b0>
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319c:	d824      	bhi.n	80031e8 <UART_SetConfig+0x2e8>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <UART_SetConfig+0x2aa>
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a6:	d006      	beq.n	80031b6 <UART_SetConfig+0x2b6>
 80031a8:	e01e      	b.n	80031e8 <UART_SetConfig+0x2e8>
 80031aa:	2300      	movs	r3, #0
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e04b      	b.n	8003248 <UART_SetConfig+0x348>
 80031b0:	2302      	movs	r3, #2
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e048      	b.n	8003248 <UART_SetConfig+0x348>
 80031b6:	2304      	movs	r3, #4
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e045      	b.n	8003248 <UART_SetConfig+0x348>
 80031bc:	2308      	movs	r3, #8
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e042      	b.n	8003248 <UART_SetConfig+0x348>
 80031c2:	bf00      	nop
 80031c4:	efff69f3 	.word	0xefff69f3
 80031c8:	40011000 	.word	0x40011000
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40004400 	.word	0x40004400
 80031d4:	40004800 	.word	0x40004800
 80031d8:	40004c00 	.word	0x40004c00
 80031dc:	40005000 	.word	0x40005000
 80031e0:	40011400 	.word	0x40011400
 80031e4:	40007800 	.word	0x40007800
 80031e8:	2310      	movs	r3, #16
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e02c      	b.n	8003248 <UART_SetConfig+0x348>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a72      	ldr	r2, [pc, #456]	; (80033bc <UART_SetConfig+0x4bc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d125      	bne.n	8003244 <UART_SetConfig+0x344>
 80031f8:	4b71      	ldr	r3, [pc, #452]	; (80033c0 <UART_SetConfig+0x4c0>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003202:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003206:	d017      	beq.n	8003238 <UART_SetConfig+0x338>
 8003208:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800320c:	d817      	bhi.n	800323e <UART_SetConfig+0x33e>
 800320e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003212:	d00b      	beq.n	800322c <UART_SetConfig+0x32c>
 8003214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003218:	d811      	bhi.n	800323e <UART_SetConfig+0x33e>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <UART_SetConfig+0x326>
 800321e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003222:	d006      	beq.n	8003232 <UART_SetConfig+0x332>
 8003224:	e00b      	b.n	800323e <UART_SetConfig+0x33e>
 8003226:	2300      	movs	r3, #0
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e00d      	b.n	8003248 <UART_SetConfig+0x348>
 800322c:	2302      	movs	r3, #2
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e00a      	b.n	8003248 <UART_SetConfig+0x348>
 8003232:	2304      	movs	r3, #4
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e007      	b.n	8003248 <UART_SetConfig+0x348>
 8003238:	2308      	movs	r3, #8
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e004      	b.n	8003248 <UART_SetConfig+0x348>
 800323e:	2310      	movs	r3, #16
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e001      	b.n	8003248 <UART_SetConfig+0x348>
 8003244:	2310      	movs	r3, #16
 8003246:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003250:	d15b      	bne.n	800330a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003252:	7ffb      	ldrb	r3, [r7, #31]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d828      	bhi.n	80032aa <UART_SetConfig+0x3aa>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0x360>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003285 	.word	0x08003285
 8003264:	0800328d 	.word	0x0800328d
 8003268:	08003295 	.word	0x08003295
 800326c:	080032ab 	.word	0x080032ab
 8003270:	0800329b 	.word	0x0800329b
 8003274:	080032ab 	.word	0x080032ab
 8003278:	080032ab 	.word	0x080032ab
 800327c:	080032ab 	.word	0x080032ab
 8003280:	080032a3 	.word	0x080032a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7fe fda4 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003288:	61b8      	str	r0, [r7, #24]
        break;
 800328a:	e013      	b.n	80032b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800328c:	f7fe fdb4 	bl	8001df8 <HAL_RCC_GetPCLK2Freq>
 8003290:	61b8      	str	r0, [r7, #24]
        break;
 8003292:	e00f      	b.n	80032b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003294:	4b4b      	ldr	r3, [pc, #300]	; (80033c4 <UART_SetConfig+0x4c4>)
 8003296:	61bb      	str	r3, [r7, #24]
        break;
 8003298:	e00c      	b.n	80032b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329a:	f7fe fcc7 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 800329e:	61b8      	str	r0, [r7, #24]
        break;
 80032a0:	e008      	b.n	80032b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a6:	61bb      	str	r3, [r7, #24]
        break;
 80032a8:	e004      	b.n	80032b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	77bb      	strb	r3, [r7, #30]
        break;
 80032b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d074      	beq.n	80033a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	005a      	lsls	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	d916      	bls.n	8003304 <UART_SetConfig+0x404>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d212      	bcs.n	8003304 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f023 030f 	bic.w	r3, r3, #15
 80032e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	89fb      	ldrh	r3, [r7, #14]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	89fa      	ldrh	r2, [r7, #14]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	e04f      	b.n	80033a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	77bb      	strb	r3, [r7, #30]
 8003308:	e04c      	b.n	80033a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d828      	bhi.n	8003362 <UART_SetConfig+0x462>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <UART_SetConfig+0x418>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	0800333d 	.word	0x0800333d
 800331c:	08003345 	.word	0x08003345
 8003320:	0800334d 	.word	0x0800334d
 8003324:	08003363 	.word	0x08003363
 8003328:	08003353 	.word	0x08003353
 800332c:	08003363 	.word	0x08003363
 8003330:	08003363 	.word	0x08003363
 8003334:	08003363 	.word	0x08003363
 8003338:	0800335b 	.word	0x0800335b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800333c:	f7fe fd48 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8003340:	61b8      	str	r0, [r7, #24]
        break;
 8003342:	e013      	b.n	800336c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003344:	f7fe fd58 	bl	8001df8 <HAL_RCC_GetPCLK2Freq>
 8003348:	61b8      	str	r0, [r7, #24]
        break;
 800334a:	e00f      	b.n	800336c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <UART_SetConfig+0x4c4>)
 800334e:	61bb      	str	r3, [r7, #24]
        break;
 8003350:	e00c      	b.n	800336c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003352:	f7fe fc6b 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8003356:	61b8      	str	r0, [r7, #24]
        break;
 8003358:	e008      	b.n	800336c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335e:	61bb      	str	r3, [r7, #24]
        break;
 8003360:	e004      	b.n	800336c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	77bb      	strb	r3, [r7, #30]
        break;
 800336a:	bf00      	nop
    }

    if (pclk != 0U)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d018      	beq.n	80033a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	085a      	lsrs	r2, r3, #1
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	441a      	add	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b0f      	cmp	r3, #15
 800338a:	d909      	bls.n	80033a0 <UART_SetConfig+0x4a0>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003392:	d205      	bcs.n	80033a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	b29a      	uxth	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	e001      	b.n	80033a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40007c00 	.word	0x40007c00
 80033c0:	40023800 	.word	0x40023800
 80033c4:	00f42400 	.word	0x00f42400

080033c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0320 	and.w	r3, r3, #32
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034c6:	d10a      	bne.n	80034de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b098      	sub	sp, #96	; 0x60
 8003510:	af02      	add	r7, sp, #8
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800351c:	f7fd fc5c 	bl	8000dd8 <HAL_GetTick>
 8003520:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d12e      	bne.n	800358e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	2200      	movs	r2, #0
 800353a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f88c 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d021      	beq.n	800358e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	653b      	str	r3, [r7, #80]	; 0x50
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	461a      	mov	r2, r3
 8003566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003568:	647b      	str	r3, [r7, #68]	; 0x44
 800356a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800356e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e6      	bne.n	800354a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e062      	b.n	8003654 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b04      	cmp	r3, #4
 800359a:	d149      	bne.n	8003630 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800359c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f856 	bl	800365c <UART_WaitOnFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d03c      	beq.n	8003630 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	623b      	str	r3, [r7, #32]
   return(result);
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
 80035d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e6      	bne.n	80035b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3308      	adds	r3, #8
 80035ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	69b9      	ldr	r1, [r7, #24]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	617b      	str	r3, [r7, #20]
   return(result);
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e011      	b.n	8003654 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3758      	adds	r7, #88	; 0x58
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366c:	e04f      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d04b      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fd fbaf 	bl	8000dd8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <UART_WaitOnFlagUntilTimeout+0x30>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e04e      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d037      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b80      	cmp	r3, #128	; 0x80
 80036a2:	d034      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d031      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d110      	bne.n	80036da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2208      	movs	r2, #8
 80036be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f8ff 	bl	80038c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2208      	movs	r2, #8
 80036ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e029      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e8:	d111      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f8e5 	bl	80038c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e00f      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d0a0      	beq.n	800366e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003738:	b480      	push	{r7}
 800373a:	b097      	sub	sp, #92	; 0x5c
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d10e      	bne.n	800378a <UART_Start_Receive_IT+0x52>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <UART_Start_Receive_IT+0x48>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f240 12ff 	movw	r2, #511	; 0x1ff
 800377a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800377e:	e02d      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	22ff      	movs	r2, #255	; 0xff
 8003784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003788:	e028      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10d      	bne.n	80037ae <UART_Start_Receive_IT+0x76>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d104      	bne.n	80037a4 <UART_Start_Receive_IT+0x6c>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a2:	e01b      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	227f      	movs	r2, #127	; 0x7f
 80037a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037ac:	e016      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b6:	d10d      	bne.n	80037d4 <UART_Start_Receive_IT+0x9c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <UART_Start_Receive_IT+0x92>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	227f      	movs	r2, #127	; 0x7f
 80037c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037c8:	e008      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	223f      	movs	r2, #63	; 0x3f
 80037ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d2:	e003      	b.n	80037dc <UART_Start_Receive_IT+0xa4>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2222      	movs	r2, #34	; 0x22
 80037e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3308      	adds	r3, #8
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f6:	e853 3f00 	ldrex	r3, [r3]
 80037fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	657b      	str	r3, [r7, #84]	; 0x54
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800380c:	64ba      	str	r2, [r7, #72]	; 0x48
 800380e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003814:	e841 2300 	strex	r3, r2, [r1]
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1e5      	bne.n	80037ec <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d107      	bne.n	800383a <UART_Start_Receive_IT+0x102>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a21      	ldr	r2, [pc, #132]	; (80038bc <UART_Start_Receive_IT+0x184>)
 8003836:	669a      	str	r2, [r3, #104]	; 0x68
 8003838:	e002      	b.n	8003840 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a20      	ldr	r2, [pc, #128]	; (80038c0 <UART_Start_Receive_IT+0x188>)
 800383e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d019      	beq.n	800387c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800385c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	637b      	str	r3, [r7, #52]	; 0x34
 8003868:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800386c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e6      	bne.n	8003848 <UART_Start_Receive_IT+0x110>
 800387a:	e018      	b.n	80038ae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	613b      	str	r3, [r7, #16]
   return(result);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f043 0320 	orr.w	r3, r3, #32
 8003890:	653b      	str	r3, [r7, #80]	; 0x50
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	69f9      	ldr	r1, [r7, #28]
 80038a0:	6a3a      	ldr	r2, [r7, #32]
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e6      	bne.n	800387c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	375c      	adds	r7, #92	; 0x5c
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	08003bad 	.word	0x08003bad
 80038c0:	08003a05 	.word	0x08003a05

080038c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b095      	sub	sp, #84	; 0x54
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
 80038ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e6      	bne.n	80038cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3308      	adds	r3, #8
 8003904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	61fb      	str	r3, [r7, #28]
   return(result);
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	64bb      	str	r3, [r7, #72]	; 0x48
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800391e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	2b01      	cmp	r3, #1
 8003938:	d118      	bne.n	800396c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	60bb      	str	r3, [r7, #8]
   return(result);
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f023 0310 	bic.w	r3, r3, #16
 800394e:	647b      	str	r3, [r7, #68]	; 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6979      	ldr	r1, [r7, #20]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	613b      	str	r3, [r7, #16]
   return(result);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e6      	bne.n	800393a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003980:	bf00      	nop
 8003982:	3754      	adds	r7, #84	; 0x54
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff fa8c 	bl	8002ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	613b      	str	r3, [r7, #16]
   return(result);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e6      	bne.n	80039b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fa58 	bl	8002eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039fc:	bf00      	nop
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b09c      	sub	sp, #112	; 0x70
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a12:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a1c:	2b22      	cmp	r3, #34	; 0x22
 8003a1e:	f040 80b9 	bne.w	8003b94 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003a30:	b2d9      	uxtb	r1, r3
 8003a32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f040 809c 	bne.w	8003ba4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a80:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a92:	e841 2300 	strex	r3, r2, [r1]
 8003a96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1e6      	bne.n	8003a6c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003abe:	647a      	str	r2, [r7, #68]	; 0x44
 8003ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e5      	bne.n	8003a9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d018      	beq.n	8003b26 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	623b      	str	r3, [r7, #32]
   return(result);
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b08:	663b      	str	r3, [r7, #96]	; 0x60
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
 8003b14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e6      	bne.n	8003af4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d12e      	bne.n	8003b8c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f023 0310 	bic.w	r3, r3, #16
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	69b9      	ldr	r1, [r7, #24]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e6      	bne.n	8003b34 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d103      	bne.n	8003b7c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2210      	movs	r2, #16
 8003b7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff f9a5 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b8a:	e00b      	b.n	8003ba4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fc fd2d 	bl	80005ec <HAL_UART_RxCpltCallback>
}
 8003b92:	e007      	b.n	8003ba4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0208 	orr.w	r2, r2, #8
 8003ba2:	619a      	str	r2, [r3, #24]
}
 8003ba4:	bf00      	nop
 8003ba6:	3770      	adds	r7, #112	; 0x70
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b09c      	sub	sp, #112	; 0x70
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc4:	2b22      	cmp	r3, #34	; 0x22
 8003bc6:	f040 80b9 	bne.w	8003d3c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003bda:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003bde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003be2:	4013      	ands	r3, r2
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003be8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	1c9a      	adds	r2, r3, #2
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 809c 	bne.w	8003d4c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c28:	667b      	str	r3, [r7, #100]	; 0x64
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c32:	657b      	str	r3, [r7, #84]	; 0x54
 8003c34:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c3a:	e841 2300 	strex	r3, r2, [r1]
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e6      	bne.n	8003c14 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3308      	adds	r3, #8
 8003c64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c66:	643a      	str	r2, [r7, #64]	; 0x40
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d018      	beq.n	8003cce <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cbc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e6      	bne.n	8003c9c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d12e      	bne.n	8003d34 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f023 0310 	bic.w	r3, r3, #16
 8003cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6979      	ldr	r1, [r7, #20]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	613b      	str	r3, [r7, #16]
   return(result);
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e6      	bne.n	8003cdc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d103      	bne.n	8003d24 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2210      	movs	r2, #16
 8003d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff f8d1 	bl	8002ed4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d32:	e00b      	b.n	8003d4c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fc fc59 	bl	80005ec <HAL_UART_RxCpltCallback>
}
 8003d3a:	e007      	b.n	8003d4c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	619a      	str	r2, [r3, #24]
}
 8003d4c:	bf00      	nop
 8003d4e:	3770      	adds	r7, #112	; 0x70
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d6a:	f3ef 8305 	mrs	r3, IPSR
 8003d6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d76:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7a:	607b      	str	r3, [r7, #4]
  return(result);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d105      	bne.n	8003d8e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d82:	f3ef 8311 	mrs	r3, BASEPRI
 8003d86:	603b      	str	r3, [r7, #0]
  return(result);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <osKernelInitialize+0x3a>
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <osKernelInitialize+0x64>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d103      	bne.n	8003d9e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003d96:	f06f 0305 	mvn.w	r3, #5
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e00c      	b.n	8003db8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <osKernelInitialize+0x64>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <osKernelInitialize+0x64>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e002      	b.n	8003db8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003db8:	68fb      	ldr	r3, [r7, #12]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000134 	.word	0x20000134

08003dcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dd2:	f3ef 8305 	mrs	r3, IPSR
 8003dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dde:	f3ef 8310 	mrs	r3, PRIMASK
 8003de2:	607b      	str	r3, [r7, #4]
  return(result);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d105      	bne.n	8003df6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003dea:	f3ef 8311 	mrs	r3, BASEPRI
 8003dee:	603b      	str	r3, [r7, #0]
  return(result);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <osKernelStart+0x3a>
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <osKernelStart+0x68>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d103      	bne.n	8003e06 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003dfe:	f06f 0305 	mvn.w	r3, #5
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e010      	b.n	8003e28 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <osKernelStart+0x68>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d109      	bne.n	8003e22 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e0e:	f7ff ffa1 	bl	8003d54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <osKernelStart+0x68>)
 8003e14:	2202      	movs	r2, #2
 8003e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e18:	f001 fd2c 	bl	8005874 <vTaskStartScheduler>
      stat = osOK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e002      	b.n	8003e28 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e28:	68fb      	ldr	r3, [r7, #12]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000134 	.word	0x20000134

08003e38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b090      	sub	sp, #64	; 0x40
 8003e3c:	af04      	add	r7, sp, #16
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e48:	f3ef 8305 	mrs	r3, IPSR
 8003e4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e4e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 808f 	bne.w	8003f74 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e56:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d105      	bne.n	8003e6e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e62:	f3ef 8311 	mrs	r3, BASEPRI
 8003e66:	617b      	str	r3, [r7, #20]
  return(result);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <osThreadNew+0x3e>
 8003e6e:	4b44      	ldr	r3, [pc, #272]	; (8003f80 <osThreadNew+0x148>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d07e      	beq.n	8003f74 <osThreadNew+0x13c>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d07b      	beq.n	8003f74 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003e80:	2318      	movs	r3, #24
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d045      	beq.n	8003f20 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <osThreadNew+0x6a>
        name = attr->name;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <osThreadNew+0x90>
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	2b38      	cmp	r3, #56	; 0x38
 8003eba:	d805      	bhi.n	8003ec8 <osThreadNew+0x90>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <osThreadNew+0x94>
        return (NULL);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	e054      	b.n	8003f76 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <osThreadNew+0xca>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b5b      	cmp	r3, #91	; 0x5b
 8003eea:	d90a      	bls.n	8003f02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <osThreadNew+0xca>
        mem = 1;
 8003efc:	2301      	movs	r3, #1
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	e010      	b.n	8003f24 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <osThreadNew+0xec>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d108      	bne.n	8003f24 <osThreadNew+0xec>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <osThreadNew+0xec>
          mem = 0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	e001      	b.n	8003f24 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d110      	bne.n	8003f4c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f32:	9202      	str	r2, [sp, #8]
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f001 fab7 	bl	80054b4 <xTaskCreateStatic>
 8003f46:	4603      	mov	r3, r0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e013      	b.n	8003f74 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d110      	bne.n	8003f74 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	f107 0310 	add.w	r3, r7, #16
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f001 fb08 	bl	800557a <xTaskCreate>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <osThreadNew+0x13c>
          hTask = NULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f74:	693b      	ldr	r3, [r7, #16]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3730      	adds	r7, #48	; 0x30
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000134 	.word	0x20000134

08003f84 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08c      	sub	sp, #48	; 0x30
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f94:	f3ef 8305 	mrs	r3, IPSR
 8003f98:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f040 8086 	bne.w	80040ae <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa6:	617b      	str	r3, [r7, #20]
  return(result);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fae:	f3ef 8311 	mrs	r3, BASEPRI
 8003fb2:	613b      	str	r3, [r7, #16]
  return(result);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <osSemaphoreNew+0x3e>
 8003fba:	4b3f      	ldr	r3, [pc, #252]	; (80040b8 <osSemaphoreNew+0x134>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d075      	beq.n	80040ae <osSemaphoreNew+0x12a>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d072      	beq.n	80040ae <osSemaphoreNew+0x12a>
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d86e      	bhi.n	80040ae <osSemaphoreNew+0x12a>
    mem = -1;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d015      	beq.n	8004008 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d006      	beq.n	8003ff2 <osSemaphoreNew+0x6e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b4f      	cmp	r3, #79	; 0x4f
 8003fea:	d902      	bls.n	8003ff2 <osSemaphoreNew+0x6e>
        mem = 1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	623b      	str	r3, [r7, #32]
 8003ff0:	e00c      	b.n	800400c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d108      	bne.n	800400c <osSemaphoreNew+0x88>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d104      	bne.n	800400c <osSemaphoreNew+0x88>
          mem = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	e001      	b.n	800400c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d04c      	beq.n	80040ae <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d128      	bne.n	800406c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10a      	bne.n	8004036 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2203      	movs	r2, #3
 8004026:	9200      	str	r2, [sp, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	2100      	movs	r1, #0
 800402c:	2001      	movs	r0, #1
 800402e:	f000 fa55 	bl	80044dc <xQueueGenericCreateStatic>
 8004032:	6278      	str	r0, [r7, #36]	; 0x24
 8004034:	e005      	b.n	8004042 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004036:	2203      	movs	r2, #3
 8004038:	2100      	movs	r1, #0
 800403a:	2001      	movs	r0, #1
 800403c:	f000 fad0 	bl	80045e0 <xQueueGenericCreate>
 8004040:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d022      	beq.n	800408e <osSemaphoreNew+0x10a>
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01f      	beq.n	800408e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800404e:	2300      	movs	r3, #0
 8004050:	2200      	movs	r2, #0
 8004052:	2100      	movs	r1, #0
 8004054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004056:	f000 fb9b 	bl	8004790 <xQueueGenericSend>
 800405a:	4603      	mov	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d016      	beq.n	800408e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004062:	f001 f851 	bl	8005108 <vQueueDelete>
            hSemaphore = NULL;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
 800406a:	e010      	b.n	800408e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d108      	bne.n	8004084 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	461a      	mov	r2, r3
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 fb15 	bl	80046aa <xQueueCreateCountingSemaphoreStatic>
 8004080:	6278      	str	r0, [r7, #36]	; 0x24
 8004082:	e004      	b.n	800408e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fb4a 	bl	8004720 <xQueueCreateCountingSemaphore>
 800408c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00c      	beq.n	80040ae <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <osSemaphoreNew+0x11e>
          name = attr->name;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	e001      	b.n	80040a6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80040a6:	69f9      	ldr	r1, [r7, #28]
 80040a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040aa:	f001 f97b 	bl	80053a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3728      	adds	r7, #40	; 0x28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000134 	.word	0x20000134

080040bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d103      	bne.n	80040dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80040d4:	f06f 0303 	mvn.w	r3, #3
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	e04b      	b.n	8004174 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040dc:	f3ef 8305 	mrs	r3, IPSR
 80040e0:	617b      	str	r3, [r7, #20]
  return(result);
 80040e2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10f      	bne.n	8004108 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	613b      	str	r3, [r7, #16]
  return(result);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040f4:	f3ef 8311 	mrs	r3, BASEPRI
 80040f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d026      	beq.n	800414e <osSemaphoreAcquire+0x92>
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <osSemaphoreAcquire+0xc4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d122      	bne.n	800414e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800410e:	f06f 0303 	mvn.w	r3, #3
 8004112:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004114:	e02d      	b.n	8004172 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800411a:	f107 0308 	add.w	r3, r7, #8
 800411e:	461a      	mov	r2, r3
 8004120:	2100      	movs	r1, #0
 8004122:	69b8      	ldr	r0, [r7, #24]
 8004124:	f000 ff6a 	bl	8004ffc <xQueueReceiveFromISR>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d003      	beq.n	8004136 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800412e:	f06f 0302 	mvn.w	r3, #2
 8004132:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004134:	e01d      	b.n	8004172 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01a      	beq.n	8004172 <osSemaphoreAcquire+0xb6>
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <osSemaphoreAcquire+0xc8>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800414c:	e011      	b.n	8004172 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800414e:	6839      	ldr	r1, [r7, #0]
 8004150:	69b8      	ldr	r0, [r7, #24]
 8004152:	f000 fe3f 	bl	8004dd4 <xQueueSemaphoreTake>
 8004156:	4603      	mov	r3, r0
 8004158:	2b01      	cmp	r3, #1
 800415a:	d00b      	beq.n	8004174 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004162:	f06f 0301 	mvn.w	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e004      	b.n	8004174 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800416a:	f06f 0302 	mvn.w	r3, #2
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	e000      	b.n	8004174 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004172:	bf00      	nop
      }
    }
  }

  return (stat);
 8004174:	69fb      	ldr	r3, [r7, #28]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000134 	.word	0x20000134
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004194:	2300      	movs	r3, #0
 8004196:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800419e:	f06f 0303 	mvn.w	r3, #3
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	e03e      	b.n	8004224 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041a6:	f3ef 8305 	mrs	r3, IPSR
 80041aa:	617b      	str	r3, [r7, #20]
  return(result);
 80041ac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b2:	f3ef 8310 	mrs	r3, PRIMASK
 80041b6:	613b      	str	r3, [r7, #16]
  return(result);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041be:	f3ef 8311 	mrs	r3, BASEPRI
 80041c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01e      	beq.n	8004208 <osSemaphoreRelease+0x80>
 80041ca:	4b19      	ldr	r3, [pc, #100]	; (8004230 <osSemaphoreRelease+0xa8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d11a      	bne.n	8004208 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80041d6:	f107 0308 	add.w	r3, r7, #8
 80041da:	4619      	mov	r1, r3
 80041dc:	69b8      	ldr	r0, [r7, #24]
 80041de:	f000 fc7d 	bl	8004adc <xQueueGiveFromISR>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d003      	beq.n	80041f0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80041e8:	f06f 0302 	mvn.w	r3, #2
 80041ec:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80041ee:	e018      	b.n	8004222 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d015      	beq.n	8004222 <osSemaphoreRelease+0x9a>
 80041f6:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <osSemaphoreRelease+0xac>)
 80041f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004206:	e00c      	b.n	8004222 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004208:	2300      	movs	r3, #0
 800420a:	2200      	movs	r2, #0
 800420c:	2100      	movs	r1, #0
 800420e:	69b8      	ldr	r0, [r7, #24]
 8004210:	f000 fabe 	bl	8004790 <xQueueGenericSend>
 8004214:	4603      	mov	r3, r0
 8004216:	2b01      	cmp	r3, #1
 8004218:	d004      	beq.n	8004224 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800421a:	f06f 0302 	mvn.w	r3, #2
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	e000      	b.n	8004224 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004222:	bf00      	nop
    }
  }

  return (stat);
 8004224:	69fb      	ldr	r3, [r7, #28]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000134 	.word	0x20000134
 8004234:	e000ed04 	.word	0xe000ed04

08004238 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <vApplicationGetIdleTaskMemory+0x2c>)
 8004248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4a06      	ldr	r2, [pc, #24]	; (8004268 <vApplicationGetIdleTaskMemory+0x30>)
 800424e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	601a      	str	r2, [r3, #0]
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000138 	.word	0x20000138
 8004268:	20000194 	.word	0x20000194

0800426c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a07      	ldr	r2, [pc, #28]	; (8004298 <vApplicationGetTimerTaskMemory+0x2c>)
 800427c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4a06      	ldr	r2, [pc, #24]	; (800429c <vApplicationGetTimerTaskMemory+0x30>)
 8004282:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800428a:	601a      	str	r2, [r3, #0]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	20000394 	.word	0x20000394
 800429c:	200003f0 	.word	0x200003f0

080042a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f103 0208 	add.w	r2, r3, #8
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f103 0208 	add.w	r2, r3, #8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f103 0208 	add.w	r2, r3, #8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	601a      	str	r2, [r3, #0]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d103      	bne.n	8004362 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e00c      	b.n	800437c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3308      	adds	r3, #8
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	e002      	b.n	8004370 <vListInsert+0x2e>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d2f6      	bcs.n	800436a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	601a      	str	r2, [r3, #0]
}
 80043a8:	bf00      	nop
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6892      	ldr	r2, [r2, #8]
 80043ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6852      	ldr	r2, [r2, #4]
 80043d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d103      	bne.n	80043e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1e5a      	subs	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10c      	bne.n	8004436 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	b672      	cpsid	i
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	b662      	cpsie	i
 8004430:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004436:	f002 fcc9 	bl	8006dcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	68f9      	ldr	r1, [r7, #12]
 8004444:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	441a      	add	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004466:	3b01      	subs	r3, #1
 8004468:	68f9      	ldr	r1, [r7, #12]
 800446a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	441a      	add	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	22ff      	movs	r2, #255	; 0xff
 800447a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	22ff      	movs	r2, #255	; 0xff
 8004482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d114      	bne.n	80044b6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01a      	beq.n	80044ca <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3310      	adds	r3, #16
 8004498:	4618      	mov	r0, r3
 800449a:	f001 fc83 	bl	8005da4 <xTaskRemoveFromEventList>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <xQueueGenericReset+0xd0>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	e009      	b.n	80044ca <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3310      	adds	r3, #16
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fef0 	bl	80042a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3324      	adds	r3, #36	; 0x24
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff feeb 	bl	80042a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044ca:	f002 fcb3 	bl	8006e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044ce:	2301      	movs	r3, #1
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08e      	sub	sp, #56	; 0x38
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10c      	bne.n	800450a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	b672      	cpsid	i
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	b662      	cpsie	i
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10c      	bne.n	800452a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	b672      	cpsid	i
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	b662      	cpsie	i
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <xQueueGenericCreateStatic+0x5a>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <xQueueGenericCreateStatic+0x5e>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <xQueueGenericCreateStatic+0x60>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10c      	bne.n	800455a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	b672      	cpsid	i
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	b662      	cpsie	i
 8004554:	623b      	str	r3, [r7, #32]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d102      	bne.n	8004566 <xQueueGenericCreateStatic+0x8a>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <xQueueGenericCreateStatic+0x8e>
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <xQueueGenericCreateStatic+0x90>
 800456a:	2300      	movs	r3, #0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10c      	bne.n	800458a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	b672      	cpsid	i
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	b662      	cpsie	i
 8004584:	61fb      	str	r3, [r7, #28]
}
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800458a:	2350      	movs	r3, #80	; 0x50
 800458c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b50      	cmp	r3, #80	; 0x50
 8004592:	d00c      	beq.n	80045ae <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	b672      	cpsid	i
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	b662      	cpsie	i
 80045a8:	61bb      	str	r3, [r7, #24]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	4613      	mov	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f847 	bl	8004664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045d8:	4618      	mov	r0, r3
 80045da:	3730      	adds	r7, #48	; 0x30
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10c      	bne.n	800460e <xQueueGenericCreate+0x2e>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	b672      	cpsid	i
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	b662      	cpsie	i
 8004608:	613b      	str	r3, [r7, #16]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d102      	bne.n	800461a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004614:	2300      	movs	r3, #0
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	e004      	b.n	8004624 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	3350      	adds	r3, #80	; 0x50
 8004628:	4618      	mov	r0, r3
 800462a:	f002 fcfb 	bl	8007024 <pvPortMalloc>
 800462e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d011      	beq.n	800465a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	3350      	adds	r3, #80	; 0x50
 800463e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004648:	79fa      	ldrb	r2, [r7, #7]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f805 	bl	8004664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800465a:	69bb      	ldr	r3, [r7, #24]
	}
 800465c:	4618      	mov	r0, r3
 800465e:	3720      	adds	r7, #32
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e002      	b.n	8004686 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004692:	2101      	movs	r1, #1
 8004694:	69b8      	ldr	r0, [r7, #24]
 8004696:	f7ff feb7 	bl	8004408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b08a      	sub	sp, #40	; 0x28
 80046ae:	af02      	add	r7, sp, #8
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10c      	bne.n	80046d6 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	b672      	cpsid	i
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	b662      	cpsie	i
 80046d0:	61bb      	str	r3, [r7, #24]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90c      	bls.n	80046f8 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	b672      	cpsid	i
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	b662      	cpsie	i
 80046f2:	617b      	str	r3, [r7, #20]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80046f8:	2302      	movs	r3, #2
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	2100      	movs	r1, #0
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7ff feea 	bl	80044dc <xQueueGenericCreateStatic>
 8004708:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004716:	69fb      	ldr	r3, [r7, #28]
	}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10c      	bne.n	800474a <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	b672      	cpsid	i
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	b662      	cpsie	i
 8004744:	613b      	str	r3, [r7, #16]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	429a      	cmp	r2, r3
 8004750:	d90c      	bls.n	800476c <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	b672      	cpsid	i
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	b662      	cpsie	i
 8004766:	60fb      	str	r3, [r7, #12]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800476c:	2202      	movs	r2, #2
 800476e:	2100      	movs	r1, #0
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff ff35 	bl	80045e0 <xQueueGenericCreate>
 8004776:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004784:	697b      	ldr	r3, [r7, #20]
	}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08e      	sub	sp, #56	; 0x38
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10c      	bne.n	80047c6 <xQueueGenericSend+0x36>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	b672      	cpsid	i
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	b662      	cpsie	i
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <xQueueGenericSend+0x44>
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <xQueueGenericSend+0x48>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <xQueueGenericSend+0x4a>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10c      	bne.n	80047f8 <xQueueGenericSend+0x68>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	b672      	cpsid	i
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	b662      	cpsie	i
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d103      	bne.n	8004806 <xQueueGenericSend+0x76>
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <xQueueGenericSend+0x7a>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <xQueueGenericSend+0x7c>
 800480a:	2300      	movs	r3, #0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10c      	bne.n	800482a <xQueueGenericSend+0x9a>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	b672      	cpsid	i
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	b662      	cpsie	i
 8004824:	623b      	str	r3, [r7, #32]
}
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800482a:	f001 fc81 	bl	8006130 <xTaskGetSchedulerState>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <xQueueGenericSend+0xaa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <xQueueGenericSend+0xae>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <xQueueGenericSend+0xb0>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10c      	bne.n	800485e <xQueueGenericSend+0xce>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	b672      	cpsid	i
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	b662      	cpsie	i
 8004858:	61fb      	str	r3, [r7, #28]
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800485e:	f002 fab5 	bl	8006dcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <xQueueGenericSend+0xe4>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d129      	bne.n	80048c8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800487a:	f000 fc82 	bl	8005182 <prvCopyDataToQueue>
 800487e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	3324      	adds	r3, #36	; 0x24
 800488c:	4618      	mov	r0, r3
 800488e:	f001 fa89 	bl	8005da4 <xTaskRemoveFromEventList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d013      	beq.n	80048c0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004898:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <xQueueGenericSend+0x208>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	e00a      	b.n	80048c0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d007      	beq.n	80048c0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048b0:	4b39      	ldr	r3, [pc, #228]	; (8004998 <xQueueGenericSend+0x208>)
 80048b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048c0:	f002 fab8 	bl	8006e34 <vPortExitCritical>
				return pdPASS;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e063      	b.n	8004990 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ce:	f002 fab1 	bl	8006e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e05c      	b.n	8004990 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048dc:	f107 0314 	add.w	r3, r7, #20
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fac5 	bl	8005e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048e6:	2301      	movs	r3, #1
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048ea:	f002 faa3 	bl	8006e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ee:	f001 f82b 	bl	8005948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048f2:	f002 fa6b 	bl	8006dcc <vPortEnterCritical>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d103      	bne.n	800490c <xQueueGenericSend+0x17c>
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004912:	b25b      	sxtb	r3, r3
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d103      	bne.n	8004922 <xQueueGenericSend+0x192>
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004922:	f002 fa87 	bl	8006e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004926:	1d3a      	adds	r2, r7, #4
 8004928:	f107 0314 	add.w	r3, r7, #20
 800492c:	4611      	mov	r1, r2
 800492e:	4618      	mov	r0, r3
 8004930:	f001 fab4 	bl	8005e9c <xTaskCheckForTimeOut>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d124      	bne.n	8004984 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800493a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800493c:	f000 fd19 	bl	8005372 <prvIsQueueFull>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d018      	beq.n	8004978 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	3310      	adds	r3, #16
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f001 f9d4 	bl	8005cfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004956:	f000 fca4 	bl	80052a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800495a:	f001 f803 	bl	8005964 <xTaskResumeAll>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47f af7c 	bne.w	800485e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004966:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <xQueueGenericSend+0x208>)
 8004968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	e772      	b.n	800485e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800497a:	f000 fc92 	bl	80052a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800497e:	f000 fff1 	bl	8005964 <xTaskResumeAll>
 8004982:	e76c      	b.n	800485e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004986:	f000 fc8c 	bl	80052a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800498a:	f000 ffeb 	bl	8005964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800498e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004990:	4618      	mov	r0, r3
 8004992:	3738      	adds	r7, #56	; 0x38
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08e      	sub	sp, #56	; 0x38
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10c      	bne.n	80049ce <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	b672      	cpsid	i
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	b662      	cpsie	i
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049ca:	bf00      	nop
 80049cc:	e7fe      	b.n	80049cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <xQueueGenericSendFromISR+0x40>
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <xQueueGenericSendFromISR+0x44>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <xQueueGenericSendFromISR+0x46>
 80049e0:	2300      	movs	r3, #0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	b672      	cpsid	i
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	b662      	cpsie	i
 80049fa:	623b      	str	r3, [r7, #32]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d103      	bne.n	8004a0e <xQueueGenericSendFromISR+0x72>
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <xQueueGenericSendFromISR+0x76>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <xQueueGenericSendFromISR+0x78>
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10c      	bne.n	8004a32 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	b672      	cpsid	i
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	b662      	cpsie	i
 8004a2c:	61fb      	str	r3, [r7, #28]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a32:	f002 fab3 	bl	8006f9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a36:	f3ef 8211 	mrs	r2, BASEPRI
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	b672      	cpsid	i
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	b662      	cpsie	i
 8004a4e:	61ba      	str	r2, [r7, #24]
 8004a50:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a52:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <xQueueGenericSendFromISR+0xcc>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d12c      	bne.n	8004ac2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a78:	f000 fb83 	bl	8005182 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a7c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d112      	bne.n	8004aac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	3324      	adds	r3, #36	; 0x24
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 f986 	bl	8005da4 <xTaskRemoveFromEventList>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00e      	beq.n	8004abc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00b      	beq.n	8004abc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	e007      	b.n	8004abc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004aac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	b25a      	sxtb	r2, r3
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004abc:	2301      	movs	r3, #1
 8004abe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ac0:	e001      	b.n	8004ac6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ad0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3738      	adds	r7, #56	; 0x38
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08e      	sub	sp, #56	; 0x38
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10c      	bne.n	8004b0a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	b672      	cpsid	i
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	b662      	cpsie	i
 8004b04:	623b      	str	r3, [r7, #32]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00c      	beq.n	8004b2c <xQueueGiveFromISR+0x50>
	__asm volatile
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	b672      	cpsid	i
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	b662      	cpsie	i
 8004b26:	61fb      	str	r3, [r7, #28]
}
 8004b28:	bf00      	nop
 8004b2a:	e7fe      	b.n	8004b2a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <xQueueGiveFromISR+0x60>
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <xQueueGiveFromISR+0x64>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <xQueueGiveFromISR+0x66>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <xQueueGiveFromISR+0x84>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	b672      	cpsid	i
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	b662      	cpsie	i
 8004b5a:	61bb      	str	r3, [r7, #24]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b60:	f002 fa1c 	bl	8006f9c <vPortValidateInterruptPriority>
	__asm volatile
 8004b64:	f3ef 8211 	mrs	r2, BASEPRI
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	b672      	cpsid	i
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	b662      	cpsie	i
 8004b7c:	617a      	str	r2, [r7, #20]
 8004b7e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004b80:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d22b      	bcs.n	8004bec <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ba6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bae:	d112      	bne.n	8004bd6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d016      	beq.n	8004be6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	3324      	adds	r3, #36	; 0x24
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 f8f1 	bl	8005da4 <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00e      	beq.n	8004be6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e007      	b.n	8004be6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bda:	3301      	adds	r3, #1
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	b25a      	sxtb	r2, r3
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004be6:	2301      	movs	r3, #1
 8004be8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bea:	e001      	b.n	8004bf0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f383 8811 	msr	BASEPRI, r3
}
 8004bfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3738      	adds	r7, #56	; 0x38
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08c      	sub	sp, #48	; 0x30
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10c      	bne.n	8004c3c <xQueueReceive+0x34>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	b672      	cpsid	i
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	b662      	cpsie	i
 8004c36:	623b      	str	r3, [r7, #32]
}
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <xQueueReceive+0x42>
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <xQueueReceive+0x46>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <xQueueReceive+0x48>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10c      	bne.n	8004c6e <xQueueReceive+0x66>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	b672      	cpsid	i
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	b662      	cpsie	i
 8004c68:	61fb      	str	r3, [r7, #28]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c6e:	f001 fa5f 	bl	8006130 <xTaskGetSchedulerState>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <xQueueReceive+0x76>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <xQueueReceive+0x7a>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueReceive+0x7c>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10c      	bne.n	8004ca2 <xQueueReceive+0x9a>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	b672      	cpsid	i
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	b662      	cpsie	i
 8004c9c:	61bb      	str	r3, [r7, #24]
}
 8004c9e:	bf00      	nop
 8004ca0:	e7fe      	b.n	8004ca0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ca2:	f002 f893 	bl	8006dcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01f      	beq.n	8004cf2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cb2:	68b9      	ldr	r1, [r7, #8]
 8004cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cb6:	f000 face 	bl	8005256 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	1e5a      	subs	r2, r3, #1
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	3310      	adds	r3, #16
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f868 	bl	8005da4 <xTaskRemoveFromEventList>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d007      	beq.n	8004cea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cda:	4b3d      	ldr	r3, [pc, #244]	; (8004dd0 <xQueueReceive+0x1c8>)
 8004cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cea:	f002 f8a3 	bl	8006e34 <vPortExitCritical>
				return pdPASS;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e069      	b.n	8004dc6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d103      	bne.n	8004d00 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cf8:	f002 f89c 	bl	8006e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e062      	b.n	8004dc6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d06:	f107 0310 	add.w	r3, r7, #16
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 f8b0 	bl	8005e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d14:	f002 f88e 	bl	8006e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d18:	f000 fe16 	bl	8005948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d1c:	f002 f856 	bl	8006dcc <vPortEnterCritical>
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d103      	bne.n	8004d36 <xQueueReceive+0x12e>
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d3c:	b25b      	sxtb	r3, r3
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d103      	bne.n	8004d4c <xQueueReceive+0x144>
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d4c:	f002 f872 	bl	8006e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d50:	1d3a      	adds	r2, r7, #4
 8004d52:	f107 0310 	add.w	r3, r7, #16
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f001 f89f 	bl	8005e9c <xTaskCheckForTimeOut>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d123      	bne.n	8004dac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d66:	f000 faee 	bl	8005346 <prvIsQueueEmpty>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d017      	beq.n	8004da0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	3324      	adds	r3, #36	; 0x24
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 ffbf 	bl	8005cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d80:	f000 fa8f 	bl	80052a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d84:	f000 fdee 	bl	8005964 <xTaskResumeAll>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d189      	bne.n	8004ca2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <xQueueReceive+0x1c8>)
 8004d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	e780      	b.n	8004ca2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da2:	f000 fa7e 	bl	80052a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004da6:	f000 fddd 	bl	8005964 <xTaskResumeAll>
 8004daa:	e77a      	b.n	8004ca2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dae:	f000 fa78 	bl	80052a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004db2:	f000 fdd7 	bl	8005964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db8:	f000 fac5 	bl	8005346 <prvIsQueueEmpty>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f43f af6f 	beq.w	8004ca2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004dc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3730      	adds	r7, #48	; 0x30
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08e      	sub	sp, #56	; 0x38
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10c      	bne.n	8004e0a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	b672      	cpsid	i
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	b662      	cpsie	i
 8004e04:	623b      	str	r3, [r7, #32]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00c      	beq.n	8004e2c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	b672      	cpsid	i
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	b662      	cpsie	i
 8004e26:	61fb      	str	r3, [r7, #28]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e2c:	f001 f980 	bl	8006130 <xTaskGetSchedulerState>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <xQueueSemaphoreTake+0x68>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <xQueueSemaphoreTake+0x6c>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <xQueueSemaphoreTake+0x6e>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10c      	bne.n	8004e60 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	b672      	cpsid	i
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	b662      	cpsie	i
 8004e5a:	61bb      	str	r3, [r7, #24]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e60:	f001 ffb4 	bl	8006dcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d024      	beq.n	8004eba <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	1e5a      	subs	r2, r3, #1
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d104      	bne.n	8004e8a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004e80:	f001 fad4 	bl	800642c <pvTaskIncrementMutexHeldCount>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00f      	beq.n	8004eb2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	3310      	adds	r3, #16
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 ff84 	bl	8005da4 <xTaskRemoveFromEventList>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ea2:	4b55      	ldr	r3, [pc, #340]	; (8004ff8 <xQueueSemaphoreTake+0x224>)
 8004ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eb2:	f001 ffbf 	bl	8006e34 <vPortExitCritical>
				return pdPASS;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e099      	b.n	8004fee <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d113      	bne.n	8004ee8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	b672      	cpsid	i
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	b662      	cpsie	i
 8004eda:	617b      	str	r3, [r7, #20]
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ee0:	f001 ffa8 	bl	8006e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e082      	b.n	8004fee <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eee:	f107 030c 	add.w	r3, r7, #12
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 ffbc 	bl	8005e70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004efc:	f001 ff9a 	bl	8006e34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f00:	f000 fd22 	bl	8005948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f04:	f001 ff62 	bl	8006dcc <vPortEnterCritical>
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f0e:	b25b      	sxtb	r3, r3
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d103      	bne.n	8004f1e <xQueueSemaphoreTake+0x14a>
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d103      	bne.n	8004f34 <xQueueSemaphoreTake+0x160>
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f34:	f001 ff7e 	bl	8006e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f38:	463a      	mov	r2, r7
 8004f3a:	f107 030c 	add.w	r3, r7, #12
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 ffab 	bl	8005e9c <xTaskCheckForTimeOut>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d132      	bne.n	8004fb2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f4e:	f000 f9fa 	bl	8005346 <prvIsQueueEmpty>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d026      	beq.n	8004fa6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d109      	bne.n	8004f74 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004f60:	f001 ff34 	bl	8006dcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f001 f8ff 	bl	800616c <xTaskPriorityInherit>
 8004f6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004f70:	f001 ff60 	bl	8006e34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 febd 	bl	8005cfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f84:	f000 f98d 	bl	80052a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f88:	f000 fcec 	bl	8005964 <xTaskResumeAll>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f47f af66 	bne.w	8004e60 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <xQueueSemaphoreTake+0x224>)
 8004f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	e75c      	b.n	8004e60 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fa8:	f000 f97b 	bl	80052a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fac:	f000 fcda 	bl	8005964 <xTaskResumeAll>
 8004fb0:	e756      	b.n	8004e60 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fb4:	f000 f975 	bl	80052a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fb8:	f000 fcd4 	bl	8005964 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fbe:	f000 f9c2 	bl	8005346 <prvIsQueueEmpty>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f43f af4b 	beq.w	8004e60 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00d      	beq.n	8004fec <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8004fd0:	f001 fefc 	bl	8006dcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fd6:	f000 f8bc 	bl	8005152 <prvGetDisinheritPriorityAfterTimeout>
 8004fda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 f99c 	bl	8006320 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004fe8:	f001 ff24 	bl	8006e34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3738      	adds	r7, #56	; 0x38
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	e000ed04 	.word	0xe000ed04

08004ffc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08e      	sub	sp, #56	; 0x38
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10c      	bne.n	800502c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	b672      	cpsid	i
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	b662      	cpsie	i
 8005026:	623b      	str	r3, [r7, #32]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d103      	bne.n	800503a <xQueueReceiveFromISR+0x3e>
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <xQueueReceiveFromISR+0x42>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <xQueueReceiveFromISR+0x44>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10c      	bne.n	800505e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	b672      	cpsid	i
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	b662      	cpsie	i
 8005058:	61fb      	str	r3, [r7, #28]
}
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800505e:	f001 ff9d 	bl	8006f9c <vPortValidateInterruptPriority>
	__asm volatile
 8005062:	f3ef 8211 	mrs	r2, BASEPRI
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	b672      	cpsid	i
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	b662      	cpsie	i
 800507a:	61ba      	str	r2, [r7, #24]
 800507c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800507e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005080:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	2b00      	cmp	r3, #0
 800508c:	d02f      	beq.n	80050ee <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800509c:	f000 f8db 	bl	8005256 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	1e5a      	subs	r2, r3, #1
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d112      	bne.n	80050d8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d016      	beq.n	80050e8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	3310      	adds	r3, #16
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fe70 	bl	8005da4 <xTaskRemoveFromEventList>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00e      	beq.n	80050e8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e007      	b.n	80050e8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050dc:	3301      	adds	r3, #1
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	b25a      	sxtb	r2, r3
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80050e8:	2301      	movs	r3, #1
 80050ea:	637b      	str	r3, [r7, #52]	; 0x34
 80050ec:	e001      	b.n	80050f2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
 80050f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f383 8811 	msr	BASEPRI, r3
}
 80050fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005100:	4618      	mov	r0, r3
 8005102:	3738      	adds	r7, #56	; 0x38
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10c      	bne.n	8005134 <vQueueDelete+0x2c>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	b672      	cpsid	i
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	b662      	cpsie	i
 800512e:	60bb      	str	r3, [r7, #8]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f95f 	bl	80053f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f002 f837 	bl	80071b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d006      	beq.n	8005170 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	e001      	b.n	8005174 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005174:	68fb      	ldr	r3, [r7, #12]
	}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b086      	sub	sp, #24
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10d      	bne.n	80051bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d14d      	bne.n	8005244 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f001 f845 	bl	800623c <xTaskPriorityDisinherit>
 80051b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	609a      	str	r2, [r3, #8]
 80051ba:	e043      	b.n	8005244 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d119      	bne.n	80051f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6858      	ldr	r0, [r3, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	461a      	mov	r2, r3
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	f002 f961 	bl	8007494 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	441a      	add	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d32b      	bcc.n	8005244 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	e026      	b.n	8005244 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68d8      	ldr	r0, [r3, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	461a      	mov	r2, r3
 8005200:	68b9      	ldr	r1, [r7, #8]
 8005202:	f002 f947 	bl	8007494 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	425b      	negs	r3, r3
 8005210:	441a      	add	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d207      	bcs.n	8005232 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	425b      	negs	r3, r3
 800522c:	441a      	add	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d105      	bne.n	8005244 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3b01      	subs	r3, #1
 8005242:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800524c:	697b      	ldr	r3, [r7, #20]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d018      	beq.n	800529a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	441a      	add	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d303      	bcc.n	800528a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68d9      	ldr	r1, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	461a      	mov	r2, r3
 8005294:	6838      	ldr	r0, [r7, #0]
 8005296:	f002 f8fd 	bl	8007494 <memcpy>
	}
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80052aa:	f001 fd8f 	bl	8006dcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052b6:	e011      	b.n	80052dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d012      	beq.n	80052e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3324      	adds	r3, #36	; 0x24
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fd6d 	bl	8005da4 <xTaskRemoveFromEventList>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80052d0:	f000 fe4a 	bl	8005f68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80052dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dce9      	bgt.n	80052b8 <prvUnlockQueue+0x16>
 80052e4:	e000      	b.n	80052e8 <prvUnlockQueue+0x46>
					break;
 80052e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	22ff      	movs	r2, #255	; 0xff
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052f0:	f001 fda0 	bl	8006e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052f4:	f001 fd6a 	bl	8006dcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005300:	e011      	b.n	8005326 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d012      	beq.n	8005330 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3310      	adds	r3, #16
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fd48 	bl	8005da4 <xTaskRemoveFromEventList>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800531a:	f000 fe25 	bl	8005f68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800531e:	7bbb      	ldrb	r3, [r7, #14]
 8005320:	3b01      	subs	r3, #1
 8005322:	b2db      	uxtb	r3, r3
 8005324:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005326:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800532a:	2b00      	cmp	r3, #0
 800532c:	dce9      	bgt.n	8005302 <prvUnlockQueue+0x60>
 800532e:	e000      	b.n	8005332 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005330:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	22ff      	movs	r2, #255	; 0xff
 8005336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800533a:	f001 fd7b 	bl	8006e34 <vPortExitCritical>
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800534e:	f001 fd3d 	bl	8006dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800535a:	2301      	movs	r3, #1
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e001      	b.n	8005364 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005364:	f001 fd66 	bl	8006e34 <vPortExitCritical>

	return xReturn;
 8005368:	68fb      	ldr	r3, [r7, #12]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800537a:	f001 fd27 	bl	8006dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	429a      	cmp	r2, r3
 8005388:	d102      	bne.n	8005390 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800538a:	2301      	movs	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e001      	b.n	8005394 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005394:	f001 fd4e 	bl	8006e34 <vPortExitCritical>

	return xReturn;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e014      	b.n	80053de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053b4:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <vQueueAddToRegistry+0x50>)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053c0:	490c      	ldr	r1, [pc, #48]	; (80053f4 <vQueueAddToRegistry+0x50>)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80053ca:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <vQueueAddToRegistry+0x50>)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80053d6:	e006      	b.n	80053e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b07      	cmp	r3, #7
 80053e2:	d9e7      	bls.n	80053b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	200007f0 	.word	0x200007f0

080053f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e016      	b.n	8005434 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005406:	4a10      	ldr	r2, [pc, #64]	; (8005448 <vQueueUnregisterQueue+0x50>)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	429a      	cmp	r2, r3
 8005414:	d10b      	bne.n	800542e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005416:	4a0c      	ldr	r2, [pc, #48]	; (8005448 <vQueueUnregisterQueue+0x50>)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2100      	movs	r1, #0
 800541c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005420:	4a09      	ldr	r2, [pc, #36]	; (8005448 <vQueueUnregisterQueue+0x50>)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4413      	add	r3, r2
 8005428:	2200      	movs	r2, #0
 800542a:	605a      	str	r2, [r3, #4]
				break;
 800542c:	e006      	b.n	800543c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b07      	cmp	r3, #7
 8005438:	d9e5      	bls.n	8005406 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	200007f0 	.word	0x200007f0

0800544c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800545c:	f001 fcb6 	bl	8006dcc <vPortEnterCritical>
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005466:	b25b      	sxtb	r3, r3
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d103      	bne.n	8005476 <vQueueWaitForMessageRestricted+0x2a>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800547c:	b25b      	sxtb	r3, r3
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005482:	d103      	bne.n	800548c <vQueueWaitForMessageRestricted+0x40>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800548c:	f001 fcd2 	bl	8006e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3324      	adds	r3, #36	; 0x24
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fc51 	bl	8005d48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80054a6:	6978      	ldr	r0, [r7, #20]
 80054a8:	f7ff fefb 	bl	80052a2 <prvUnlockQueue>
	}
 80054ac:	bf00      	nop
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08e      	sub	sp, #56	; 0x38
 80054b8:	af04      	add	r7, sp, #16
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10c      	bne.n	80054e2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	b672      	cpsid	i
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	b662      	cpsie	i
 80054dc:	623b      	str	r3, [r7, #32]
}
 80054de:	bf00      	nop
 80054e0:	e7fe      	b.n	80054e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10c      	bne.n	8005502 <xTaskCreateStatic+0x4e>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	b672      	cpsid	i
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	b662      	cpsie	i
 80054fc:	61fb      	str	r3, [r7, #28]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005502:	235c      	movs	r3, #92	; 0x5c
 8005504:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b5c      	cmp	r3, #92	; 0x5c
 800550a:	d00c      	beq.n	8005526 <xTaskCreateStatic+0x72>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	b672      	cpsid	i
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	b662      	cpsie	i
 8005520:	61bb      	str	r3, [r7, #24]
}
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005526:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01e      	beq.n	800556c <xTaskCreateStatic+0xb8>
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800553c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	2202      	movs	r2, #2
 8005542:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005546:	2300      	movs	r3, #0
 8005548:	9303      	str	r3, [sp, #12]
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	9302      	str	r3, [sp, #8]
 800554e:	f107 0314 	add.w	r3, r7, #20
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 f850 	bl	8005604 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005566:	f000 f8df 	bl	8005728 <prvAddNewTaskToReadyList>
 800556a:	e001      	b.n	8005570 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005570:	697b      	ldr	r3, [r7, #20]
	}
 8005572:	4618      	mov	r0, r3
 8005574:	3728      	adds	r7, #40	; 0x28
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800557a:	b580      	push	{r7, lr}
 800557c:	b08c      	sub	sp, #48	; 0x30
 800557e:	af04      	add	r7, sp, #16
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4618      	mov	r0, r3
 8005590:	f001 fd48 	bl	8007024 <pvPortMalloc>
 8005594:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800559c:	205c      	movs	r0, #92	; 0x5c
 800559e:	f001 fd41 	bl	8007024 <pvPortMalloc>
 80055a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
 80055b0:	e005      	b.n	80055be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055b2:	6978      	ldr	r0, [r7, #20]
 80055b4:	f001 fe00 	bl	80071b8 <vPortFree>
 80055b8:	e001      	b.n	80055be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d017      	beq.n	80055f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055cc:	88fa      	ldrh	r2, [r7, #6]
 80055ce:	2300      	movs	r3, #0
 80055d0:	9303      	str	r3, [sp, #12]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	9302      	str	r3, [sp, #8]
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f80e 	bl	8005604 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055e8:	69f8      	ldr	r0, [r7, #28]
 80055ea:	f000 f89d 	bl	8005728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055ee:	2301      	movs	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	e002      	b.n	80055fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055f4:	f04f 33ff 	mov.w	r3, #4294967295
 80055f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055fa:	69bb      	ldr	r3, [r7, #24]
	}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	461a      	mov	r2, r3
 800561c:	21a5      	movs	r1, #165	; 0xa5
 800561e:	f001 ff05 	bl	800742c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800562c:	440b      	add	r3, r1
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	b672      	cpsid	i
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	b662      	cpsie	i
 800565a:	617b      	str	r3, [r7, #20]
}
 800565c:	bf00      	nop
 800565e:	e7fe      	b.n	800565e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01f      	beq.n	80056a6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	e012      	b.n	8005692 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	7819      	ldrb	r1, [r3, #0]
 8005674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	3334      	adds	r3, #52	; 0x34
 800567c:	460a      	mov	r2, r1
 800567e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d006      	beq.n	800569a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	2b0f      	cmp	r3, #15
 8005696:	d9e9      	bls.n	800566c <prvInitialiseNewTask+0x68>
 8005698:	e000      	b.n	800569c <prvInitialiseNewTask+0x98>
			{
				break;
 800569a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056a4:	e003      	b.n	80056ae <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	2b37      	cmp	r3, #55	; 0x37
 80056b2:	d901      	bls.n	80056b8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056b4:	2337      	movs	r3, #55	; 0x37
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	2200      	movs	r2, #0
 80056c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	3304      	adds	r3, #4
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fe06 	bl	80042e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	3318      	adds	r3, #24
 80056d8:	4618      	mov	r0, r3
 80056da:	f7fe fe01 	bl	80042e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	2200      	movs	r2, #0
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	68f9      	ldr	r1, [r7, #12]
 8005706:	69b8      	ldr	r0, [r7, #24]
 8005708:	f001 fa54 	bl	8006bb4 <pxPortInitialiseStack>
 800570c:	4602      	mov	r2, r0
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800571e:	bf00      	nop
 8005720:	3720      	adds	r7, #32
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005730:	f001 fb4c 	bl	8006dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <prvAddNewTaskToReadyList+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3301      	adds	r3, #1
 800573a:	4a2c      	ldr	r2, [pc, #176]	; (80057ec <prvAddNewTaskToReadyList+0xc4>)
 800573c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800573e:	4b2c      	ldr	r3, [pc, #176]	; (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005746:	4a2a      	ldr	r2, [pc, #168]	; (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800574c:	4b27      	ldr	r3, [pc, #156]	; (80057ec <prvAddNewTaskToReadyList+0xc4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d110      	bne.n	8005776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005754:	f000 fc2c 	bl	8005fb0 <prvInitialiseTaskLists>
 8005758:	e00d      	b.n	8005776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <prvAddNewTaskToReadyList+0xcc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005762:	4b23      	ldr	r3, [pc, #140]	; (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	429a      	cmp	r2, r3
 800576e:	d802      	bhi.n	8005776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005770:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005776:	4b20      	ldr	r3, [pc, #128]	; (80057f8 <prvAddNewTaskToReadyList+0xd0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <prvAddNewTaskToReadyList+0xd0>)
 800577e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005780:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <prvAddNewTaskToReadyList+0xd0>)
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <prvAddNewTaskToReadyList+0xd4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d903      	bls.n	800579c <prvAddNewTaskToReadyList+0x74>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	4a18      	ldr	r2, [pc, #96]	; (80057fc <prvAddNewTaskToReadyList+0xd4>)
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4a15      	ldr	r2, [pc, #84]	; (8005800 <prvAddNewTaskToReadyList+0xd8>)
 80057aa:	441a      	add	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f7fe fda1 	bl	80042fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057b8:	f001 fb3c 	bl	8006e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <prvAddNewTaskToReadyList+0xcc>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00e      	beq.n	80057e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057c4:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <prvAddNewTaskToReadyList+0xc8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d207      	bcs.n	80057e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057d2:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <prvAddNewTaskToReadyList+0xdc>)
 80057d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000d04 	.word	0x20000d04
 80057f0:	20000830 	.word	0x20000830
 80057f4:	20000d10 	.word	0x20000d10
 80057f8:	20000d20 	.word	0x20000d20
 80057fc:	20000d0c 	.word	0x20000d0c
 8005800:	20000834 	.word	0x20000834
 8005804:	e000ed04 	.word	0xe000ed04

08005808 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d019      	beq.n	800584e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800581a:	4b14      	ldr	r3, [pc, #80]	; (800586c <vTaskDelay+0x64>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00c      	beq.n	800583c <vTaskDelay+0x34>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	b672      	cpsid	i
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	b662      	cpsie	i
 8005836:	60bb      	str	r3, [r7, #8]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800583c:	f000 f884 	bl	8005948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005840:	2100      	movs	r1, #0
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fe06 	bl	8006454 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005848:	f000 f88c 	bl	8005964 <xTaskResumeAll>
 800584c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d107      	bne.n	8005864 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <vTaskDelay+0x68>)
 8005856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000d2c 	.word	0x20000d2c
 8005870:	e000ed04 	.word	0xe000ed04

08005874 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	; 0x28
 8005878:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005882:	463a      	mov	r2, r7
 8005884:	1d39      	adds	r1, r7, #4
 8005886:	f107 0308 	add.w	r3, r7, #8
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fcd4 	bl	8004238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	9202      	str	r2, [sp, #8]
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	2300      	movs	r3, #0
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	2300      	movs	r3, #0
 80058a0:	460a      	mov	r2, r1
 80058a2:	4923      	ldr	r1, [pc, #140]	; (8005930 <vTaskStartScheduler+0xbc>)
 80058a4:	4823      	ldr	r0, [pc, #140]	; (8005934 <vTaskStartScheduler+0xc0>)
 80058a6:	f7ff fe05 	bl	80054b4 <xTaskCreateStatic>
 80058aa:	4603      	mov	r3, r0
 80058ac:	4a22      	ldr	r2, [pc, #136]	; (8005938 <vTaskStartScheduler+0xc4>)
 80058ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058b0:	4b21      	ldr	r3, [pc, #132]	; (8005938 <vTaskStartScheduler+0xc4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058b8:	2301      	movs	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e001      	b.n	80058c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d102      	bne.n	80058ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058c8:	f000 fe18 	bl	80064fc <xTimerCreateTimerTask>
 80058cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d118      	bne.n	8005906 <vTaskStartScheduler+0x92>
	__asm volatile
 80058d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d8:	b672      	cpsid	i
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	b662      	cpsie	i
 80058e8:	613b      	str	r3, [r7, #16]
}
 80058ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058ec:	4b13      	ldr	r3, [pc, #76]	; (800593c <vTaskStartScheduler+0xc8>)
 80058ee:	f04f 32ff 	mov.w	r2, #4294967295
 80058f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058f4:	4b12      	ldr	r3, [pc, #72]	; (8005940 <vTaskStartScheduler+0xcc>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <vTaskStartScheduler+0xd0>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005900:	f001 f9e6 	bl	8006cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005904:	e010      	b.n	8005928 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d10c      	bne.n	8005928 <vTaskStartScheduler+0xb4>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	b672      	cpsid	i
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	b662      	cpsie	i
 8005922:	60fb      	str	r3, [r7, #12]
}
 8005924:	bf00      	nop
 8005926:	e7fe      	b.n	8005926 <vTaskStartScheduler+0xb2>
}
 8005928:	bf00      	nop
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	08007df4 	.word	0x08007df4
 8005934:	08005f81 	.word	0x08005f81
 8005938:	20000d28 	.word	0x20000d28
 800593c:	20000d24 	.word	0x20000d24
 8005940:	20000d10 	.word	0x20000d10
 8005944:	20000d08 	.word	0x20000d08

08005948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <vTaskSuspendAll+0x18>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3301      	adds	r3, #1
 8005952:	4a03      	ldr	r2, [pc, #12]	; (8005960 <vTaskSuspendAll+0x18>)
 8005954:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005956:	bf00      	nop
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20000d2c 	.word	0x20000d2c

08005964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005972:	4b43      	ldr	r3, [pc, #268]	; (8005a80 <xTaskResumeAll+0x11c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10c      	bne.n	8005994 <xTaskResumeAll+0x30>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	b672      	cpsid	i
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	b662      	cpsie	i
 800598e:	603b      	str	r3, [r7, #0]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005994:	f001 fa1a 	bl	8006dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005998:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <xTaskResumeAll+0x11c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3b01      	subs	r3, #1
 800599e:	4a38      	ldr	r2, [pc, #224]	; (8005a80 <xTaskResumeAll+0x11c>)
 80059a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a2:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <xTaskResumeAll+0x11c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d162      	bne.n	8005a70 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059aa:	4b36      	ldr	r3, [pc, #216]	; (8005a84 <xTaskResumeAll+0x120>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d05e      	beq.n	8005a70 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059b2:	e02f      	b.n	8005a14 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b4:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <xTaskResumeAll+0x124>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	3318      	adds	r3, #24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe fcf7 	bl	80043b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	3304      	adds	r3, #4
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fcf2 	bl	80043b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d4:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <xTaskResumeAll+0x128>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d903      	bls.n	80059e4 <xTaskResumeAll+0x80>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	4a2a      	ldr	r2, [pc, #168]	; (8005a8c <xTaskResumeAll+0x128>)
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <xTaskResumeAll+0x12c>)
 80059f2:	441a      	add	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7fe fc7d 	bl	80042fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	4b23      	ldr	r3, [pc, #140]	; (8005a94 <xTaskResumeAll+0x130>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d302      	bcc.n	8005a14 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005a0e:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <xTaskResumeAll+0x134>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a14:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <xTaskResumeAll+0x124>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1cb      	bne.n	80059b4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a22:	f000 fb65 	bl	80060f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a26:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <xTaskResumeAll+0x138>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d010      	beq.n	8005a54 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a32:	f000 f847 	bl	8005ac4 <xTaskIncrementTick>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005a3c:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <xTaskResumeAll+0x134>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1f1      	bne.n	8005a32 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005a4e:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <xTaskResumeAll+0x138>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a54:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <xTaskResumeAll+0x134>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d009      	beq.n	8005a70 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a60:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <xTaskResumeAll+0x13c>)
 8005a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a70:	f001 f9e0 	bl	8006e34 <vPortExitCritical>

	return xAlreadyYielded;
 8005a74:	68bb      	ldr	r3, [r7, #8]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000d2c 	.word	0x20000d2c
 8005a84:	20000d04 	.word	0x20000d04
 8005a88:	20000cc4 	.word	0x20000cc4
 8005a8c:	20000d0c 	.word	0x20000d0c
 8005a90:	20000834 	.word	0x20000834
 8005a94:	20000830 	.word	0x20000830
 8005a98:	20000d18 	.word	0x20000d18
 8005a9c:	20000d14 	.word	0x20000d14
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <xTaskGetTickCount+0x1c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ab0:	687b      	ldr	r3, [r7, #4]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000d08 	.word	0x20000d08

08005ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ace:	4b50      	ldr	r3, [pc, #320]	; (8005c10 <xTaskIncrementTick+0x14c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f040 808b 	bne.w	8005bee <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ad8:	4b4e      	ldr	r3, [pc, #312]	; (8005c14 <xTaskIncrementTick+0x150>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3301      	adds	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ae0:	4a4c      	ldr	r2, [pc, #304]	; (8005c14 <xTaskIncrementTick+0x150>)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d122      	bne.n	8005b32 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005aec:	4b4a      	ldr	r3, [pc, #296]	; (8005c18 <xTaskIncrementTick+0x154>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00c      	beq.n	8005b10 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	b672      	cpsid	i
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	b662      	cpsie	i
 8005b0a:	603b      	str	r3, [r7, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <xTaskIncrementTick+0x4a>
 8005b10:	4b41      	ldr	r3, [pc, #260]	; (8005c18 <xTaskIncrementTick+0x154>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <xTaskIncrementTick+0x158>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a3f      	ldr	r2, [pc, #252]	; (8005c18 <xTaskIncrementTick+0x154>)
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	4a3f      	ldr	r2, [pc, #252]	; (8005c1c <xTaskIncrementTick+0x158>)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <xTaskIncrementTick+0x15c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	4a3d      	ldr	r2, [pc, #244]	; (8005c20 <xTaskIncrementTick+0x15c>)
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	f000 fadf 	bl	80060f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b32:	4b3c      	ldr	r3, [pc, #240]	; (8005c24 <xTaskIncrementTick+0x160>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d349      	bcc.n	8005bd0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b3c:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <xTaskIncrementTick+0x154>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d104      	bne.n	8005b50 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b46:	4b37      	ldr	r3, [pc, #220]	; (8005c24 <xTaskIncrementTick+0x160>)
 8005b48:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4c:	601a      	str	r2, [r3, #0]
					break;
 8005b4e:	e03f      	b.n	8005bd0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b50:	4b31      	ldr	r3, [pc, #196]	; (8005c18 <xTaskIncrementTick+0x154>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d203      	bcs.n	8005b70 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b68:	4a2e      	ldr	r2, [pc, #184]	; (8005c24 <xTaskIncrementTick+0x160>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b6e:	e02f      	b.n	8005bd0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe fc1d 	bl	80043b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d004      	beq.n	8005b8c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	3318      	adds	r3, #24
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fc14 	bl	80043b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b90:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <xTaskIncrementTick+0x164>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d903      	bls.n	8005ba0 <xTaskIncrementTick+0xdc>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	4a22      	ldr	r2, [pc, #136]	; (8005c28 <xTaskIncrementTick+0x164>)
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4a1f      	ldr	r2, [pc, #124]	; (8005c2c <xTaskIncrementTick+0x168>)
 8005bae:	441a      	add	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7fe fb9f 	bl	80042fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <xTaskIncrementTick+0x16c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d3b8      	bcc.n	8005b3c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bce:	e7b5      	b.n	8005b3c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bd0:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <xTaskIncrementTick+0x16c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd6:	4915      	ldr	r1, [pc, #84]	; (8005c2c <xTaskIncrementTick+0x168>)
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d907      	bls.n	8005bf8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005be8:	2301      	movs	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e004      	b.n	8005bf8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bee:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <xTaskIncrementTick+0x170>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	4a0f      	ldr	r2, [pc, #60]	; (8005c34 <xTaskIncrementTick+0x170>)
 8005bf6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <xTaskIncrementTick+0x174>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005c04:	697b      	ldr	r3, [r7, #20]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000d2c 	.word	0x20000d2c
 8005c14:	20000d08 	.word	0x20000d08
 8005c18:	20000cbc 	.word	0x20000cbc
 8005c1c:	20000cc0 	.word	0x20000cc0
 8005c20:	20000d1c 	.word	0x20000d1c
 8005c24:	20000d24 	.word	0x20000d24
 8005c28:	20000d0c 	.word	0x20000d0c
 8005c2c:	20000834 	.word	0x20000834
 8005c30:	20000830 	.word	0x20000830
 8005c34:	20000d14 	.word	0x20000d14
 8005c38:	20000d18 	.word	0x20000d18

08005c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c42:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <vTaskSwitchContext+0xac>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c4a:	4b28      	ldr	r3, [pc, #160]	; (8005cec <vTaskSwitchContext+0xb0>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c50:	e043      	b.n	8005cda <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8005c52:	4b26      	ldr	r3, [pc, #152]	; (8005cec <vTaskSwitchContext+0xb0>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c58:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <vTaskSwitchContext+0xb4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e012      	b.n	8005c86 <vTaskSwitchContext+0x4a>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10c      	bne.n	8005c80 <vTaskSwitchContext+0x44>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	b672      	cpsid	i
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	b662      	cpsie	i
 8005c7a:	607b      	str	r3, [r7, #4]
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <vTaskSwitchContext+0x42>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	491b      	ldr	r1, [pc, #108]	; (8005cf4 <vTaskSwitchContext+0xb8>)
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0e2      	beq.n	8005c60 <vTaskSwitchContext+0x24>
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4a13      	ldr	r2, [pc, #76]	; (8005cf4 <vTaskSwitchContext+0xb8>)
 8005ca6:	4413      	add	r3, r2
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	605a      	str	r2, [r3, #4]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d104      	bne.n	8005cca <vTaskSwitchContext+0x8e>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	605a      	str	r2, [r3, #4]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <vTaskSwitchContext+0xbc>)
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	4a06      	ldr	r2, [pc, #24]	; (8005cf0 <vTaskSwitchContext+0xb4>)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6013      	str	r3, [r2, #0]
}
 8005cda:	bf00      	nop
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	20000d2c 	.word	0x20000d2c
 8005cec:	20000d18 	.word	0x20000d18
 8005cf0:	20000d0c 	.word	0x20000d0c
 8005cf4:	20000834 	.word	0x20000834
 8005cf8:	20000830 	.word	0x20000830

08005cfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10c      	bne.n	8005d26 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	b672      	cpsid	i
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	b662      	cpsie	i
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <vTaskPlaceOnEventList+0x48>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3318      	adds	r3, #24
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fe fb07 	bl	8004342 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d34:	2101      	movs	r1, #1
 8005d36:	6838      	ldr	r0, [r7, #0]
 8005d38:	f000 fb8c 	bl	8006454 <prvAddCurrentTaskToDelayedList>
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000830 	.word	0x20000830

08005d48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10c      	bne.n	8005d74 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	b672      	cpsid	i
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	b662      	cpsie	i
 8005d6e:	617b      	str	r3, [r7, #20]
}
 8005d70:	bf00      	nop
 8005d72:	e7fe      	b.n	8005d72 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d74:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <vTaskPlaceOnEventListRestricted+0x58>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3318      	adds	r3, #24
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7fe fabc 	bl	80042fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8005d88:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	68b8      	ldr	r0, [r7, #8]
 8005d92:	f000 fb5f 	bl	8006454 <prvAddCurrentTaskToDelayedList>
	}
 8005d96:	bf00      	nop
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000830 	.word	0x20000830

08005da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10c      	bne.n	8005dd4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	b672      	cpsid	i
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	b662      	cpsie	i
 8005dce:	60fb      	str	r3, [r7, #12]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	3318      	adds	r3, #24
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe faeb 	bl	80043b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dde:	4b1e      	ldr	r3, [pc, #120]	; (8005e58 <xTaskRemoveFromEventList+0xb4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d11d      	bne.n	8005e22 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	3304      	adds	r3, #4
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe fae2 	bl	80043b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <xTaskRemoveFromEventList+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d903      	bls.n	8005e04 <xTaskRemoveFromEventList+0x60>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <xTaskRemoveFromEventList+0xb8>)
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <xTaskRemoveFromEventList+0xbc>)
 8005e12:	441a      	add	r2, r3
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fe fa6d 	bl	80042fa <vListInsertEnd>
 8005e20:	e005      	b.n	8005e2e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3318      	adds	r3, #24
 8005e26:	4619      	mov	r1, r3
 8005e28:	480e      	ldr	r0, [pc, #56]	; (8005e64 <xTaskRemoveFromEventList+0xc0>)
 8005e2a:	f7fe fa66 	bl	80042fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e32:	4b0d      	ldr	r3, [pc, #52]	; (8005e68 <xTaskRemoveFromEventList+0xc4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d905      	bls.n	8005e48 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <xTaskRemoveFromEventList+0xc8>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e001      	b.n	8005e4c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005e4c:	697b      	ldr	r3, [r7, #20]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000d2c 	.word	0x20000d2c
 8005e5c:	20000d0c 	.word	0x20000d0c
 8005e60:	20000834 	.word	0x20000834
 8005e64:	20000cc4 	.word	0x20000cc4
 8005e68:	20000830 	.word	0x20000830
 8005e6c:	20000d18 	.word	0x20000d18

08005e70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <vTaskInternalSetTimeOutState+0x24>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <vTaskInternalSetTimeOutState+0x28>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	605a      	str	r2, [r3, #4]
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	20000d1c 	.word	0x20000d1c
 8005e98:	20000d08 	.word	0x20000d08

08005e9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10c      	bne.n	8005ec6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	b672      	cpsid	i
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	b662      	cpsie	i
 8005ec0:	613b      	str	r3, [r7, #16]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10c      	bne.n	8005ee6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	b672      	cpsid	i
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	b662      	cpsie	i
 8005ee0:	60fb      	str	r3, [r7, #12]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005ee6:	f000 ff71 	bl	8006dcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005eea:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <xTaskCheckForTimeOut+0xc4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d102      	bne.n	8005f0a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	e023      	b.n	8005f52 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <xTaskCheckForTimeOut+0xc8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d007      	beq.n	8005f26 <xTaskCheckForTimeOut+0x8a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d302      	bcc.n	8005f26 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005f20:	2301      	movs	r3, #1
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	e015      	b.n	8005f52 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d20b      	bcs.n	8005f48 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	1ad2      	subs	r2, r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ff97 	bl	8005e70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	61fb      	str	r3, [r7, #28]
 8005f46:	e004      	b.n	8005f52 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005f52:	f000 ff6f 	bl	8006e34 <vPortExitCritical>

	return xReturn;
 8005f56:	69fb      	ldr	r3, [r7, #28]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	20000d08 	.word	0x20000d08
 8005f64:	20000d1c 	.word	0x20000d1c

08005f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <vTaskMissedYield+0x14>)
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
}
 8005f72:	bf00      	nop
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	20000d18 	.word	0x20000d18

08005f80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f88:	f000 f852 	bl	8006030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f8c:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <prvIdleTask+0x28>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d9f9      	bls.n	8005f88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <prvIdleTask+0x2c>)
 8005f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005fa4:	e7f0      	b.n	8005f88 <prvIdleTask+0x8>
 8005fa6:	bf00      	nop
 8005fa8:	20000834 	.word	0x20000834
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	e00c      	b.n	8005fd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4a12      	ldr	r2, [pc, #72]	; (8006010 <prvInitialiseTaskLists+0x60>)
 8005fc8:	4413      	add	r3, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe f968 	bl	80042a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b37      	cmp	r3, #55	; 0x37
 8005fda:	d9ef      	bls.n	8005fbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005fdc:	480d      	ldr	r0, [pc, #52]	; (8006014 <prvInitialiseTaskLists+0x64>)
 8005fde:	f7fe f95f 	bl	80042a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fe2:	480d      	ldr	r0, [pc, #52]	; (8006018 <prvInitialiseTaskLists+0x68>)
 8005fe4:	f7fe f95c 	bl	80042a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fe8:	480c      	ldr	r0, [pc, #48]	; (800601c <prvInitialiseTaskLists+0x6c>)
 8005fea:	f7fe f959 	bl	80042a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005fee:	480c      	ldr	r0, [pc, #48]	; (8006020 <prvInitialiseTaskLists+0x70>)
 8005ff0:	f7fe f956 	bl	80042a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ff4:	480b      	ldr	r0, [pc, #44]	; (8006024 <prvInitialiseTaskLists+0x74>)
 8005ff6:	f7fe f953 	bl	80042a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <prvInitialiseTaskLists+0x78>)
 8005ffc:	4a05      	ldr	r2, [pc, #20]	; (8006014 <prvInitialiseTaskLists+0x64>)
 8005ffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <prvInitialiseTaskLists+0x7c>)
 8006002:	4a05      	ldr	r2, [pc, #20]	; (8006018 <prvInitialiseTaskLists+0x68>)
 8006004:	601a      	str	r2, [r3, #0]
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000834 	.word	0x20000834
 8006014:	20000c94 	.word	0x20000c94
 8006018:	20000ca8 	.word	0x20000ca8
 800601c:	20000cc4 	.word	0x20000cc4
 8006020:	20000cd8 	.word	0x20000cd8
 8006024:	20000cf0 	.word	0x20000cf0
 8006028:	20000cbc 	.word	0x20000cbc
 800602c:	20000cc0 	.word	0x20000cc0

08006030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006036:	e019      	b.n	800606c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006038:	f000 fec8 	bl	8006dcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <prvCheckTasksWaitingTermination+0x50>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	4618      	mov	r0, r3
 800604a:	f7fe f9b3 	bl	80043b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800604e:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <prvCheckTasksWaitingTermination+0x54>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3b01      	subs	r3, #1
 8006054:	4a0b      	ldr	r2, [pc, #44]	; (8006084 <prvCheckTasksWaitingTermination+0x54>)
 8006056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <prvCheckTasksWaitingTermination+0x58>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3b01      	subs	r3, #1
 800605e:	4a0a      	ldr	r2, [pc, #40]	; (8006088 <prvCheckTasksWaitingTermination+0x58>)
 8006060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006062:	f000 fee7 	bl	8006e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f810 	bl	800608c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <prvCheckTasksWaitingTermination+0x58>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e1      	bne.n	8006038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000cd8 	.word	0x20000cd8
 8006084:	20000d04 	.word	0x20000d04
 8006088:	20000cec 	.word	0x20000cec

0800608c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800609a:	2b00      	cmp	r3, #0
 800609c:	d108      	bne.n	80060b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 f888 	bl	80071b8 <vPortFree>
				vPortFree( pxTCB );
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 f885 	bl	80071b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80060ae:	e01a      	b.n	80060e6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d103      	bne.n	80060c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 f87c 	bl	80071b8 <vPortFree>
	}
 80060c0:	e011      	b.n	80060e6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d00c      	beq.n	80060e6 <prvDeleteTCB+0x5a>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	b672      	cpsid	i
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	b662      	cpsie	i
 80060e0:	60fb      	str	r3, [r7, #12]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <prvDeleteTCB+0x58>
	}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <prvResetNextTaskUnblockTime+0x38>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <prvResetNextTaskUnblockTime+0x3c>)
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006108:	e008      	b.n	800611c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <prvResetNextTaskUnblockTime+0x38>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4a04      	ldr	r2, [pc, #16]	; (800612c <prvResetNextTaskUnblockTime+0x3c>)
 800611a:	6013      	str	r3, [r2, #0]
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	20000cbc 	.word	0x20000cbc
 800612c:	20000d24 	.word	0x20000d24

08006130 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <xTaskGetSchedulerState+0x34>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d102      	bne.n	8006144 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800613e:	2301      	movs	r3, #1
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	e008      	b.n	8006156 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006144:	4b08      	ldr	r3, [pc, #32]	; (8006168 <xTaskGetSchedulerState+0x38>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800614c:	2302      	movs	r3, #2
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	e001      	b.n	8006156 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006152:	2300      	movs	r3, #0
 8006154:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006156:	687b      	ldr	r3, [r7, #4]
	}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	20000d10 	.word	0x20000d10
 8006168:	20000d2c 	.word	0x20000d2c

0800616c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d051      	beq.n	8006226 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006186:	4b2a      	ldr	r3, [pc, #168]	; (8006230 <xTaskPriorityInherit+0xc4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	429a      	cmp	r2, r3
 800618e:	d241      	bcs.n	8006214 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	db06      	blt.n	80061a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006198:	4b25      	ldr	r3, [pc, #148]	; (8006230 <xTaskPriorityInherit+0xc4>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6959      	ldr	r1, [r3, #20]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <xTaskPriorityInherit+0xc8>)
 80061b8:	4413      	add	r3, r2
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d122      	bne.n	8006204 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	3304      	adds	r3, #4
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe f8f6 	bl	80043b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80061c8:	4b19      	ldr	r3, [pc, #100]	; (8006230 <xTaskPriorityInherit+0xc4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <xTaskPriorityInherit+0xcc>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d903      	bls.n	80061e6 <xTaskPriorityInherit+0x7a>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	4a15      	ldr	r2, [pc, #84]	; (8006238 <xTaskPriorityInherit+0xcc>)
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4a10      	ldr	r2, [pc, #64]	; (8006234 <xTaskPriorityInherit+0xc8>)
 80061f4:	441a      	add	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fe f87c 	bl	80042fa <vListInsertEnd>
 8006202:	e004      	b.n	800620e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <xTaskPriorityInherit+0xc4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800620e:	2301      	movs	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e008      	b.n	8006226 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006218:	4b05      	ldr	r3, [pc, #20]	; (8006230 <xTaskPriorityInherit+0xc4>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d201      	bcs.n	8006226 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006222:	2301      	movs	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006226:	68fb      	ldr	r3, [r7, #12]
	}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000830 	.word	0x20000830
 8006234:	20000834 	.word	0x20000834
 8006238:	20000d0c 	.word	0x20000d0c

0800623c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d05a      	beq.n	8006308 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006252:	4b30      	ldr	r3, [pc, #192]	; (8006314 <xTaskPriorityDisinherit+0xd8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	429a      	cmp	r2, r3
 800625a:	d00c      	beq.n	8006276 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	b672      	cpsid	i
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	b662      	cpsie	i
 8006270:	60fb      	str	r3, [r7, #12]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10c      	bne.n	8006298 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	b672      	cpsid	i
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	b662      	cpsie	i
 8006292:	60bb      	str	r3, [r7, #8]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	1e5a      	subs	r2, r3, #1
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d02c      	beq.n	8006308 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d128      	bne.n	8006308 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe f87a 	bl	80043b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <xTaskPriorityDisinherit+0xdc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d903      	bls.n	80062e8 <xTaskPriorityDisinherit+0xac>
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	4a0c      	ldr	r2, [pc, #48]	; (8006318 <xTaskPriorityDisinherit+0xdc>)
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4a09      	ldr	r2, [pc, #36]	; (800631c <xTaskPriorityDisinherit+0xe0>)
 80062f6:	441a      	add	r2, r3
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fd fffb 	bl	80042fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006304:	2301      	movs	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006308:	697b      	ldr	r3, [r7, #20]
	}
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000830 	.word	0x20000830
 8006318:	20000d0c 	.word	0x20000d0c
 800631c:	20000834 	.word	0x20000834

08006320 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006320:	b580      	push	{r7, lr}
 8006322:	b088      	sub	sp, #32
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800632e:	2301      	movs	r3, #1
 8006330:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d06e      	beq.n	8006416 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10c      	bne.n	800635a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	b672      	cpsid	i
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	b662      	cpsie	i
 8006354:	60fb      	str	r3, [r7, #12]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d902      	bls.n	800636a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	e002      	b.n	8006370 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	429a      	cmp	r2, r3
 8006378:	d04d      	beq.n	8006416 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	429a      	cmp	r2, r3
 8006382:	d148      	bne.n	8006416 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006384:	4b26      	ldr	r3, [pc, #152]	; (8006420 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	429a      	cmp	r2, r3
 800638c:	d10c      	bne.n	80063a8 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	b672      	cpsid	i
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	b662      	cpsie	i
 80063a2:	60bb      	str	r3, [r7, #8]
}
 80063a4:	bf00      	nop
 80063a6:	e7fe      	b.n	80063a6 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	db04      	blt.n	80063c6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	6959      	ldr	r1, [r3, #20]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80063d6:	4413      	add	r3, r2
 80063d8:	4299      	cmp	r1, r3
 80063da:	d11c      	bne.n	8006416 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	3304      	adds	r3, #4
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fd ffe7 	bl	80043b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d903      	bls.n	80063fa <vTaskPriorityDisinheritAfterTimeout+0xda>
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	4a0c      	ldr	r2, [pc, #48]	; (8006428 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fe:	4613      	mov	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4a07      	ldr	r2, [pc, #28]	; (8006424 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006408:	441a      	add	r2, r3
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	3304      	adds	r3, #4
 800640e:	4619      	mov	r1, r3
 8006410:	4610      	mov	r0, r2
 8006412:	f7fd ff72 	bl	80042fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006416:	bf00      	nop
 8006418:	3720      	adds	r7, #32
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000830 	.word	0x20000830
 8006424:	20000834 	.word	0x20000834
 8006428:	20000d0c 	.word	0x20000d0c

0800642c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <pvTaskIncrementMutexHeldCount+0x24>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <pvTaskIncrementMutexHeldCount+0x24>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800643e:	3201      	adds	r2, #1
 8006440:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006442:	4b03      	ldr	r3, [pc, #12]	; (8006450 <pvTaskIncrementMutexHeldCount+0x24>)
 8006444:	681b      	ldr	r3, [r3, #0]
	}
 8006446:	4618      	mov	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20000830 	.word	0x20000830

08006454 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800645e:	4b21      	ldr	r3, [pc, #132]	; (80064e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006464:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3304      	adds	r3, #4
 800646a:	4618      	mov	r0, r3
 800646c:	f7fd ffa2 	bl	80043b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d10a      	bne.n	800648e <prvAddCurrentTaskToDelayedList+0x3a>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800647e:	4b1a      	ldr	r3, [pc, #104]	; (80064e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4819      	ldr	r0, [pc, #100]	; (80064ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006488:	f7fd ff37 	bl	80042fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800648c:	e026      	b.n	80064dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4413      	add	r3, r2
 8006494:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d209      	bcs.n	80064ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064a6:	4b12      	ldr	r3, [pc, #72]	; (80064f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b0f      	ldr	r3, [pc, #60]	; (80064e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f7fd ff45 	bl	8004342 <vListInsert>
}
 80064b8:	e010      	b.n	80064dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ba:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3304      	adds	r3, #4
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f7fd ff3b 	bl	8004342 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d202      	bcs.n	80064dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064d6:	4a08      	ldr	r2, [pc, #32]	; (80064f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6013      	str	r3, [r2, #0]
}
 80064dc:	bf00      	nop
 80064de:	3710      	adds	r7, #16
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000d08 	.word	0x20000d08
 80064e8:	20000830 	.word	0x20000830
 80064ec:	20000cf0 	.word	0x20000cf0
 80064f0:	20000cc0 	.word	0x20000cc0
 80064f4:	20000cbc 	.word	0x20000cbc
 80064f8:	20000d24 	.word	0x20000d24

080064fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006506:	f000 fb15 	bl	8006b34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <xTimerCreateTimerTask+0x84>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d021      	beq.n	8006556 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800651a:	1d3a      	adds	r2, r7, #4
 800651c:	f107 0108 	add.w	r1, r7, #8
 8006520:	f107 030c 	add.w	r3, r7, #12
 8006524:	4618      	mov	r0, r3
 8006526:	f7fd fea1 	bl	800426c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	9202      	str	r2, [sp, #8]
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	2302      	movs	r3, #2
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	2300      	movs	r3, #0
 800653a:	460a      	mov	r2, r1
 800653c:	4911      	ldr	r1, [pc, #68]	; (8006584 <xTimerCreateTimerTask+0x88>)
 800653e:	4812      	ldr	r0, [pc, #72]	; (8006588 <xTimerCreateTimerTask+0x8c>)
 8006540:	f7fe ffb8 	bl	80054b4 <xTaskCreateStatic>
 8006544:	4603      	mov	r3, r0
 8006546:	4a11      	ldr	r2, [pc, #68]	; (800658c <xTimerCreateTimerTask+0x90>)
 8006548:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <xTimerCreateTimerTask+0x90>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006552:	2301      	movs	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10c      	bne.n	8006576 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	b672      	cpsid	i
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	b662      	cpsie	i
 8006570:	613b      	str	r3, [r7, #16]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006576:	697b      	ldr	r3, [r7, #20]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000d60 	.word	0x20000d60
 8006584:	08007dfc 	.word	0x08007dfc
 8006588:	080066cd 	.word	0x080066cd
 800658c:	20000d64 	.word	0x20000d64

08006590 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800659e:	2300      	movs	r3, #0
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10c      	bne.n	80065c2 <xTimerGenericCommand+0x32>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	b672      	cpsid	i
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	b662      	cpsie	i
 80065bc:	623b      	str	r3, [r7, #32]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065c2:	4b1a      	ldr	r3, [pc, #104]	; (800662c <xTimerGenericCommand+0x9c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d02a      	beq.n	8006620 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b05      	cmp	r3, #5
 80065da:	dc18      	bgt.n	800660e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065dc:	f7ff fda8 	bl	8006130 <xTaskGetSchedulerState>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d109      	bne.n	80065fa <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065e6:	4b11      	ldr	r3, [pc, #68]	; (800662c <xTimerGenericCommand+0x9c>)
 80065e8:	6818      	ldr	r0, [r3, #0]
 80065ea:	f107 0110 	add.w	r1, r7, #16
 80065ee:	2300      	movs	r3, #0
 80065f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f2:	f7fe f8cd 	bl	8004790 <xQueueGenericSend>
 80065f6:	6278      	str	r0, [r7, #36]	; 0x24
 80065f8:	e012      	b.n	8006620 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <xTimerGenericCommand+0x9c>)
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f107 0110 	add.w	r1, r7, #16
 8006602:	2300      	movs	r3, #0
 8006604:	2200      	movs	r2, #0
 8006606:	f7fe f8c3 	bl	8004790 <xQueueGenericSend>
 800660a:	6278      	str	r0, [r7, #36]	; 0x24
 800660c:	e008      	b.n	8006620 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <xTimerGenericCommand+0x9c>)
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	f107 0110 	add.w	r1, r7, #16
 8006616:	2300      	movs	r3, #0
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	f7fe f9bf 	bl	800499c <xQueueGenericSendFromISR>
 800661e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006622:	4618      	mov	r0, r3
 8006624:	3728      	adds	r7, #40	; 0x28
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000d60 	.word	0x20000d60

08006630 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af02      	add	r7, sp, #8
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <prvProcessExpiredTimer+0x98>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	3304      	adds	r3, #4
 8006648:	4618      	mov	r0, r3
 800664a:	f7fd feb3 	bl	80043b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006654:	f003 0304 	and.w	r3, r3, #4
 8006658:	2b00      	cmp	r3, #0
 800665a:	d024      	beq.n	80066a6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	699a      	ldr	r2, [r3, #24]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	18d1      	adds	r1, r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	6978      	ldr	r0, [r7, #20]
 800666a:	f000 f8d3 	bl	8006814 <prvInsertTimerInActiveList>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d021      	beq.n	80066b8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006674:	2300      	movs	r3, #0
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	2300      	movs	r3, #0
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	2100      	movs	r1, #0
 800667e:	6978      	ldr	r0, [r7, #20]
 8006680:	f7ff ff86 	bl	8006590 <xTimerGenericCommand>
 8006684:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d115      	bne.n	80066b8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	b672      	cpsid	i
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	b662      	cpsie	i
 80066a0:	60fb      	str	r3, [r7, #12]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	6978      	ldr	r0, [r7, #20]
 80066be:	4798      	blx	r3
}
 80066c0:	bf00      	nop
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000d58 	.word	0x20000d58

080066cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066d4:	f107 0308 	add.w	r3, r7, #8
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 f857 	bl	800678c <prvGetNextExpireTime>
 80066de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4619      	mov	r1, r3
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f803 	bl	80066f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066ea:	f000 f8d5 	bl	8006898 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066ee:	e7f1      	b.n	80066d4 <prvTimerTask+0x8>

080066f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066fa:	f7ff f925 	bl	8005948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f866 	bl	80067d4 <prvSampleTimeNow>
 8006708:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d130      	bne.n	8006772 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <prvProcessTimerOrBlockTask+0x3c>
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	429a      	cmp	r2, r3
 800671c:	d806      	bhi.n	800672c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800671e:	f7ff f921 	bl	8005964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff ff83 	bl	8006630 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800672a:	e024      	b.n	8006776 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006732:	4b13      	ldr	r3, [pc, #76]	; (8006780 <prvProcessTimerOrBlockTask+0x90>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <prvProcessTimerOrBlockTask+0x50>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <prvProcessTimerOrBlockTask+0x52>
 8006740:	2300      	movs	r3, #0
 8006742:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006744:	4b0f      	ldr	r3, [pc, #60]	; (8006784 <prvProcessTimerOrBlockTask+0x94>)
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4619      	mov	r1, r3
 8006752:	f7fe fe7b 	bl	800544c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006756:	f7ff f905 	bl	8005964 <xTaskResumeAll>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006760:	4b09      	ldr	r3, [pc, #36]	; (8006788 <prvProcessTimerOrBlockTask+0x98>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
}
 8006770:	e001      	b.n	8006776 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006772:	f7ff f8f7 	bl	8005964 <xTaskResumeAll>
}
 8006776:	bf00      	nop
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20000d5c 	.word	0x20000d5c
 8006784:	20000d60 	.word	0x20000d60
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006794:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <prvGetNextExpireTime+0x44>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <prvGetNextExpireTime+0x16>
 800679e:	2201      	movs	r2, #1
 80067a0:	e000      	b.n	80067a4 <prvGetNextExpireTime+0x18>
 80067a2:	2200      	movs	r2, #0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d105      	bne.n	80067bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <prvGetNextExpireTime+0x44>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	e001      	b.n	80067c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067c0:	68fb      	ldr	r3, [r7, #12]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	20000d58 	.word	0x20000d58

080067d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067dc:	f7ff f962 	bl	8005aa4 <xTaskGetTickCount>
 80067e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <prvSampleTimeNow+0x3c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d205      	bcs.n	80067f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067ec:	f000 f93c 	bl	8006a68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e002      	b.n	80067fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067fe:	4a04      	ldr	r2, [pc, #16]	; (8006810 <prvSampleTimeNow+0x3c>)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006804:	68fb      	ldr	r3, [r7, #12]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000d68 	.word	0x20000d68

08006814 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	429a      	cmp	r2, r3
 8006838:	d812      	bhi.n	8006860 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	429a      	cmp	r2, r3
 8006846:	d302      	bcc.n	800684e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006848:	2301      	movs	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	e01b      	b.n	8006886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800684e:	4b10      	ldr	r3, [pc, #64]	; (8006890 <prvInsertTimerInActiveList+0x7c>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3304      	adds	r3, #4
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f7fd fd72 	bl	8004342 <vListInsert>
 800685e:	e012      	b.n	8006886 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d206      	bcs.n	8006876 <prvInsertTimerInActiveList+0x62>
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006870:	2301      	movs	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	e007      	b.n	8006886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006876:	4b07      	ldr	r3, [pc, #28]	; (8006894 <prvInsertTimerInActiveList+0x80>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3304      	adds	r3, #4
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f7fd fd5e 	bl	8004342 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006886:	697b      	ldr	r3, [r7, #20]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000d5c 	.word	0x20000d5c
 8006894:	20000d58 	.word	0x20000d58

08006898 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08e      	sub	sp, #56	; 0x38
 800689c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800689e:	e0d0      	b.n	8006a42 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da1a      	bge.n	80068dc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80068a6:	1d3b      	adds	r3, r7, #4
 80068a8:	3304      	adds	r3, #4
 80068aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10c      	bne.n	80068cc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	b672      	cpsid	i
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	b662      	cpsie	i
 80068c6:	61fb      	str	r3, [r7, #28]
}
 80068c8:	bf00      	nop
 80068ca:	e7fe      	b.n	80068ca <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d2:	6850      	ldr	r0, [r2, #4]
 80068d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d6:	6892      	ldr	r2, [r2, #8]
 80068d8:	4611      	mov	r1, r2
 80068da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f2c0 80af 	blt.w	8006a42 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	3304      	adds	r3, #4
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fd fd5d 	bl	80043b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068fa:	463b      	mov	r3, r7
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ff69 	bl	80067d4 <prvSampleTimeNow>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b09      	cmp	r3, #9
 8006908:	f200 809a 	bhi.w	8006a40 <prvProcessReceivedCommands+0x1a8>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <prvProcessReceivedCommands+0x7c>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	0800693d 	.word	0x0800693d
 8006918:	0800693d 	.word	0x0800693d
 800691c:	0800693d 	.word	0x0800693d
 8006920:	080069b5 	.word	0x080069b5
 8006924:	080069c9 	.word	0x080069c9
 8006928:	08006a17 	.word	0x08006a17
 800692c:	0800693d 	.word	0x0800693d
 8006930:	0800693d 	.word	0x0800693d
 8006934:	080069b5 	.word	0x080069b5
 8006938:	080069c9 	.word	0x080069c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	18d1      	adds	r1, r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800695c:	f7ff ff5a 	bl	8006814 <prvInsertTimerInActiveList>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d06d      	beq.n	8006a42 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d062      	beq.n	8006a42 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	441a      	add	r2, r3
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	2300      	movs	r3, #0
 800698a:	2100      	movs	r1, #0
 800698c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698e:	f7ff fdff 	bl	8006590 <xTimerGenericCommand>
 8006992:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d153      	bne.n	8006a42 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	b672      	cpsid	i
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	b662      	cpsie	i
 80069ae:	61bb      	str	r3, [r7, #24]
}
 80069b0:	bf00      	nop
 80069b2:	e7fe      	b.n	80069b2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80069c6:	e03c      	b.n	8006a42 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ce:	f043 0301 	orr.w	r3, r3, #1
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10c      	bne.n	8006a02 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	b672      	cpsid	i
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	b662      	cpsie	i
 80069fc:	617b      	str	r3, [r7, #20]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	18d1      	adds	r1, r2, r3
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a10:	f7ff ff00 	bl	8006814 <prvInsertTimerInActiveList>
					break;
 8006a14:	e015      	b.n	8006a42 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d103      	bne.n	8006a2c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a26:	f000 fbc7 	bl	80071b8 <vPortFree>
 8006a2a:	e00a      	b.n	8006a42 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a3e:	e000      	b.n	8006a42 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8006a40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a42:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <prvProcessReceivedCommands+0x1cc>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	1d39      	adds	r1, r7, #4
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe f8dc 	bl	8004c08 <xQueueReceive>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f47f af24 	bne.w	80068a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	3730      	adds	r7, #48	; 0x30
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000d60 	.word	0x20000d60

08006a68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a6e:	e04a      	b.n	8006b06 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a70:	4b2e      	ldr	r3, [pc, #184]	; (8006b2c <prvSwitchTimerLists+0xc4>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a7a:	4b2c      	ldr	r3, [pc, #176]	; (8006b2c <prvSwitchTimerLists+0xc4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3304      	adds	r3, #4
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fd fc93 	bl	80043b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d030      	beq.n	8006b06 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4413      	add	r3, r2
 8006aac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d90e      	bls.n	8006ad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ac2:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <prvSwitchTimerLists+0xc4>)
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	4619      	mov	r1, r3
 8006acc:	4610      	mov	r0, r2
 8006ace:	f7fd fc38 	bl	8004342 <vListInsert>
 8006ad2:	e018      	b.n	8006b06 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	2100      	movs	r1, #0
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f7ff fd56 	bl	8006590 <xTimerGenericCommand>
 8006ae4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10c      	bne.n	8006b06 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	b672      	cpsid	i
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	b662      	cpsie	i
 8006b00:	603b      	str	r3, [r7, #0]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <prvSwitchTimerLists+0xc4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1af      	bne.n	8006a70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <prvSwitchTimerLists+0xc4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <prvSwitchTimerLists+0xc8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <prvSwitchTimerLists+0xc4>)
 8006b1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b1e:	4a04      	ldr	r2, [pc, #16]	; (8006b30 <prvSwitchTimerLists+0xc8>)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	6013      	str	r3, [r2, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000d58 	.word	0x20000d58
 8006b30:	20000d5c 	.word	0x20000d5c

08006b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b3a:	f000 f947 	bl	8006dcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b3e:	4b15      	ldr	r3, [pc, #84]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d120      	bne.n	8006b88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b46:	4814      	ldr	r0, [pc, #80]	; (8006b98 <prvCheckForValidListAndQueue+0x64>)
 8006b48:	f7fd fbaa 	bl	80042a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b4c:	4813      	ldr	r0, [pc, #76]	; (8006b9c <prvCheckForValidListAndQueue+0x68>)
 8006b4e:	f7fd fba7 	bl	80042a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <prvCheckForValidListAndQueue+0x6c>)
 8006b54:	4a10      	ldr	r2, [pc, #64]	; (8006b98 <prvCheckForValidListAndQueue+0x64>)
 8006b56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b58:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <prvCheckForValidListAndQueue+0x70>)
 8006b5a:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <prvCheckForValidListAndQueue+0x68>)
 8006b5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <prvCheckForValidListAndQueue+0x74>)
 8006b64:	4a11      	ldr	r2, [pc, #68]	; (8006bac <prvCheckForValidListAndQueue+0x78>)
 8006b66:	2110      	movs	r1, #16
 8006b68:	200a      	movs	r0, #10
 8006b6a:	f7fd fcb7 	bl	80044dc <xQueueGenericCreateStatic>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <prvCheckForValidListAndQueue+0x60>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	490b      	ldr	r1, [pc, #44]	; (8006bb0 <prvCheckForValidListAndQueue+0x7c>)
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fc0e 	bl	80053a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b88:	f000 f954 	bl	8006e34 <vPortExitCritical>
}
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000d60 	.word	0x20000d60
 8006b98:	20000d30 	.word	0x20000d30
 8006b9c:	20000d44 	.word	0x20000d44
 8006ba0:	20000d58 	.word	0x20000d58
 8006ba4:	20000d5c 	.word	0x20000d5c
 8006ba8:	20000e0c 	.word	0x20000e0c
 8006bac:	20000d6c 	.word	0x20000d6c
 8006bb0:	08007e04 	.word	0x08007e04

08006bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3b04      	subs	r3, #4
 8006bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3b04      	subs	r3, #4
 8006bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f023 0201 	bic.w	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3b04      	subs	r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006be4:	4a0c      	ldr	r2, [pc, #48]	; (8006c18 <pxPortInitialiseStack+0x64>)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3b14      	subs	r3, #20
 8006bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3b04      	subs	r3, #4
 8006bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f06f 0202 	mvn.w	r2, #2
 8006c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3b20      	subs	r3, #32
 8006c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	08006c1d 	.word	0x08006c1d

08006c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c26:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <prvTaskExitError+0x5c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2e:	d00c      	beq.n	8006c4a <prvTaskExitError+0x2e>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	b672      	cpsid	i
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	b662      	cpsie	i
 8006c44:	60fb      	str	r3, [r7, #12]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <prvTaskExitError+0x2c>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	b672      	cpsid	i
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	b662      	cpsie	i
 8006c5e:	60bb      	str	r3, [r7, #8]
}
 8006c60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c62:	bf00      	nop
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0fc      	beq.n	8006c64 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	2000000c 	.word	0x2000000c
 8006c7c:	00000000 	.word	0x00000000

08006c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <pxCurrentTCBConst2>)
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	6808      	ldr	r0, [r1, #0]
 8006c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	f380 8809 	msr	PSP, r0
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8811 	msr	BASEPRI, r0
 8006c9a:	4770      	bx	lr
 8006c9c:	f3af 8000 	nop.w

08006ca0 <pxCurrentTCBConst2>:
 8006ca0:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ca8:	4808      	ldr	r0, [pc, #32]	; (8006ccc <prvPortStartFirstTask+0x24>)
 8006caa:	6800      	ldr	r0, [r0, #0]
 8006cac:	6800      	ldr	r0, [r0, #0]
 8006cae:	f380 8808 	msr	MSP, r0
 8006cb2:	f04f 0000 	mov.w	r0, #0
 8006cb6:	f380 8814 	msr	CONTROL, r0
 8006cba:	b662      	cpsie	i
 8006cbc:	b661      	cpsie	f
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	df00      	svc	0
 8006cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cca:	bf00      	nop
 8006ccc:	e000ed08 	.word	0xe000ed08

08006cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cd6:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <xPortStartScheduler+0xe4>)
 8006cd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	4b2f      	ldr	r3, [pc, #188]	; (8006db8 <xPortStartScheduler+0xe8>)
 8006cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cfe:	4b2f      	ldr	r3, [pc, #188]	; (8006dbc <xPortStartScheduler+0xec>)
 8006d00:	2207      	movs	r2, #7
 8006d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d04:	e009      	b.n	8006d1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006d06:	4b2d      	ldr	r3, [pc, #180]	; (8006dbc <xPortStartScheduler+0xec>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	4a2b      	ldr	r2, [pc, #172]	; (8006dbc <xPortStartScheduler+0xec>)
 8006d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d0ef      	beq.n	8006d06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d26:	4b25      	ldr	r3, [pc, #148]	; (8006dbc <xPortStartScheduler+0xec>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f1c3 0307 	rsb	r3, r3, #7
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d00c      	beq.n	8006d4c <xPortStartScheduler+0x7c>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	b672      	cpsid	i
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	b662      	cpsie	i
 8006d46:	60bb      	str	r3, [r7, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d4c:	4b1b      	ldr	r3, [pc, #108]	; (8006dbc <xPortStartScheduler+0xec>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	021b      	lsls	r3, r3, #8
 8006d52:	4a1a      	ldr	r2, [pc, #104]	; (8006dbc <xPortStartScheduler+0xec>)
 8006d54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d56:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <xPortStartScheduler+0xec>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d5e:	4a17      	ldr	r2, [pc, #92]	; (8006dbc <xPortStartScheduler+0xec>)
 8006d60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	; (8006dc0 <xPortStartScheduler+0xf0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a14      	ldr	r2, [pc, #80]	; (8006dc0 <xPortStartScheduler+0xf0>)
 8006d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d76:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <xPortStartScheduler+0xf0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a11      	ldr	r2, [pc, #68]	; (8006dc0 <xPortStartScheduler+0xf0>)
 8006d7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d82:	f000 f8dd 	bl	8006f40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d86:	4b0f      	ldr	r3, [pc, #60]	; (8006dc4 <xPortStartScheduler+0xf4>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d8c:	f000 f8fc 	bl	8006f88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d90:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <xPortStartScheduler+0xf8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a0c      	ldr	r2, [pc, #48]	; (8006dc8 <xPortStartScheduler+0xf8>)
 8006d96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d9c:	f7ff ff84 	bl	8006ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006da0:	f7fe ff4c 	bl	8005c3c <vTaskSwitchContext>
	prvTaskExitError();
 8006da4:	f7ff ff3a 	bl	8006c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	e000e400 	.word	0xe000e400
 8006db8:	20000e5c 	.word	0x20000e5c
 8006dbc:	20000e60 	.word	0x20000e60
 8006dc0:	e000ed20 	.word	0xe000ed20
 8006dc4:	2000000c 	.word	0x2000000c
 8006dc8:	e000ef34 	.word	0xe000ef34

08006dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	b672      	cpsid	i
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	b662      	cpsie	i
 8006de6:	607b      	str	r3, [r7, #4]
}
 8006de8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dea:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <vPortEnterCritical+0x60>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3301      	adds	r3, #1
 8006df0:	4a0e      	ldr	r2, [pc, #56]	; (8006e2c <vPortEnterCritical+0x60>)
 8006df2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006df4:	4b0d      	ldr	r3, [pc, #52]	; (8006e2c <vPortEnterCritical+0x60>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d111      	bne.n	8006e20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <vPortEnterCritical+0x64>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00c      	beq.n	8006e20 <vPortEnterCritical+0x54>
	__asm volatile
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	b672      	cpsid	i
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	b662      	cpsie	i
 8006e1a:	603b      	str	r3, [r7, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vPortEnterCritical+0x52>
	}
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	2000000c 	.word	0x2000000c
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e3a:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <vPortExitCritical+0x54>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10c      	bne.n	8006e5c <vPortExitCritical+0x28>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	b672      	cpsid	i
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	b662      	cpsie	i
 8006e56:	607b      	str	r3, [r7, #4]
}
 8006e58:	bf00      	nop
 8006e5a:	e7fe      	b.n	8006e5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006e5c:	4b0a      	ldr	r3, [pc, #40]	; (8006e88 <vPortExitCritical+0x54>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	4a09      	ldr	r2, [pc, #36]	; (8006e88 <vPortExitCritical+0x54>)
 8006e64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e66:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <vPortExitCritical+0x54>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d105      	bne.n	8006e7a <vPortExitCritical+0x46>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	f383 8811 	msr	BASEPRI, r3
}
 8006e78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	2000000c 	.word	0x2000000c
 8006e8c:	00000000 	.word	0x00000000

08006e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e90:	f3ef 8009 	mrs	r0, PSP
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <pxCurrentTCBConst>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	f01e 0f10 	tst.w	lr, #16
 8006ea0:	bf08      	it	eq
 8006ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006eb4:	b672      	cpsid	i
 8006eb6:	f380 8811 	msr	BASEPRI, r0
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	b662      	cpsie	i
 8006ec4:	f7fe feba 	bl	8005c3c <vTaskSwitchContext>
 8006ec8:	f04f 0000 	mov.w	r0, #0
 8006ecc:	f380 8811 	msr	BASEPRI, r0
 8006ed0:	bc09      	pop	{r0, r3}
 8006ed2:	6819      	ldr	r1, [r3, #0]
 8006ed4:	6808      	ldr	r0, [r1, #0]
 8006ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eda:	f01e 0f10 	tst.w	lr, #16
 8006ede:	bf08      	it	eq
 8006ee0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ee4:	f380 8809 	msr	PSP, r0
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop

08006ef0 <pxCurrentTCBConst>:
 8006ef0:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop

08006ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	b672      	cpsid	i
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	b662      	cpsie	i
 8006f12:	607b      	str	r3, [r7, #4]
}
 8006f14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f16:	f7fe fdd5 	bl	8005ac4 <xTaskIncrementTick>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f20:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <xPortSysTickHandler+0x44>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	f383 8811 	msr	BASEPRI, r3
}
 8006f32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	e000ed04 	.word	0xe000ed04

08006f40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f40:	b480      	push	{r7}
 8006f42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f44:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <vPortSetupTimerInterrupt+0x34>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <vPortSetupTimerInterrupt+0x38>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <vPortSetupTimerInterrupt+0x3c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <vPortSetupTimerInterrupt+0x40>)
 8006f56:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5a:	099b      	lsrs	r3, r3, #6
 8006f5c:	4a09      	ldr	r2, [pc, #36]	; (8006f84 <vPortSetupTimerInterrupt+0x44>)
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f62:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <vPortSetupTimerInterrupt+0x34>)
 8006f64:	2207      	movs	r2, #7
 8006f66:	601a      	str	r2, [r3, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	e000e010 	.word	0xe000e010
 8006f78:	e000e018 	.word	0xe000e018
 8006f7c:	20000000 	.word	0x20000000
 8006f80:	10624dd3 	.word	0x10624dd3
 8006f84:	e000e014 	.word	0xe000e014

08006f88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f98 <vPortEnableVFP+0x10>
 8006f8c:	6801      	ldr	r1, [r0, #0]
 8006f8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f92:	6001      	str	r1, [r0, #0]
 8006f94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f96:	bf00      	nop
 8006f98:	e000ed88 	.word	0xe000ed88

08006f9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fa2:	f3ef 8305 	mrs	r3, IPSR
 8006fa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b0f      	cmp	r3, #15
 8006fac:	d916      	bls.n	8006fdc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fae:	4a19      	ldr	r2, [pc, #100]	; (8007014 <vPortValidateInterruptPriority+0x78>)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fb8:	4b17      	ldr	r3, [pc, #92]	; (8007018 <vPortValidateInterruptPriority+0x7c>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	7afa      	ldrb	r2, [r7, #11]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d20c      	bcs.n	8006fdc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	b672      	cpsid	i
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	b662      	cpsie	i
 8006fd6:	607b      	str	r3, [r7, #4]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	; (800701c <vPortValidateInterruptPriority+0x80>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <vPortValidateInterruptPriority+0x84>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d90c      	bls.n	8007006 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	b672      	cpsid	i
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	b662      	cpsie	i
 8007000:	603b      	str	r3, [r7, #0]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <vPortValidateInterruptPriority+0x68>
	}
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	e000e3f0 	.word	0xe000e3f0
 8007018:	20000e5c 	.word	0x20000e5c
 800701c:	e000ed0c 	.word	0xe000ed0c
 8007020:	20000e60 	.word	0x20000e60

08007024 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	; 0x28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800702c:	2300      	movs	r3, #0
 800702e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007030:	f7fe fc8a 	bl	8005948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007034:	4b5b      	ldr	r3, [pc, #364]	; (80071a4 <pvPortMalloc+0x180>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800703c:	f000 f91a 	bl	8007274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007040:	4b59      	ldr	r3, [pc, #356]	; (80071a8 <pvPortMalloc+0x184>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4013      	ands	r3, r2
 8007048:	2b00      	cmp	r3, #0
 800704a:	f040 8092 	bne.w	8007172 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d01f      	beq.n	8007094 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007054:	2208      	movs	r2, #8
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4413      	add	r3, r2
 800705a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	2b00      	cmp	r3, #0
 8007064:	d016      	beq.n	8007094 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f023 0307 	bic.w	r3, r3, #7
 800706c:	3308      	adds	r3, #8
 800706e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00c      	beq.n	8007094 <pvPortMalloc+0x70>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	b672      	cpsid	i
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	b662      	cpsie	i
 800708e:	617b      	str	r3, [r7, #20]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d06b      	beq.n	8007172 <pvPortMalloc+0x14e>
 800709a:	4b44      	ldr	r3, [pc, #272]	; (80071ac <pvPortMalloc+0x188>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d866      	bhi.n	8007172 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070a4:	4b42      	ldr	r3, [pc, #264]	; (80071b0 <pvPortMalloc+0x18c>)
 80070a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070a8:	4b41      	ldr	r3, [pc, #260]	; (80071b0 <pvPortMalloc+0x18c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ae:	e004      	b.n	80070ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d903      	bls.n	80070cc <pvPortMalloc+0xa8>
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f1      	bne.n	80070b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070cc:	4b35      	ldr	r3, [pc, #212]	; (80071a4 <pvPortMalloc+0x180>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d04d      	beq.n	8007172 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2208      	movs	r2, #8
 80070dc:	4413      	add	r3, r2
 80070de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	2308      	movs	r3, #8
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d921      	bls.n	800713c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4413      	add	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00c      	beq.n	8007124 <pvPortMalloc+0x100>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	b672      	cpsid	i
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	b662      	cpsie	i
 800711e:	613b      	str	r3, [r7, #16]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	1ad2      	subs	r2, r2, r3
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007136:	69b8      	ldr	r0, [r7, #24]
 8007138:	f000 f8fe 	bl	8007338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800713c:	4b1b      	ldr	r3, [pc, #108]	; (80071ac <pvPortMalloc+0x188>)
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	4a19      	ldr	r2, [pc, #100]	; (80071ac <pvPortMalloc+0x188>)
 8007148:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <pvPortMalloc+0x188>)
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <pvPortMalloc+0x190>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d203      	bcs.n	800715e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007156:	4b15      	ldr	r3, [pc, #84]	; (80071ac <pvPortMalloc+0x188>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <pvPortMalloc+0x190>)
 800715c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <pvPortMalloc+0x184>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	431a      	orrs	r2, r3
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007172:	f7fe fbf7 	bl	8005964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00c      	beq.n	800719a <pvPortMalloc+0x176>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	b672      	cpsid	i
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	b662      	cpsie	i
 8007194:	60fb      	str	r3, [r7, #12]
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <pvPortMalloc+0x174>
	return pvReturn;
 800719a:	69fb      	ldr	r3, [r7, #28]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3728      	adds	r7, #40	; 0x28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	20004a6c 	.word	0x20004a6c
 80071a8:	20004a78 	.word	0x20004a78
 80071ac:	20004a70 	.word	0x20004a70
 80071b0:	20004a64 	.word	0x20004a64
 80071b4:	20004a74 	.word	0x20004a74

080071b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d04c      	beq.n	8007264 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071ca:	2308      	movs	r3, #8
 80071cc:	425b      	negs	r3, r3
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4413      	add	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	4b23      	ldr	r3, [pc, #140]	; (800726c <vPortFree+0xb4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4013      	ands	r3, r2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10c      	bne.n	8007200 <vPortFree+0x48>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	b672      	cpsid	i
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	b662      	cpsie	i
 80071fa:	60fb      	str	r3, [r7, #12]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <vPortFree+0x6a>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	b672      	cpsid	i
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	b662      	cpsie	i
 800721c:	60bb      	str	r3, [r7, #8]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	4b11      	ldr	r3, [pc, #68]	; (800726c <vPortFree+0xb4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d019      	beq.n	8007264 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d115      	bne.n	8007264 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <vPortFree+0xb4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	43db      	mvns	r3, r3
 8007242:	401a      	ands	r2, r3
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007248:	f7fe fb7e 	bl	8005948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	4b07      	ldr	r3, [pc, #28]	; (8007270 <vPortFree+0xb8>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4413      	add	r3, r2
 8007256:	4a06      	ldr	r2, [pc, #24]	; (8007270 <vPortFree+0xb8>)
 8007258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800725a:	6938      	ldr	r0, [r7, #16]
 800725c:	f000 f86c 	bl	8007338 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007260:	f7fe fb80 	bl	8005964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007264:	bf00      	nop
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20004a78 	.word	0x20004a78
 8007270:	20004a70 	.word	0x20004a70

08007274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800727a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800727e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007280:	4b27      	ldr	r3, [pc, #156]	; (8007320 <prvHeapInit+0xac>)
 8007282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00c      	beq.n	80072a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3307      	adds	r3, #7
 8007292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0307 	bic.w	r3, r3, #7
 800729a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	4a1f      	ldr	r2, [pc, #124]	; (8007320 <prvHeapInit+0xac>)
 80072a4:	4413      	add	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072ac:	4a1d      	ldr	r2, [pc, #116]	; (8007324 <prvHeapInit+0xb0>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072b2:	4b1c      	ldr	r3, [pc, #112]	; (8007324 <prvHeapInit+0xb0>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	4413      	add	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072c0:	2208      	movs	r2, #8
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1a9b      	subs	r3, r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f023 0307 	bic.w	r3, r3, #7
 80072ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4a15      	ldr	r2, [pc, #84]	; (8007328 <prvHeapInit+0xb4>)
 80072d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <prvHeapInit+0xb4>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072de:	4b12      	ldr	r3, [pc, #72]	; (8007328 <prvHeapInit+0xb4>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	1ad2      	subs	r2, r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072f4:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <prvHeapInit+0xb4>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	4a0a      	ldr	r2, [pc, #40]	; (800732c <prvHeapInit+0xb8>)
 8007302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	4a09      	ldr	r2, [pc, #36]	; (8007330 <prvHeapInit+0xbc>)
 800730a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800730c:	4b09      	ldr	r3, [pc, #36]	; (8007334 <prvHeapInit+0xc0>)
 800730e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007312:	601a      	str	r2, [r3, #0]
}
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	20000e64 	.word	0x20000e64
 8007324:	20004a64 	.word	0x20004a64
 8007328:	20004a6c 	.word	0x20004a6c
 800732c:	20004a74 	.word	0x20004a74
 8007330:	20004a70 	.word	0x20004a70
 8007334:	20004a78 	.word	0x20004a78

08007338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007340:	4b28      	ldr	r3, [pc, #160]	; (80073e4 <prvInsertBlockIntoFreeList+0xac>)
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	e002      	b.n	800734c <prvInsertBlockIntoFreeList+0x14>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d8f7      	bhi.n	8007346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	4413      	add	r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d108      	bne.n	800737a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	441a      	add	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	441a      	add	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d118      	bne.n	80073c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b15      	ldr	r3, [pc, #84]	; (80073e8 <prvInsertBlockIntoFreeList+0xb0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d00d      	beq.n	80073b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e008      	b.n	80073c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <prvInsertBlockIntoFreeList+0xb0>)
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e003      	b.n	80073c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d002      	beq.n	80073d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073d6:	bf00      	nop
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20004a64 	.word	0x20004a64
 80073e8:	20004a6c 	.word	0x20004a6c

080073ec <siprintf>:
 80073ec:	b40e      	push	{r1, r2, r3}
 80073ee:	b500      	push	{lr}
 80073f0:	b09c      	sub	sp, #112	; 0x70
 80073f2:	ab1d      	add	r3, sp, #116	; 0x74
 80073f4:	9002      	str	r0, [sp, #8]
 80073f6:	9006      	str	r0, [sp, #24]
 80073f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073fc:	4809      	ldr	r0, [pc, #36]	; (8007424 <siprintf+0x38>)
 80073fe:	9107      	str	r1, [sp, #28]
 8007400:	9104      	str	r1, [sp, #16]
 8007402:	4909      	ldr	r1, [pc, #36]	; (8007428 <siprintf+0x3c>)
 8007404:	f853 2b04 	ldr.w	r2, [r3], #4
 8007408:	9105      	str	r1, [sp, #20]
 800740a:	6800      	ldr	r0, [r0, #0]
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	a902      	add	r1, sp, #8
 8007410:	f000 f9a0 	bl	8007754 <_svfiprintf_r>
 8007414:	9b02      	ldr	r3, [sp, #8]
 8007416:	2200      	movs	r2, #0
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	b01c      	add	sp, #112	; 0x70
 800741c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007420:	b003      	add	sp, #12
 8007422:	4770      	bx	lr
 8007424:	2000005c 	.word	0x2000005c
 8007428:	ffff0208 	.word	0xffff0208

0800742c <memset>:
 800742c:	4402      	add	r2, r0
 800742e:	4603      	mov	r3, r0
 8007430:	4293      	cmp	r3, r2
 8007432:	d100      	bne.n	8007436 <memset+0xa>
 8007434:	4770      	bx	lr
 8007436:	f803 1b01 	strb.w	r1, [r3], #1
 800743a:	e7f9      	b.n	8007430 <memset+0x4>

0800743c <__errno>:
 800743c:	4b01      	ldr	r3, [pc, #4]	; (8007444 <__errno+0x8>)
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	2000005c 	.word	0x2000005c

08007448 <__libc_init_array>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	4d0d      	ldr	r5, [pc, #52]	; (8007480 <__libc_init_array+0x38>)
 800744c:	4c0d      	ldr	r4, [pc, #52]	; (8007484 <__libc_init_array+0x3c>)
 800744e:	1b64      	subs	r4, r4, r5
 8007450:	10a4      	asrs	r4, r4, #2
 8007452:	2600      	movs	r6, #0
 8007454:	42a6      	cmp	r6, r4
 8007456:	d109      	bne.n	800746c <__libc_init_array+0x24>
 8007458:	4d0b      	ldr	r5, [pc, #44]	; (8007488 <__libc_init_array+0x40>)
 800745a:	4c0c      	ldr	r4, [pc, #48]	; (800748c <__libc_init_array+0x44>)
 800745c:	f000 fc6a 	bl	8007d34 <_init>
 8007460:	1b64      	subs	r4, r4, r5
 8007462:	10a4      	asrs	r4, r4, #2
 8007464:	2600      	movs	r6, #0
 8007466:	42a6      	cmp	r6, r4
 8007468:	d105      	bne.n	8007476 <__libc_init_array+0x2e>
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007470:	4798      	blx	r3
 8007472:	3601      	adds	r6, #1
 8007474:	e7ee      	b.n	8007454 <__libc_init_array+0xc>
 8007476:	f855 3b04 	ldr.w	r3, [r5], #4
 800747a:	4798      	blx	r3
 800747c:	3601      	adds	r6, #1
 800747e:	e7f2      	b.n	8007466 <__libc_init_array+0x1e>
 8007480:	08007eb8 	.word	0x08007eb8
 8007484:	08007eb8 	.word	0x08007eb8
 8007488:	08007eb8 	.word	0x08007eb8
 800748c:	08007ebc 	.word	0x08007ebc

08007490 <__retarget_lock_acquire_recursive>:
 8007490:	4770      	bx	lr

08007492 <__retarget_lock_release_recursive>:
 8007492:	4770      	bx	lr

08007494 <memcpy>:
 8007494:	440a      	add	r2, r1
 8007496:	4291      	cmp	r1, r2
 8007498:	f100 33ff 	add.w	r3, r0, #4294967295
 800749c:	d100      	bne.n	80074a0 <memcpy+0xc>
 800749e:	4770      	bx	lr
 80074a0:	b510      	push	{r4, lr}
 80074a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074aa:	4291      	cmp	r1, r2
 80074ac:	d1f9      	bne.n	80074a2 <memcpy+0xe>
 80074ae:	bd10      	pop	{r4, pc}

080074b0 <_free_r>:
 80074b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074b2:	2900      	cmp	r1, #0
 80074b4:	d044      	beq.n	8007540 <_free_r+0x90>
 80074b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ba:	9001      	str	r0, [sp, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f1a1 0404 	sub.w	r4, r1, #4
 80074c2:	bfb8      	it	lt
 80074c4:	18e4      	addlt	r4, r4, r3
 80074c6:	f000 f8df 	bl	8007688 <__malloc_lock>
 80074ca:	4a1e      	ldr	r2, [pc, #120]	; (8007544 <_free_r+0x94>)
 80074cc:	9801      	ldr	r0, [sp, #4]
 80074ce:	6813      	ldr	r3, [r2, #0]
 80074d0:	b933      	cbnz	r3, 80074e0 <_free_r+0x30>
 80074d2:	6063      	str	r3, [r4, #4]
 80074d4:	6014      	str	r4, [r2, #0]
 80074d6:	b003      	add	sp, #12
 80074d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074dc:	f000 b8da 	b.w	8007694 <__malloc_unlock>
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	d908      	bls.n	80074f6 <_free_r+0x46>
 80074e4:	6825      	ldr	r5, [r4, #0]
 80074e6:	1961      	adds	r1, r4, r5
 80074e8:	428b      	cmp	r3, r1
 80074ea:	bf01      	itttt	eq
 80074ec:	6819      	ldreq	r1, [r3, #0]
 80074ee:	685b      	ldreq	r3, [r3, #4]
 80074f0:	1949      	addeq	r1, r1, r5
 80074f2:	6021      	streq	r1, [r4, #0]
 80074f4:	e7ed      	b.n	80074d2 <_free_r+0x22>
 80074f6:	461a      	mov	r2, r3
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	b10b      	cbz	r3, 8007500 <_free_r+0x50>
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	d9fa      	bls.n	80074f6 <_free_r+0x46>
 8007500:	6811      	ldr	r1, [r2, #0]
 8007502:	1855      	adds	r5, r2, r1
 8007504:	42a5      	cmp	r5, r4
 8007506:	d10b      	bne.n	8007520 <_free_r+0x70>
 8007508:	6824      	ldr	r4, [r4, #0]
 800750a:	4421      	add	r1, r4
 800750c:	1854      	adds	r4, r2, r1
 800750e:	42a3      	cmp	r3, r4
 8007510:	6011      	str	r1, [r2, #0]
 8007512:	d1e0      	bne.n	80074d6 <_free_r+0x26>
 8007514:	681c      	ldr	r4, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	6053      	str	r3, [r2, #4]
 800751a:	440c      	add	r4, r1
 800751c:	6014      	str	r4, [r2, #0]
 800751e:	e7da      	b.n	80074d6 <_free_r+0x26>
 8007520:	d902      	bls.n	8007528 <_free_r+0x78>
 8007522:	230c      	movs	r3, #12
 8007524:	6003      	str	r3, [r0, #0]
 8007526:	e7d6      	b.n	80074d6 <_free_r+0x26>
 8007528:	6825      	ldr	r5, [r4, #0]
 800752a:	1961      	adds	r1, r4, r5
 800752c:	428b      	cmp	r3, r1
 800752e:	bf04      	itt	eq
 8007530:	6819      	ldreq	r1, [r3, #0]
 8007532:	685b      	ldreq	r3, [r3, #4]
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	bf04      	itt	eq
 8007538:	1949      	addeq	r1, r1, r5
 800753a:	6021      	streq	r1, [r4, #0]
 800753c:	6054      	str	r4, [r2, #4]
 800753e:	e7ca      	b.n	80074d6 <_free_r+0x26>
 8007540:	b003      	add	sp, #12
 8007542:	bd30      	pop	{r4, r5, pc}
 8007544:	20004bbc 	.word	0x20004bbc

08007548 <sbrk_aligned>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	4e0e      	ldr	r6, [pc, #56]	; (8007584 <sbrk_aligned+0x3c>)
 800754c:	460c      	mov	r4, r1
 800754e:	6831      	ldr	r1, [r6, #0]
 8007550:	4605      	mov	r5, r0
 8007552:	b911      	cbnz	r1, 800755a <sbrk_aligned+0x12>
 8007554:	f000 fba6 	bl	8007ca4 <_sbrk_r>
 8007558:	6030      	str	r0, [r6, #0]
 800755a:	4621      	mov	r1, r4
 800755c:	4628      	mov	r0, r5
 800755e:	f000 fba1 	bl	8007ca4 <_sbrk_r>
 8007562:	1c43      	adds	r3, r0, #1
 8007564:	d00a      	beq.n	800757c <sbrk_aligned+0x34>
 8007566:	1cc4      	adds	r4, r0, #3
 8007568:	f024 0403 	bic.w	r4, r4, #3
 800756c:	42a0      	cmp	r0, r4
 800756e:	d007      	beq.n	8007580 <sbrk_aligned+0x38>
 8007570:	1a21      	subs	r1, r4, r0
 8007572:	4628      	mov	r0, r5
 8007574:	f000 fb96 	bl	8007ca4 <_sbrk_r>
 8007578:	3001      	adds	r0, #1
 800757a:	d101      	bne.n	8007580 <sbrk_aligned+0x38>
 800757c:	f04f 34ff 	mov.w	r4, #4294967295
 8007580:	4620      	mov	r0, r4
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	20004bc0 	.word	0x20004bc0

08007588 <_malloc_r>:
 8007588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800758c:	1ccd      	adds	r5, r1, #3
 800758e:	f025 0503 	bic.w	r5, r5, #3
 8007592:	3508      	adds	r5, #8
 8007594:	2d0c      	cmp	r5, #12
 8007596:	bf38      	it	cc
 8007598:	250c      	movcc	r5, #12
 800759a:	2d00      	cmp	r5, #0
 800759c:	4607      	mov	r7, r0
 800759e:	db01      	blt.n	80075a4 <_malloc_r+0x1c>
 80075a0:	42a9      	cmp	r1, r5
 80075a2:	d905      	bls.n	80075b0 <_malloc_r+0x28>
 80075a4:	230c      	movs	r3, #12
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	2600      	movs	r6, #0
 80075aa:	4630      	mov	r0, r6
 80075ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007684 <_malloc_r+0xfc>
 80075b4:	f000 f868 	bl	8007688 <__malloc_lock>
 80075b8:	f8d8 3000 	ldr.w	r3, [r8]
 80075bc:	461c      	mov	r4, r3
 80075be:	bb5c      	cbnz	r4, 8007618 <_malloc_r+0x90>
 80075c0:	4629      	mov	r1, r5
 80075c2:	4638      	mov	r0, r7
 80075c4:	f7ff ffc0 	bl	8007548 <sbrk_aligned>
 80075c8:	1c43      	adds	r3, r0, #1
 80075ca:	4604      	mov	r4, r0
 80075cc:	d155      	bne.n	800767a <_malloc_r+0xf2>
 80075ce:	f8d8 4000 	ldr.w	r4, [r8]
 80075d2:	4626      	mov	r6, r4
 80075d4:	2e00      	cmp	r6, #0
 80075d6:	d145      	bne.n	8007664 <_malloc_r+0xdc>
 80075d8:	2c00      	cmp	r4, #0
 80075da:	d048      	beq.n	800766e <_malloc_r+0xe6>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	4631      	mov	r1, r6
 80075e0:	4638      	mov	r0, r7
 80075e2:	eb04 0903 	add.w	r9, r4, r3
 80075e6:	f000 fb5d 	bl	8007ca4 <_sbrk_r>
 80075ea:	4581      	cmp	r9, r0
 80075ec:	d13f      	bne.n	800766e <_malloc_r+0xe6>
 80075ee:	6821      	ldr	r1, [r4, #0]
 80075f0:	1a6d      	subs	r5, r5, r1
 80075f2:	4629      	mov	r1, r5
 80075f4:	4638      	mov	r0, r7
 80075f6:	f7ff ffa7 	bl	8007548 <sbrk_aligned>
 80075fa:	3001      	adds	r0, #1
 80075fc:	d037      	beq.n	800766e <_malloc_r+0xe6>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	442b      	add	r3, r5
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	f8d8 3000 	ldr.w	r3, [r8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d038      	beq.n	800767e <_malloc_r+0xf6>
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	42a2      	cmp	r2, r4
 8007610:	d12b      	bne.n	800766a <_malloc_r+0xe2>
 8007612:	2200      	movs	r2, #0
 8007614:	605a      	str	r2, [r3, #4]
 8007616:	e00f      	b.n	8007638 <_malloc_r+0xb0>
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	1b52      	subs	r2, r2, r5
 800761c:	d41f      	bmi.n	800765e <_malloc_r+0xd6>
 800761e:	2a0b      	cmp	r2, #11
 8007620:	d917      	bls.n	8007652 <_malloc_r+0xca>
 8007622:	1961      	adds	r1, r4, r5
 8007624:	42a3      	cmp	r3, r4
 8007626:	6025      	str	r5, [r4, #0]
 8007628:	bf18      	it	ne
 800762a:	6059      	strne	r1, [r3, #4]
 800762c:	6863      	ldr	r3, [r4, #4]
 800762e:	bf08      	it	eq
 8007630:	f8c8 1000 	streq.w	r1, [r8]
 8007634:	5162      	str	r2, [r4, r5]
 8007636:	604b      	str	r3, [r1, #4]
 8007638:	4638      	mov	r0, r7
 800763a:	f104 060b 	add.w	r6, r4, #11
 800763e:	f000 f829 	bl	8007694 <__malloc_unlock>
 8007642:	f026 0607 	bic.w	r6, r6, #7
 8007646:	1d23      	adds	r3, r4, #4
 8007648:	1af2      	subs	r2, r6, r3
 800764a:	d0ae      	beq.n	80075aa <_malloc_r+0x22>
 800764c:	1b9b      	subs	r3, r3, r6
 800764e:	50a3      	str	r3, [r4, r2]
 8007650:	e7ab      	b.n	80075aa <_malloc_r+0x22>
 8007652:	42a3      	cmp	r3, r4
 8007654:	6862      	ldr	r2, [r4, #4]
 8007656:	d1dd      	bne.n	8007614 <_malloc_r+0x8c>
 8007658:	f8c8 2000 	str.w	r2, [r8]
 800765c:	e7ec      	b.n	8007638 <_malloc_r+0xb0>
 800765e:	4623      	mov	r3, r4
 8007660:	6864      	ldr	r4, [r4, #4]
 8007662:	e7ac      	b.n	80075be <_malloc_r+0x36>
 8007664:	4634      	mov	r4, r6
 8007666:	6876      	ldr	r6, [r6, #4]
 8007668:	e7b4      	b.n	80075d4 <_malloc_r+0x4c>
 800766a:	4613      	mov	r3, r2
 800766c:	e7cc      	b.n	8007608 <_malloc_r+0x80>
 800766e:	230c      	movs	r3, #12
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	4638      	mov	r0, r7
 8007674:	f000 f80e 	bl	8007694 <__malloc_unlock>
 8007678:	e797      	b.n	80075aa <_malloc_r+0x22>
 800767a:	6025      	str	r5, [r4, #0]
 800767c:	e7dc      	b.n	8007638 <_malloc_r+0xb0>
 800767e:	605b      	str	r3, [r3, #4]
 8007680:	deff      	udf	#255	; 0xff
 8007682:	bf00      	nop
 8007684:	20004bbc 	.word	0x20004bbc

08007688 <__malloc_lock>:
 8007688:	4801      	ldr	r0, [pc, #4]	; (8007690 <__malloc_lock+0x8>)
 800768a:	f7ff bf01 	b.w	8007490 <__retarget_lock_acquire_recursive>
 800768e:	bf00      	nop
 8007690:	20004bb8 	.word	0x20004bb8

08007694 <__malloc_unlock>:
 8007694:	4801      	ldr	r0, [pc, #4]	; (800769c <__malloc_unlock+0x8>)
 8007696:	f7ff befc 	b.w	8007492 <__retarget_lock_release_recursive>
 800769a:	bf00      	nop
 800769c:	20004bb8 	.word	0x20004bb8

080076a0 <__ssputs_r>:
 80076a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a4:	688e      	ldr	r6, [r1, #8]
 80076a6:	461f      	mov	r7, r3
 80076a8:	42be      	cmp	r6, r7
 80076aa:	680b      	ldr	r3, [r1, #0]
 80076ac:	4682      	mov	sl, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	4690      	mov	r8, r2
 80076b2:	d82c      	bhi.n	800770e <__ssputs_r+0x6e>
 80076b4:	898a      	ldrh	r2, [r1, #12]
 80076b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076ba:	d026      	beq.n	800770a <__ssputs_r+0x6a>
 80076bc:	6965      	ldr	r5, [r4, #20]
 80076be:	6909      	ldr	r1, [r1, #16]
 80076c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076c4:	eba3 0901 	sub.w	r9, r3, r1
 80076c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076cc:	1c7b      	adds	r3, r7, #1
 80076ce:	444b      	add	r3, r9
 80076d0:	106d      	asrs	r5, r5, #1
 80076d2:	429d      	cmp	r5, r3
 80076d4:	bf38      	it	cc
 80076d6:	461d      	movcc	r5, r3
 80076d8:	0553      	lsls	r3, r2, #21
 80076da:	d527      	bpl.n	800772c <__ssputs_r+0x8c>
 80076dc:	4629      	mov	r1, r5
 80076de:	f7ff ff53 	bl	8007588 <_malloc_r>
 80076e2:	4606      	mov	r6, r0
 80076e4:	b360      	cbz	r0, 8007740 <__ssputs_r+0xa0>
 80076e6:	6921      	ldr	r1, [r4, #16]
 80076e8:	464a      	mov	r2, r9
 80076ea:	f7ff fed3 	bl	8007494 <memcpy>
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f8:	81a3      	strh	r3, [r4, #12]
 80076fa:	6126      	str	r6, [r4, #16]
 80076fc:	6165      	str	r5, [r4, #20]
 80076fe:	444e      	add	r6, r9
 8007700:	eba5 0509 	sub.w	r5, r5, r9
 8007704:	6026      	str	r6, [r4, #0]
 8007706:	60a5      	str	r5, [r4, #8]
 8007708:	463e      	mov	r6, r7
 800770a:	42be      	cmp	r6, r7
 800770c:	d900      	bls.n	8007710 <__ssputs_r+0x70>
 800770e:	463e      	mov	r6, r7
 8007710:	6820      	ldr	r0, [r4, #0]
 8007712:	4632      	mov	r2, r6
 8007714:	4641      	mov	r1, r8
 8007716:	f000 faab 	bl	8007c70 <memmove>
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	1b9b      	subs	r3, r3, r6
 800771e:	60a3      	str	r3, [r4, #8]
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	4433      	add	r3, r6
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	2000      	movs	r0, #0
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772c:	462a      	mov	r2, r5
 800772e:	f000 fac9 	bl	8007cc4 <_realloc_r>
 8007732:	4606      	mov	r6, r0
 8007734:	2800      	cmp	r0, #0
 8007736:	d1e0      	bne.n	80076fa <__ssputs_r+0x5a>
 8007738:	6921      	ldr	r1, [r4, #16]
 800773a:	4650      	mov	r0, sl
 800773c:	f7ff feb8 	bl	80074b0 <_free_r>
 8007740:	230c      	movs	r3, #12
 8007742:	f8ca 3000 	str.w	r3, [sl]
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800774c:	81a3      	strh	r3, [r4, #12]
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
 8007752:	e7e9      	b.n	8007728 <__ssputs_r+0x88>

08007754 <_svfiprintf_r>:
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	4698      	mov	r8, r3
 800775a:	898b      	ldrh	r3, [r1, #12]
 800775c:	061b      	lsls	r3, r3, #24
 800775e:	b09d      	sub	sp, #116	; 0x74
 8007760:	4607      	mov	r7, r0
 8007762:	460d      	mov	r5, r1
 8007764:	4614      	mov	r4, r2
 8007766:	d50e      	bpl.n	8007786 <_svfiprintf_r+0x32>
 8007768:	690b      	ldr	r3, [r1, #16]
 800776a:	b963      	cbnz	r3, 8007786 <_svfiprintf_r+0x32>
 800776c:	2140      	movs	r1, #64	; 0x40
 800776e:	f7ff ff0b 	bl	8007588 <_malloc_r>
 8007772:	6028      	str	r0, [r5, #0]
 8007774:	6128      	str	r0, [r5, #16]
 8007776:	b920      	cbnz	r0, 8007782 <_svfiprintf_r+0x2e>
 8007778:	230c      	movs	r3, #12
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	e0d0      	b.n	8007924 <_svfiprintf_r+0x1d0>
 8007782:	2340      	movs	r3, #64	; 0x40
 8007784:	616b      	str	r3, [r5, #20]
 8007786:	2300      	movs	r3, #0
 8007788:	9309      	str	r3, [sp, #36]	; 0x24
 800778a:	2320      	movs	r3, #32
 800778c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007790:	f8cd 800c 	str.w	r8, [sp, #12]
 8007794:	2330      	movs	r3, #48	; 0x30
 8007796:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800793c <_svfiprintf_r+0x1e8>
 800779a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800779e:	f04f 0901 	mov.w	r9, #1
 80077a2:	4623      	mov	r3, r4
 80077a4:	469a      	mov	sl, r3
 80077a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077aa:	b10a      	cbz	r2, 80077b0 <_svfiprintf_r+0x5c>
 80077ac:	2a25      	cmp	r2, #37	; 0x25
 80077ae:	d1f9      	bne.n	80077a4 <_svfiprintf_r+0x50>
 80077b0:	ebba 0b04 	subs.w	fp, sl, r4
 80077b4:	d00b      	beq.n	80077ce <_svfiprintf_r+0x7a>
 80077b6:	465b      	mov	r3, fp
 80077b8:	4622      	mov	r2, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	4638      	mov	r0, r7
 80077be:	f7ff ff6f 	bl	80076a0 <__ssputs_r>
 80077c2:	3001      	adds	r0, #1
 80077c4:	f000 80a9 	beq.w	800791a <_svfiprintf_r+0x1c6>
 80077c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ca:	445a      	add	r2, fp
 80077cc:	9209      	str	r2, [sp, #36]	; 0x24
 80077ce:	f89a 3000 	ldrb.w	r3, [sl]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 80a1 	beq.w	800791a <_svfiprintf_r+0x1c6>
 80077d8:	2300      	movs	r3, #0
 80077da:	f04f 32ff 	mov.w	r2, #4294967295
 80077de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e2:	f10a 0a01 	add.w	sl, sl, #1
 80077e6:	9304      	str	r3, [sp, #16]
 80077e8:	9307      	str	r3, [sp, #28]
 80077ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ee:	931a      	str	r3, [sp, #104]	; 0x68
 80077f0:	4654      	mov	r4, sl
 80077f2:	2205      	movs	r2, #5
 80077f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f8:	4850      	ldr	r0, [pc, #320]	; (800793c <_svfiprintf_r+0x1e8>)
 80077fa:	f7f8 fd29 	bl	8000250 <memchr>
 80077fe:	9a04      	ldr	r2, [sp, #16]
 8007800:	b9d8      	cbnz	r0, 800783a <_svfiprintf_r+0xe6>
 8007802:	06d0      	lsls	r0, r2, #27
 8007804:	bf44      	itt	mi
 8007806:	2320      	movmi	r3, #32
 8007808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800780c:	0711      	lsls	r1, r2, #28
 800780e:	bf44      	itt	mi
 8007810:	232b      	movmi	r3, #43	; 0x2b
 8007812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007816:	f89a 3000 	ldrb.w	r3, [sl]
 800781a:	2b2a      	cmp	r3, #42	; 0x2a
 800781c:	d015      	beq.n	800784a <_svfiprintf_r+0xf6>
 800781e:	9a07      	ldr	r2, [sp, #28]
 8007820:	4654      	mov	r4, sl
 8007822:	2000      	movs	r0, #0
 8007824:	f04f 0c0a 	mov.w	ip, #10
 8007828:	4621      	mov	r1, r4
 800782a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800782e:	3b30      	subs	r3, #48	; 0x30
 8007830:	2b09      	cmp	r3, #9
 8007832:	d94d      	bls.n	80078d0 <_svfiprintf_r+0x17c>
 8007834:	b1b0      	cbz	r0, 8007864 <_svfiprintf_r+0x110>
 8007836:	9207      	str	r2, [sp, #28]
 8007838:	e014      	b.n	8007864 <_svfiprintf_r+0x110>
 800783a:	eba0 0308 	sub.w	r3, r0, r8
 800783e:	fa09 f303 	lsl.w	r3, r9, r3
 8007842:	4313      	orrs	r3, r2
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	46a2      	mov	sl, r4
 8007848:	e7d2      	b.n	80077f0 <_svfiprintf_r+0x9c>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	1d19      	adds	r1, r3, #4
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	9103      	str	r1, [sp, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	bfbb      	ittet	lt
 8007856:	425b      	neglt	r3, r3
 8007858:	f042 0202 	orrlt.w	r2, r2, #2
 800785c:	9307      	strge	r3, [sp, #28]
 800785e:	9307      	strlt	r3, [sp, #28]
 8007860:	bfb8      	it	lt
 8007862:	9204      	strlt	r2, [sp, #16]
 8007864:	7823      	ldrb	r3, [r4, #0]
 8007866:	2b2e      	cmp	r3, #46	; 0x2e
 8007868:	d10c      	bne.n	8007884 <_svfiprintf_r+0x130>
 800786a:	7863      	ldrb	r3, [r4, #1]
 800786c:	2b2a      	cmp	r3, #42	; 0x2a
 800786e:	d134      	bne.n	80078da <_svfiprintf_r+0x186>
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	1d1a      	adds	r2, r3, #4
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	9203      	str	r2, [sp, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	bfb8      	it	lt
 800787c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007880:	3402      	adds	r4, #2
 8007882:	9305      	str	r3, [sp, #20]
 8007884:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800794c <_svfiprintf_r+0x1f8>
 8007888:	7821      	ldrb	r1, [r4, #0]
 800788a:	2203      	movs	r2, #3
 800788c:	4650      	mov	r0, sl
 800788e:	f7f8 fcdf 	bl	8000250 <memchr>
 8007892:	b138      	cbz	r0, 80078a4 <_svfiprintf_r+0x150>
 8007894:	9b04      	ldr	r3, [sp, #16]
 8007896:	eba0 000a 	sub.w	r0, r0, sl
 800789a:	2240      	movs	r2, #64	; 0x40
 800789c:	4082      	lsls	r2, r0
 800789e:	4313      	orrs	r3, r2
 80078a0:	3401      	adds	r4, #1
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a8:	4825      	ldr	r0, [pc, #148]	; (8007940 <_svfiprintf_r+0x1ec>)
 80078aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078ae:	2206      	movs	r2, #6
 80078b0:	f7f8 fcce 	bl	8000250 <memchr>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d038      	beq.n	800792a <_svfiprintf_r+0x1d6>
 80078b8:	4b22      	ldr	r3, [pc, #136]	; (8007944 <_svfiprintf_r+0x1f0>)
 80078ba:	bb1b      	cbnz	r3, 8007904 <_svfiprintf_r+0x1b0>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	3307      	adds	r3, #7
 80078c0:	f023 0307 	bic.w	r3, r3, #7
 80078c4:	3308      	adds	r3, #8
 80078c6:	9303      	str	r3, [sp, #12]
 80078c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ca:	4433      	add	r3, r6
 80078cc:	9309      	str	r3, [sp, #36]	; 0x24
 80078ce:	e768      	b.n	80077a2 <_svfiprintf_r+0x4e>
 80078d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d4:	460c      	mov	r4, r1
 80078d6:	2001      	movs	r0, #1
 80078d8:	e7a6      	b.n	8007828 <_svfiprintf_r+0xd4>
 80078da:	2300      	movs	r3, #0
 80078dc:	3401      	adds	r4, #1
 80078de:	9305      	str	r3, [sp, #20]
 80078e0:	4619      	mov	r1, r3
 80078e2:	f04f 0c0a 	mov.w	ip, #10
 80078e6:	4620      	mov	r0, r4
 80078e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ec:	3a30      	subs	r2, #48	; 0x30
 80078ee:	2a09      	cmp	r2, #9
 80078f0:	d903      	bls.n	80078fa <_svfiprintf_r+0x1a6>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0c6      	beq.n	8007884 <_svfiprintf_r+0x130>
 80078f6:	9105      	str	r1, [sp, #20]
 80078f8:	e7c4      	b.n	8007884 <_svfiprintf_r+0x130>
 80078fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80078fe:	4604      	mov	r4, r0
 8007900:	2301      	movs	r3, #1
 8007902:	e7f0      	b.n	80078e6 <_svfiprintf_r+0x192>
 8007904:	ab03      	add	r3, sp, #12
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	462a      	mov	r2, r5
 800790a:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <_svfiprintf_r+0x1f4>)
 800790c:	a904      	add	r1, sp, #16
 800790e:	4638      	mov	r0, r7
 8007910:	f3af 8000 	nop.w
 8007914:	1c42      	adds	r2, r0, #1
 8007916:	4606      	mov	r6, r0
 8007918:	d1d6      	bne.n	80078c8 <_svfiprintf_r+0x174>
 800791a:	89ab      	ldrh	r3, [r5, #12]
 800791c:	065b      	lsls	r3, r3, #25
 800791e:	f53f af2d 	bmi.w	800777c <_svfiprintf_r+0x28>
 8007922:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007924:	b01d      	add	sp, #116	; 0x74
 8007926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800792a:	ab03      	add	r3, sp, #12
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	462a      	mov	r2, r5
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <_svfiprintf_r+0x1f4>)
 8007932:	a904      	add	r1, sp, #16
 8007934:	4638      	mov	r0, r7
 8007936:	f000 f879 	bl	8007a2c <_printf_i>
 800793a:	e7eb      	b.n	8007914 <_svfiprintf_r+0x1c0>
 800793c:	08007e7c 	.word	0x08007e7c
 8007940:	08007e86 	.word	0x08007e86
 8007944:	00000000 	.word	0x00000000
 8007948:	080076a1 	.word	0x080076a1
 800794c:	08007e82 	.word	0x08007e82

08007950 <_printf_common>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	4616      	mov	r6, r2
 8007956:	4699      	mov	r9, r3
 8007958:	688a      	ldr	r2, [r1, #8]
 800795a:	690b      	ldr	r3, [r1, #16]
 800795c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007960:	4293      	cmp	r3, r2
 8007962:	bfb8      	it	lt
 8007964:	4613      	movlt	r3, r2
 8007966:	6033      	str	r3, [r6, #0]
 8007968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800796c:	4607      	mov	r7, r0
 800796e:	460c      	mov	r4, r1
 8007970:	b10a      	cbz	r2, 8007976 <_printf_common+0x26>
 8007972:	3301      	adds	r3, #1
 8007974:	6033      	str	r3, [r6, #0]
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	0699      	lsls	r1, r3, #26
 800797a:	bf42      	ittt	mi
 800797c:	6833      	ldrmi	r3, [r6, #0]
 800797e:	3302      	addmi	r3, #2
 8007980:	6033      	strmi	r3, [r6, #0]
 8007982:	6825      	ldr	r5, [r4, #0]
 8007984:	f015 0506 	ands.w	r5, r5, #6
 8007988:	d106      	bne.n	8007998 <_printf_common+0x48>
 800798a:	f104 0a19 	add.w	sl, r4, #25
 800798e:	68e3      	ldr	r3, [r4, #12]
 8007990:	6832      	ldr	r2, [r6, #0]
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	42ab      	cmp	r3, r5
 8007996:	dc26      	bgt.n	80079e6 <_printf_common+0x96>
 8007998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800799c:	1e13      	subs	r3, r2, #0
 800799e:	6822      	ldr	r2, [r4, #0]
 80079a0:	bf18      	it	ne
 80079a2:	2301      	movne	r3, #1
 80079a4:	0692      	lsls	r2, r2, #26
 80079a6:	d42b      	bmi.n	8007a00 <_printf_common+0xb0>
 80079a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079ac:	4649      	mov	r1, r9
 80079ae:	4638      	mov	r0, r7
 80079b0:	47c0      	blx	r8
 80079b2:	3001      	adds	r0, #1
 80079b4:	d01e      	beq.n	80079f4 <_printf_common+0xa4>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	6922      	ldr	r2, [r4, #16]
 80079ba:	f003 0306 	and.w	r3, r3, #6
 80079be:	2b04      	cmp	r3, #4
 80079c0:	bf02      	ittt	eq
 80079c2:	68e5      	ldreq	r5, [r4, #12]
 80079c4:	6833      	ldreq	r3, [r6, #0]
 80079c6:	1aed      	subeq	r5, r5, r3
 80079c8:	68a3      	ldr	r3, [r4, #8]
 80079ca:	bf0c      	ite	eq
 80079cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079d0:	2500      	movne	r5, #0
 80079d2:	4293      	cmp	r3, r2
 80079d4:	bfc4      	itt	gt
 80079d6:	1a9b      	subgt	r3, r3, r2
 80079d8:	18ed      	addgt	r5, r5, r3
 80079da:	2600      	movs	r6, #0
 80079dc:	341a      	adds	r4, #26
 80079de:	42b5      	cmp	r5, r6
 80079e0:	d11a      	bne.n	8007a18 <_printf_common+0xc8>
 80079e2:	2000      	movs	r0, #0
 80079e4:	e008      	b.n	80079f8 <_printf_common+0xa8>
 80079e6:	2301      	movs	r3, #1
 80079e8:	4652      	mov	r2, sl
 80079ea:	4649      	mov	r1, r9
 80079ec:	4638      	mov	r0, r7
 80079ee:	47c0      	blx	r8
 80079f0:	3001      	adds	r0, #1
 80079f2:	d103      	bne.n	80079fc <_printf_common+0xac>
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fc:	3501      	adds	r5, #1
 80079fe:	e7c6      	b.n	800798e <_printf_common+0x3e>
 8007a00:	18e1      	adds	r1, r4, r3
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	2030      	movs	r0, #48	; 0x30
 8007a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a0a:	4422      	add	r2, r4
 8007a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a14:	3302      	adds	r3, #2
 8007a16:	e7c7      	b.n	80079a8 <_printf_common+0x58>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	4638      	mov	r0, r7
 8007a20:	47c0      	blx	r8
 8007a22:	3001      	adds	r0, #1
 8007a24:	d0e6      	beq.n	80079f4 <_printf_common+0xa4>
 8007a26:	3601      	adds	r6, #1
 8007a28:	e7d9      	b.n	80079de <_printf_common+0x8e>
	...

08007a2c <_printf_i>:
 8007a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a30:	7e0f      	ldrb	r7, [r1, #24]
 8007a32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a34:	2f78      	cmp	r7, #120	; 0x78
 8007a36:	4691      	mov	r9, r2
 8007a38:	4680      	mov	r8, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	469a      	mov	sl, r3
 8007a3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a42:	d807      	bhi.n	8007a54 <_printf_i+0x28>
 8007a44:	2f62      	cmp	r7, #98	; 0x62
 8007a46:	d80a      	bhi.n	8007a5e <_printf_i+0x32>
 8007a48:	2f00      	cmp	r7, #0
 8007a4a:	f000 80d4 	beq.w	8007bf6 <_printf_i+0x1ca>
 8007a4e:	2f58      	cmp	r7, #88	; 0x58
 8007a50:	f000 80c0 	beq.w	8007bd4 <_printf_i+0x1a8>
 8007a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a5c:	e03a      	b.n	8007ad4 <_printf_i+0xa8>
 8007a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a62:	2b15      	cmp	r3, #21
 8007a64:	d8f6      	bhi.n	8007a54 <_printf_i+0x28>
 8007a66:	a101      	add	r1, pc, #4	; (adr r1, 8007a6c <_printf_i+0x40>)
 8007a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a6c:	08007ac5 	.word	0x08007ac5
 8007a70:	08007ad9 	.word	0x08007ad9
 8007a74:	08007a55 	.word	0x08007a55
 8007a78:	08007a55 	.word	0x08007a55
 8007a7c:	08007a55 	.word	0x08007a55
 8007a80:	08007a55 	.word	0x08007a55
 8007a84:	08007ad9 	.word	0x08007ad9
 8007a88:	08007a55 	.word	0x08007a55
 8007a8c:	08007a55 	.word	0x08007a55
 8007a90:	08007a55 	.word	0x08007a55
 8007a94:	08007a55 	.word	0x08007a55
 8007a98:	08007bdd 	.word	0x08007bdd
 8007a9c:	08007b05 	.word	0x08007b05
 8007aa0:	08007b97 	.word	0x08007b97
 8007aa4:	08007a55 	.word	0x08007a55
 8007aa8:	08007a55 	.word	0x08007a55
 8007aac:	08007bff 	.word	0x08007bff
 8007ab0:	08007a55 	.word	0x08007a55
 8007ab4:	08007b05 	.word	0x08007b05
 8007ab8:	08007a55 	.word	0x08007a55
 8007abc:	08007a55 	.word	0x08007a55
 8007ac0:	08007b9f 	.word	0x08007b9f
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	1d1a      	adds	r2, r3, #4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	602a      	str	r2, [r5, #0]
 8007acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e09f      	b.n	8007c18 <_printf_i+0x1ec>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	0607      	lsls	r7, r0, #24
 8007ade:	f103 0104 	add.w	r1, r3, #4
 8007ae2:	6029      	str	r1, [r5, #0]
 8007ae4:	d501      	bpl.n	8007aea <_printf_i+0xbe>
 8007ae6:	681e      	ldr	r6, [r3, #0]
 8007ae8:	e003      	b.n	8007af2 <_printf_i+0xc6>
 8007aea:	0646      	lsls	r6, r0, #25
 8007aec:	d5fb      	bpl.n	8007ae6 <_printf_i+0xba>
 8007aee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007af2:	2e00      	cmp	r6, #0
 8007af4:	da03      	bge.n	8007afe <_printf_i+0xd2>
 8007af6:	232d      	movs	r3, #45	; 0x2d
 8007af8:	4276      	negs	r6, r6
 8007afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007afe:	485a      	ldr	r0, [pc, #360]	; (8007c68 <_printf_i+0x23c>)
 8007b00:	230a      	movs	r3, #10
 8007b02:	e012      	b.n	8007b2a <_printf_i+0xfe>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	1d19      	adds	r1, r3, #4
 8007b0a:	6029      	str	r1, [r5, #0]
 8007b0c:	0605      	lsls	r5, r0, #24
 8007b0e:	d501      	bpl.n	8007b14 <_printf_i+0xe8>
 8007b10:	681e      	ldr	r6, [r3, #0]
 8007b12:	e002      	b.n	8007b1a <_printf_i+0xee>
 8007b14:	0641      	lsls	r1, r0, #25
 8007b16:	d5fb      	bpl.n	8007b10 <_printf_i+0xe4>
 8007b18:	881e      	ldrh	r6, [r3, #0]
 8007b1a:	4853      	ldr	r0, [pc, #332]	; (8007c68 <_printf_i+0x23c>)
 8007b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b1e:	bf0c      	ite	eq
 8007b20:	2308      	moveq	r3, #8
 8007b22:	230a      	movne	r3, #10
 8007b24:	2100      	movs	r1, #0
 8007b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b2a:	6865      	ldr	r5, [r4, #4]
 8007b2c:	60a5      	str	r5, [r4, #8]
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	bfa2      	ittt	ge
 8007b32:	6821      	ldrge	r1, [r4, #0]
 8007b34:	f021 0104 	bicge.w	r1, r1, #4
 8007b38:	6021      	strge	r1, [r4, #0]
 8007b3a:	b90e      	cbnz	r6, 8007b40 <_printf_i+0x114>
 8007b3c:	2d00      	cmp	r5, #0
 8007b3e:	d04b      	beq.n	8007bd8 <_printf_i+0x1ac>
 8007b40:	4615      	mov	r5, r2
 8007b42:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b46:	fb03 6711 	mls	r7, r3, r1, r6
 8007b4a:	5dc7      	ldrb	r7, [r0, r7]
 8007b4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b50:	4637      	mov	r7, r6
 8007b52:	42bb      	cmp	r3, r7
 8007b54:	460e      	mov	r6, r1
 8007b56:	d9f4      	bls.n	8007b42 <_printf_i+0x116>
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d10b      	bne.n	8007b74 <_printf_i+0x148>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	07de      	lsls	r6, r3, #31
 8007b60:	d508      	bpl.n	8007b74 <_printf_i+0x148>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	6861      	ldr	r1, [r4, #4]
 8007b66:	4299      	cmp	r1, r3
 8007b68:	bfde      	ittt	le
 8007b6a:	2330      	movle	r3, #48	; 0x30
 8007b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b74:	1b52      	subs	r2, r2, r5
 8007b76:	6122      	str	r2, [r4, #16]
 8007b78:	f8cd a000 	str.w	sl, [sp]
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	aa03      	add	r2, sp, #12
 8007b80:	4621      	mov	r1, r4
 8007b82:	4640      	mov	r0, r8
 8007b84:	f7ff fee4 	bl	8007950 <_printf_common>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d14a      	bne.n	8007c22 <_printf_i+0x1f6>
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b90:	b004      	add	sp, #16
 8007b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	f043 0320 	orr.w	r3, r3, #32
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	4833      	ldr	r0, [pc, #204]	; (8007c6c <_printf_i+0x240>)
 8007ba0:	2778      	movs	r7, #120	; 0x78
 8007ba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	6829      	ldr	r1, [r5, #0]
 8007baa:	061f      	lsls	r7, r3, #24
 8007bac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bb0:	d402      	bmi.n	8007bb8 <_printf_i+0x18c>
 8007bb2:	065f      	lsls	r7, r3, #25
 8007bb4:	bf48      	it	mi
 8007bb6:	b2b6      	uxthmi	r6, r6
 8007bb8:	07df      	lsls	r7, r3, #31
 8007bba:	bf48      	it	mi
 8007bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8007bc0:	6029      	str	r1, [r5, #0]
 8007bc2:	bf48      	it	mi
 8007bc4:	6023      	strmi	r3, [r4, #0]
 8007bc6:	b91e      	cbnz	r6, 8007bd0 <_printf_i+0x1a4>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	f023 0320 	bic.w	r3, r3, #32
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	e7a7      	b.n	8007b24 <_printf_i+0xf8>
 8007bd4:	4824      	ldr	r0, [pc, #144]	; (8007c68 <_printf_i+0x23c>)
 8007bd6:	e7e4      	b.n	8007ba2 <_printf_i+0x176>
 8007bd8:	4615      	mov	r5, r2
 8007bda:	e7bd      	b.n	8007b58 <_printf_i+0x12c>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	6826      	ldr	r6, [r4, #0]
 8007be0:	6961      	ldr	r1, [r4, #20]
 8007be2:	1d18      	adds	r0, r3, #4
 8007be4:	6028      	str	r0, [r5, #0]
 8007be6:	0635      	lsls	r5, r6, #24
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	d501      	bpl.n	8007bf0 <_printf_i+0x1c4>
 8007bec:	6019      	str	r1, [r3, #0]
 8007bee:	e002      	b.n	8007bf6 <_printf_i+0x1ca>
 8007bf0:	0670      	lsls	r0, r6, #25
 8007bf2:	d5fb      	bpl.n	8007bec <_printf_i+0x1c0>
 8007bf4:	8019      	strh	r1, [r3, #0]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	6123      	str	r3, [r4, #16]
 8007bfa:	4615      	mov	r5, r2
 8007bfc:	e7bc      	b.n	8007b78 <_printf_i+0x14c>
 8007bfe:	682b      	ldr	r3, [r5, #0]
 8007c00:	1d1a      	adds	r2, r3, #4
 8007c02:	602a      	str	r2, [r5, #0]
 8007c04:	681d      	ldr	r5, [r3, #0]
 8007c06:	6862      	ldr	r2, [r4, #4]
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f7f8 fb20 	bl	8000250 <memchr>
 8007c10:	b108      	cbz	r0, 8007c16 <_printf_i+0x1ea>
 8007c12:	1b40      	subs	r0, r0, r5
 8007c14:	6060      	str	r0, [r4, #4]
 8007c16:	6863      	ldr	r3, [r4, #4]
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c20:	e7aa      	b.n	8007b78 <_printf_i+0x14c>
 8007c22:	6923      	ldr	r3, [r4, #16]
 8007c24:	462a      	mov	r2, r5
 8007c26:	4649      	mov	r1, r9
 8007c28:	4640      	mov	r0, r8
 8007c2a:	47d0      	blx	sl
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d0ad      	beq.n	8007b8c <_printf_i+0x160>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	079b      	lsls	r3, r3, #30
 8007c34:	d413      	bmi.n	8007c5e <_printf_i+0x232>
 8007c36:	68e0      	ldr	r0, [r4, #12]
 8007c38:	9b03      	ldr	r3, [sp, #12]
 8007c3a:	4298      	cmp	r0, r3
 8007c3c:	bfb8      	it	lt
 8007c3e:	4618      	movlt	r0, r3
 8007c40:	e7a6      	b.n	8007b90 <_printf_i+0x164>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4632      	mov	r2, r6
 8007c46:	4649      	mov	r1, r9
 8007c48:	4640      	mov	r0, r8
 8007c4a:	47d0      	blx	sl
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d09d      	beq.n	8007b8c <_printf_i+0x160>
 8007c50:	3501      	adds	r5, #1
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	9903      	ldr	r1, [sp, #12]
 8007c56:	1a5b      	subs	r3, r3, r1
 8007c58:	42ab      	cmp	r3, r5
 8007c5a:	dcf2      	bgt.n	8007c42 <_printf_i+0x216>
 8007c5c:	e7eb      	b.n	8007c36 <_printf_i+0x20a>
 8007c5e:	2500      	movs	r5, #0
 8007c60:	f104 0619 	add.w	r6, r4, #25
 8007c64:	e7f5      	b.n	8007c52 <_printf_i+0x226>
 8007c66:	bf00      	nop
 8007c68:	08007e8d 	.word	0x08007e8d
 8007c6c:	08007e9e 	.word	0x08007e9e

08007c70 <memmove>:
 8007c70:	4288      	cmp	r0, r1
 8007c72:	b510      	push	{r4, lr}
 8007c74:	eb01 0402 	add.w	r4, r1, r2
 8007c78:	d902      	bls.n	8007c80 <memmove+0x10>
 8007c7a:	4284      	cmp	r4, r0
 8007c7c:	4623      	mov	r3, r4
 8007c7e:	d807      	bhi.n	8007c90 <memmove+0x20>
 8007c80:	1e43      	subs	r3, r0, #1
 8007c82:	42a1      	cmp	r1, r4
 8007c84:	d008      	beq.n	8007c98 <memmove+0x28>
 8007c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c8e:	e7f8      	b.n	8007c82 <memmove+0x12>
 8007c90:	4402      	add	r2, r0
 8007c92:	4601      	mov	r1, r0
 8007c94:	428a      	cmp	r2, r1
 8007c96:	d100      	bne.n	8007c9a <memmove+0x2a>
 8007c98:	bd10      	pop	{r4, pc}
 8007c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ca2:	e7f7      	b.n	8007c94 <memmove+0x24>

08007ca4 <_sbrk_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d06      	ldr	r5, [pc, #24]	; (8007cc0 <_sbrk_r+0x1c>)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	f7f8 ffd0 	bl	8000c54 <_sbrk>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_sbrk_r+0x1a>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_sbrk_r+0x1a>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	20004bb4 	.word	0x20004bb4

08007cc4 <_realloc_r>:
 8007cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc8:	4680      	mov	r8, r0
 8007cca:	4614      	mov	r4, r2
 8007ccc:	460e      	mov	r6, r1
 8007cce:	b921      	cbnz	r1, 8007cda <_realloc_r+0x16>
 8007cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	f7ff bc57 	b.w	8007588 <_malloc_r>
 8007cda:	b92a      	cbnz	r2, 8007ce8 <_realloc_r+0x24>
 8007cdc:	f7ff fbe8 	bl	80074b0 <_free_r>
 8007ce0:	4625      	mov	r5, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce8:	f000 f81b 	bl	8007d22 <_malloc_usable_size_r>
 8007cec:	4284      	cmp	r4, r0
 8007cee:	4607      	mov	r7, r0
 8007cf0:	d802      	bhi.n	8007cf8 <_realloc_r+0x34>
 8007cf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cf6:	d812      	bhi.n	8007d1e <_realloc_r+0x5a>
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	f7ff fc44 	bl	8007588 <_malloc_r>
 8007d00:	4605      	mov	r5, r0
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d0ed      	beq.n	8007ce2 <_realloc_r+0x1e>
 8007d06:	42bc      	cmp	r4, r7
 8007d08:	4622      	mov	r2, r4
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	bf28      	it	cs
 8007d0e:	463a      	movcs	r2, r7
 8007d10:	f7ff fbc0 	bl	8007494 <memcpy>
 8007d14:	4631      	mov	r1, r6
 8007d16:	4640      	mov	r0, r8
 8007d18:	f7ff fbca 	bl	80074b0 <_free_r>
 8007d1c:	e7e1      	b.n	8007ce2 <_realloc_r+0x1e>
 8007d1e:	4635      	mov	r5, r6
 8007d20:	e7df      	b.n	8007ce2 <_realloc_r+0x1e>

08007d22 <_malloc_usable_size_r>:
 8007d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d26:	1f18      	subs	r0, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bfbc      	itt	lt
 8007d2c:	580b      	ldrlt	r3, [r1, r0]
 8007d2e:	18c0      	addlt	r0, r0, r3
 8007d30:	4770      	bx	lr
	...

08007d34 <_init>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr

08007d40 <_fini>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	bf00      	nop
 8007d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d46:	bc08      	pop	{r3}
 8007d48:	469e      	mov	lr, r3
 8007d4a:	4770      	bx	lr
